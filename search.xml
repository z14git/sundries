<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在wsl下使用usb设备</title>
    <url>/sundries/2022/11/03/%E5%9C%A8wsl%E4%B8%8B%E4%BD%BF%E7%94%A8usb%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h2 id="安装-usbipd-win"><a href="#安装-usbipd-win" class="headerlink" title="安装 usbipd-win"></a>安装 usbipd-win</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">winget install usbipd</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://github.com/dorssel/usbipd-win" target="_blank" rel="noopener">usbipd-win</a></li>
</ul>
]]></content>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch docker 使用记录</title>
    <url>/sundries/2022/11/03/pytorch-docker-%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --gpus all -p 8888:8888 --name torch -v /home/z14/repos:/workspace/repos --ipc=host pytorch/pytorch:1.13.0-cuda11.6-cudnn8-runtime</span><br></pre></td></tr></table></figure>

<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line">pip install jupyterlab ipywidgets jupyterlab_widgets matplotlib opencv-python-headless</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('123456', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br></pre></td></tr></table></figure>

<h2 id="启动-Jupyter-Lab"><a href="#启动-Jupyter-Lab" class="headerlink" title="启动 Jupyter Lab"></a>启动 Jupyter Lab</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">jupyter lab --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/Max_ZhangJF/article/details/108920050" target="_blank" rel="noopener">docker环境里安装opencv ImportError: libGL.so.1: cannot open shared object file: No such file or directory</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker容器</title>
    <url>/sundries/2022/11/03/%E4%BD%BF%E7%94%A8docker%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="创建并运行一个新的docker容器"><a href="#创建并运行一个新的docker容器" class="headerlink" title="创建并运行一个新的docker容器"></a>创建并运行一个新的docker容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --gpus all -p 8888:8888 --name torch -v /home/z14/repos:/workspace/repos --ipc=host pytorch/pytorch:1.13.0-cuda11.6-cudnn8-runtime</span><br></pre></td></tr></table></figure>

<p>命令解析：</p>
<ol>
<li>run 新建一个窗口并且运行</li>
<li>-i 交互式，连接网络</li>
<li>-t 打开终端</li>
<li>–gpus all 使用所有显卡</li>
<li>8888:8888 将容器的8888端口映射到wsl的8888端口</li>
<li>–name torch 将该容器命名为 torch</li>
<li>-v 将本地 /home/z14/repos 目录映射到容器的 /workspace/repos</li>
<li>–ipc=host 使用主机内存</li>
<li>pytorch/pytorch:1.13.0-cuda11.6-cudnn8-runtime 容器使用的镜像</li>
</ol>
<h2 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h2><p>使用 <code>attach</code> 方法进入的容器可用下面的方法退出（容器会停止）。</p>
<p>注意：用 <code>exec</code> 进入的容器，用下面的方法退出不会停止。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment"># 或 Ctrl + D</span></span><br></pre></td></tr></table></figure>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start torch</span><br></pre></td></tr></table></figure>

<h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it torch bash</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">docker attach torch</span><br></pre></td></tr></table></figure>

<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop torch</span><br></pre></td></tr></table></figure>

<h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f torch</span><br></pre></td></tr></table></figure>

<h2 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h2><p>导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container ls -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">7691a814370e        ubuntu:18.04        <span class="string">"/bin/bash"</span>         36 hours ago        Exited (0) 21 hours ago                       <span class="built_in">test</span></span><br><span class="line">$ docker <span class="built_in">export</span> 7691a814370e &gt; ubuntu.tar</span><br></pre></td></tr></table></figure>

<p>导入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line">$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED              VIRTUAL SIZE</span><br><span class="line"><span class="built_in">test</span>/ubuntu         v1.0                9d37a6082e97        About a minute ago   171.3 MB</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/ych_512/article/details/106053298" target="_blank" rel="noopener">Docker删除容器命令</a></li>
<li><a href="https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/running.html#running" target="_blank" rel="noopener">Running PyTorch</a></li>
<li><a href="https://blog.csdn.net/weixin_37598106/article/details/119916943" target="_blank" rel="noopener">docker + pytorch + jupyter 环境配置</a></li>
<li><a href="https://yeasy.gitbook.io/docker_practice/container/import_export" target="_blank" rel="noopener">导出和导入</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>修改wsl的docker镜像路径</title>
    <url>/sundries/2022/11/02/%E4%BF%AE%E6%94%B9wsl%E7%9A%84docker%E9%95%9C%E5%83%8F%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<ol>
<li><p>退出 Docker Desktop。</p>
 <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p> 确保 <code>docker</code> 的两个镜像状态为 <code>Stopped</code>。</p>
</li>
<li><p>备份 <code>docker-desktop-data</code></p>
 <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-export</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> F:\docker<span class="literal">-data</span>.tar</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除旧<code>docker-desktop-data</code></p>
 <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-unregister</span> docker<span class="literal">-desktop</span><span class="literal">-data</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新导入<code>docker-desktop-data</code></p>
 <figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-import</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> <span class="string">"F:\wsl-docker-data"</span> F:\docker<span class="literal">-data</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>参考：</p>
<ul>
<li><a href="https://www.xiaog.info/blog/post/change_docker_image_path_with_wsl_base_engine" target="_blank" rel="noopener">Windows下修改使用WSL的Docker镜像路径</a></li>
<li><a href="https://blog.51cto.com/u_15060464/3872849" target="_blank" rel="noopener">docker镜像文件位置windows环境下修改（wsl 2）</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>在 wsl 中使用 cuda</title>
    <url>/sundries/2022/11/02/%E5%9C%A8-wsl-%E4%B8%AD%E4%BD%BF%E7%94%A8-cuda/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>安装好 wsl2</li>
<li>安装 <a href="https://docs.docker.com/docker-for-windows/wsl/#download" target="_blank" rel="noopener">Docker Desktop</a></li>
<li>安装最新 nvidia 显卡驱动</li>
</ol>
<h2 id="Setting-up-NVIDIA-CUDA-with-Docker"><a href="#Setting-up-NVIDIA-CUDA-with-Docker" class="headerlink" title="Setting up NVIDIA CUDA with Docker"></a>Setting up NVIDIA CUDA with Docker</h2><figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-key</span> del <span class="number">7</span>fa2af80</span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl<span class="literal">-ubuntu</span>/x86_64/cuda<span class="literal">-wsl</span><span class="literal">-ubuntu</span>.pin</span><br><span class="line">sudo mv cuda<span class="literal">-wsl</span><span class="literal">-ubuntu</span>.pin /etc/apt/preferences.d/cuda<span class="literal">-repository</span><span class="literal">-pin</span><span class="literal">-600</span></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/<span class="number">11.8</span>.<span class="number">0</span>/local_installers/cuda<span class="literal">-repo</span><span class="literal">-wsl</span><span class="literal">-ubuntu</span><span class="literal">-11</span><span class="literal">-8</span><span class="literal">-local_11</span>.<span class="number">8.0</span><span class="literal">-1_amd64</span>.deb</span><br><span class="line">sudo dpkg <span class="literal">-i</span> cuda<span class="literal">-repo</span><span class="literal">-wsl</span><span class="literal">-ubuntu</span><span class="literal">-11</span><span class="literal">-8</span><span class="literal">-local_11</span>.<span class="number">8.0</span><span class="literal">-1_amd64</span>.deb</span><br><span class="line">sudo cp /var/cuda<span class="literal">-repo</span><span class="literal">-wsl</span><span class="literal">-ubuntu</span><span class="literal">-11</span><span class="literal">-8</span><span class="literal">-local</span>/cuda-*<span class="literal">-keyring</span>.gpg /usr/share/keyrings/</span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line">sudo apt<span class="literal">-get</span> <span class="literal">-y</span> install cuda</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">distribution=<span class="variable">$</span>(. /etc/os<span class="literal">-release</span>;echo <span class="variable">$ID</span><span class="variable">$VERSION_ID</span>)</span><br><span class="line">curl <span class="literal">-s</span> <span class="literal">-L</span> https://nvidia.github.io/nvidia<span class="literal">-docker</span>/gpgkey | sudo apt<span class="literal">-key</span> add -</span><br><span class="line">curl <span class="literal">-s</span> <span class="literal">-L</span> https://nvidia.github.io/nvidia<span class="literal">-docker</span>/<span class="variable">$distribution</span>/nvidia<span class="literal">-docker</span>.list | sudo tee /etc/apt/sources.list.d/nvidia<span class="literal">-docker</span>.list</span><br><span class="line">sudo apt<span class="literal">-get</span> update</span><br><span class="line">sudo apt<span class="literal">-get</span> install <span class="literal">-y</span> nvidia<span class="literal">-docker2</span></span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers#install-docker-desktop" target="_blank" rel="noopener">Get started with Docker remote containers on WSL 2</a></li>
<li><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started-with-cuda-on-wsl" target="_blank" rel="noopener">CUDA on WSL User Guide</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/tutorials/gpu-compute" target="_blank" rel="noopener">Get started with GPU acceleration for ML in WSL</a></li>
</ul>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>wsl</tag>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>wsl 备份与迁移</title>
    <url>/sundries/2022/11/02/wsl-%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>列出所有 image</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span></span><br></pre></td></tr></table></figure>

<p>导出 image 到 tar 文件</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-export</span> &lt;Distribution Name&gt; &lt;FileName&gt;</span><br></pre></td></tr></table></figure>

<p>导入 tar 镜像</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-import</span> &lt;Distribution Name&gt; &lt;InstallLocation&gt; &lt;FileName&gt;</span><br></pre></td></tr></table></figure>

<p>ps: 这一步的 <code>Distribution Name</code> 可以自定义</p>
<p>参考：</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/basic-commands" target="_blank" rel="noopener">Basic commands for WSL</a></li>
<li><a href="https://4sysops.com/archives/export-and-import-windows-subsystem-for-linux-wsl/" target="_blank" rel="noopener">Export and import Windows Subsystem for Linux (WSL)</a></li>
</ul>
]]></content>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>install apk from command prompt</title>
    <url>/sundries/2022/11/02/install-apk-from-command-prompt/</url>
    <content><![CDATA[<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure>

<p>you will get results like below</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">System32</span>&gt;<span class="title">adb</span> <span class="title">devices</span> </span></span><br><span class="line"><span class="function"><span class="title">List</span> <span class="title">of</span> <span class="title">devices</span> <span class="title">attached</span> </span></span><br><span class="line"><span class="function"><span class="title">a3b09hh3e</span>    <span class="title">device</span> </span></span><br><span class="line"><span class="function"><span class="title">emulator</span>-5334    <span class="title">device</span></span></span><br></pre></td></tr></table></figure>

<p>chose one of these devices and add parameter to adb command as “ -s a3b09hh3e “ as below</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb -s a3b09a6e install  example.apk</span><br></pre></td></tr></table></figure>

<p>also as a hint if the path of the apk long and have a spaces, just add it between double quotes like</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">adb -s a3b09a6e install  "c:\my apk location\here <span class="number">123</span>\example.apk"</span><br></pre></td></tr></table></figure>

<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/a/42117983" target="_blank" rel="noopener">Install an apk file from command prompt?</a></li>
</ul>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>adb</tag>
      </tags>
  </entry>
  <entry>
    <title>手动安装wsl2</title>
    <url>/sundries/2022/11/01/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85wsl2/</url>
    <content><![CDATA[<h2 id="Step-1-Enable-the-Windows-Subsystem-for-Linux"><a href="#Step-1-Enable-the-Windows-Subsystem-for-Linux" class="headerlink" title="Step 1 - Enable the Windows Subsystem for Linux"></a>Step 1 - Enable the Windows Subsystem for Linux</h2><p>Open PowerShell as Administrator (Start menu &gt; PowerShell &gt; right-click &gt; Run as Administrator) and enter this command:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>

<h2 id="Step-2-Check-requirements-for-running-WSL-2"><a href="#Step-2-Check-requirements-for-running-WSL-2" class="headerlink" title="Step 2 - Check requirements for running WSL 2"></a>Step 2 - Check requirements for running WSL 2</h2><p>To update to WSL 2, you must be running Windows 10…</p>
<ul>
<li>For x64 systems: Version 1903 or later, with Build 18362 or later.</li>
<li>For ARM64 systems: Version 2004 or later, with Build 19041 or later.</li>
</ul>
<p>or Windows 11.</p>
<h2 id="Step-3-Enable-Virtual-Machine-feature"><a href="#Step-3-Enable-Virtual-Machine-feature" class="headerlink" title="Step 3 - Enable Virtual Machine feature"></a>Step 3 - Enable Virtual Machine feature</h2><p>Before installing WSL 2, you must enable the Virtual Machine Platform optional feature. Your machine will require virtualization capabilities to use this feature.</p>
<p>Open PowerShell as Administrator and run:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>Restart your machine to complete the WSL install and update to WSL 2.</p>
<h2 id="Step-4-Download-the-Linux-kernel-update-package"><a href="#Step-4-Download-the-Linux-kernel-update-package" class="headerlink" title="Step 4 - Download the Linux kernel update package"></a>Step 4 - Download the Linux kernel update package</h2><ol>
<li><p>Download the latest package:</p>
<ul>
<li><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">WSL2 Linux kernel update package for x64 machines</a></li>
</ul>
</li>
<li><p>Run the update package downloaded in the previous step. (Double-click to run - you will be prompted for elevated permissions, select ‘yes’ to approve this installation.)</p>
</li>
</ol>
<p>Once the installation is complete, move on to the next step - setting WSL 2 as your default version when installing new Linux distributions. (Skip this step if you want your new Linux installs to be set to WSL 1).</p>
<h2 id="Step-5-Set-WSL-2-as-your-default-version"><a href="#Step-5-Set-WSL-2-as-your-default-version" class="headerlink" title="Step 5 - Set WSL 2 as your default version"></a>Step 5 - Set WSL 2 as your default version</h2><p>Open PowerShell and run this command to set WSL 2 as the default version when installing a new Linux distribution:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="Step-6-Install-your-Linux-distribution-of-choice"><a href="#Step-6-Install-your-Linux-distribution-of-choice" class="headerlink" title="Step 6 - Install your Linux distribution of choice"></a>Step 6 - Install your Linux distribution of choice</h2><ol>
<li><p>打开 <a href="https://store.rg-adguard.net/" target="_blank" rel="noopener">https://store.rg-adguard.net/</a> ，输入<a href="https://apps.microsoft.com/store/detail/ubuntu-20045-lts/9MTTCL66CPXJ?hl=zh-cn&gl=cn&icid=CNavAppsWindowsApps" target="_blank" rel="noopener">Ubuntu 20.04</a>的微软商店地址。</p>
</li>
<li><p>解释后下载 <a href="http://tlu.dl.delivery.mp.microsoft.com/filestreamingservice/files/4f1f486d-b9b5-4133-9831-448f8014b4ae?P1=1667293043&P2=404&P3=2&P4=RXsZg%2fN1qKzWEhKaT1W0Fgjtp5aIpNQdvWoc1G%2bL2mhTGy5y9%2fPP8u0kpSqzkCN6GJCtAixpR%2bMEuEkUAeTYkw%3d%3d" target="_blank" rel="noopener">CanonicalGroupLimited.Ubuntu20.04LTS_2004.5.11.0_neutral_~_79rhkp1fndgsc.appxbundle</a></p>
</li>
<li><p>用管理员身份打开 PowerShell，执行以下命令:</p>
<p> <code>Add-AppxPackage &lt;上一步下载的AppxBundle文件路径&gt;</code></p>
</li>
<li><p>之后在 Windows Terminal 中打开 Ubuntu 20.04 即可</p>
</li>
</ol>
<p>参考：</p>
<ul>
<li><a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual" target="_blank" rel="noopener">Manual installation steps for older versions of WSL</a></li>
<li><a href="https://zhongce.sina.com.cn/article/view/29038" target="_blank" rel="noopener">一文教你如何摆脱应用商店下载微软应用</a></li>
</ul>
]]></content>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>jp4.6.1 log</title>
    <url>/sundries/2022/08/04/jp4.6.1-log/</url>
    <content><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开网卡</span></span><br><span class="line">sudo ifconfig wlan0 up</span><br><span class="line"><span class="comment"># 配wifi</span></span><br><span class="line">sudo nmtui</span><br><span class="line">mkdir repos</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git cmake</span><br></pre></td></tr></table></figure>

<h2 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install proxychains4</span><br><span class="line">sudo vim /etc/proxychains4.conf <span class="comment"># 修改代理地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化proxychains4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias pc4='proxychains4'"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias sudo='sudo '"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Install-other-dependencies"><a href="#Install-other-dependencies" class="headerlink" title="Install other dependencies"></a>Install other dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo pc4 apt-get install python3-dev</span><br><span class="line">sudo pc4 apt-get install nano locate</span><br><span class="line">sudo pc4 apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo pc4 apt-get install cython3</span><br><span class="line">sudo pc4 apt-get install libxml2-dev libxslt1-dev</span><br><span class="line">sudo pc4 apt install curl screen</span><br></pre></td></tr></table></figure>

<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://bootstrap.pypa.io/pip/3.6/get-pip.py</span><br><span class="line">sudo -H proxychains4 python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br></pre></td></tr></table></figure>

<h2 id="安装-Jetson-stats"><a href="#安装-Jetson-stats" class="headerlink" title="安装 Jetson stats"></a>安装 Jetson stats</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains4 pip install -U jetson-stats</span><br></pre></td></tr></table></figure>

<h2 id="Set-up-Python-virtual-environments"><a href="#Set-up-Python-virtual-environments" class="headerlink" title="Set up Python virtual environments"></a>Set up Python virtual environments</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains4 pip install virtualenv virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Create-virtual-environment"><a href="#Create-virtual-environment" class="headerlink" title="Create virtual environment"></a>Create virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv cv -p python3</span><br><span class="line">mkvirtualenv tf2 -p python3</span><br><span class="line">mkvirtualenv torch -p python3</span><br></pre></td></tr></table></figure>

<h2 id="Install-Jupyter"><a href="#Install-Jupyter" class="headerlink" title="Install Jupyter"></a>Install Jupyter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">sudo -H pip3 install jupyterlab</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('frotech', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建notebook目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自启动服务</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials</span><br><span class="line">sudo mv jetcard_jupyter.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetcard_jupyter</span><br><span class="line">sudo systemctl start jetcard_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ipywidgets</span></span><br><span class="line">sudo -H pip3 install jupyterlab_widgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl stop jetcard_jupyter</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br><span class="line">pc4 pip install ipywidgets</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=torch</span><br><span class="line"></span><br><span class="line">sudo apt install libffi-dev</span><br><span class="line">pc4 pip install ipywidgets</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install ipywidgets</span><br></pre></td></tr></table></figure>

<h2 id="Install-other-python-packages"><a href="#Install-other-python-packages" class="headerlink" title="Install other python packages"></a>Install other python packages</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod simple-pid pyyaml websockets</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod simple-pid pyyaml websockets Pillow</span><br></pre></td></tr></table></figure>

<h2 id="禁用nvgetty服务"><a href="#禁用nvgetty服务" class="headerlink" title="禁用nvgetty服务"></a>禁用nvgetty服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-jetbot-service"><a href="#Install-fro-jetbot-service" class="headerlink" title="Install fro_jetbot_service"></a>Install fro_jetbot_service</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/fro_jetbot_service.git</span><br><span class="line"><span class="built_in">cd</span> fro_jetbot_service/</span><br><span class="line">git checkout jp4.6</span><br><span class="line"></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># OLED信息显示服务</span></span><br><span class="line">python3 create_stats_service.py</span><br><span class="line">sudo mv jetbot_stats.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_stats</span><br><span class="line">sudo systemctl start jetbot_stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序上传、运行、停止服务</span></span><br><span class="line">python3 create_coding_service.py</span><br><span class="line">sudo mv jetbot_coding.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_coding</span><br><span class="line">sudo systemctl start jetbot_coding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动开启AP，更新 SSID</span></span><br><span class="line">python3 create_ap_service.py</span><br><span class="line">sudo mv jetbot_ap_update.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_ap_update</span><br><span class="line">sudo systemctl start jetbot_ap_update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">python3 create_first_boot_init_service.py</span><br><span class="line">sudo mv jetbot_init.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_init</span><br></pre></td></tr></table></figure>

<h2 id="Install-frotech-adapter"><a href="#Install-frotech-adapter" class="headerlink" title="Install frotech_adapter"></a>Install frotech_adapter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br></pre></td></tr></table></figure>

<h2 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-tensorflow2"><a href="#Install-tensorflow2" class="headerlink" title="Install tensorflow2"></a>Install tensorflow2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pc4 pip install testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U --no-deps numpy==1.19.4 future==0.18.2 mock==3.0.5 keras_preprocessing==1.1.2 keras_applications==1.0.8 gast==0.4.0 protobuf pybind11 cython pkgconfig packaging</span><br><span class="line">H5PY_SETUP_REQUIRES=0 pip3 install -U --no-build-isolation h5py==3.1.0</span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v461 tensorflow</span><br><span class="line"></span><br><span class="line">pc4 pip install keras==2.6.*</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/h5py/h5py/issues/1760#issuecomment-938000001" target="_blank" rel="noopener">pip install h5py stops with error on Jetson NX</a></li>
<li><a href="https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html#install" target="_blank" rel="noopener">Installing TensorFlow for Jetson Platform</a></li>
<li><a href="https://exerror.com/importerror-cannot-import-name-dtensor-from-tensorflow-compat-v2-experimental/" target="_blank" rel="noopener">ImportError: cannot import name ‘dtensor’</a></li>
</ul>
<h1 id="Install-matplotlib"><a href="#Install-matplotlib" class="headerlink" title="Install matplotlib"></a>Install matplotlib</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget https://github.com/matplotlib/matplotlib/archive/v3.3.4.tar.gz</span><br><span class="line">tar -xvf v3.3.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.4/</span><br><span class="line">pc4 wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xf freetype-2.6.1.tar.gz -C build/</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<h2 id="Install-numpy-to-cv-torch"><a href="#Install-numpy-to-cv-torch" class="headerlink" title="Install numpy to cv, torch"></a>Install numpy to cv, torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install numpy==1.19.4</span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install numpy==1.19.4</span><br></pre></td></tr></table></figure>

<h2 id="Install-matplotlib-to-cv-torch"><a href="#Install-matplotlib-to-cv-torch" class="headerlink" title="Install matplotlib to cv, torch"></a>Install matplotlib to cv, torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/matplotlib-3.3.4/</span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install .</span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<h2 id="Install-PyTorch-to-torch"><a href="#Install-PyTorch-to-torch" class="headerlink" title="Install PyTorch to torch"></a>Install PyTorch to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://nvidia.box.com/shared/static/fjtbno0vpo676a25cgvuqc1wty0fkkg6.whl</span><br><span class="line">sudo pc4 apt install libopenblas-base libopenmpi-dev libomp-dev</span><br><span class="line">mv fjtbno0vpo676a25cgvuqc1wty0fkkg6.whl  torch-1.10.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">workon torch</span><br><span class="line">pip install Cython</span><br><span class="line">pip install torch-1.10.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># torchvision</span></span><br><span class="line">sudo pc4 apt install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">pc4 git <span class="built_in">clone</span> --branch v0.10.0 https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.10.0</span><br><span class="line">pc4 pip install -U setuptools</span><br><span class="line"><span class="comment"># export OPENBLAS_CORETYPE=ARMV8</span></span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-OpenCV"><a href="#Install-OpenCV" class="headerlink" title="Install OpenCV"></a>Install OpenCV</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget -O opencv-4.6.0.zip https://github.com/opencv/opencv/archive/4.6.0.zip</span><br><span class="line">pc4 wget -O opencv_contrib-4.6.0.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.6.0.zip</span><br><span class="line"></span><br><span class="line">sudo pc4 apt install libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libjpeg-turbo8-dev liblapacke-dev libopenblas-dev libpostproc-dev libtesseract-dev libxine2-dev libx264-dev qv4l2 v4l-utils v4l2ucp libgoogle-glog-dev</span><br><span class="line"></span><br><span class="line">unzip -q opencv-4.6.0.zip</span><br><span class="line">unzip -q opencv_contrib-4.6.0.zip</span><br><span class="line">mv opencv-4.6.0 opencv</span><br><span class="line">mv opencv_contrib-4.6.0 opencv_contrib</span><br><span class="line"><span class="built_in">cd</span> opencv/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">sudo mkdir /usr/venv_cv</span><br><span class="line">workon cv</span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_opencv_java_bindings_generator=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/venv_cv -D OPENCV_DNN_CUDA=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=~/repos/opencv_contrib/modules -D PYTHON3_NUMPY_INCLUDE_DIRS=~/.venv/cv/lib/python3.6/site-packages/numpy/core/include -D WITH_CUDA=ON -D CUDA_ARCH_PTX=<span class="string">""</span> -D CUDA_ARCH_BIN=5.3 -D WITH_GSTREAMER=ON -D WITH_TENGINE=ON -D WITH_FREETYPE=ON -D WITH_OPENGL=ON ..</span><br><span class="line">make -j4</span><br><span class="line">sudo pc4 make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<h2 id="Fix-opencv-error"><a href="#Fix-opencv-error" class="headerlink" title="Fix opencv error"></a>Fix opencv error</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop jetcard_jupyter</span><br><span class="line"><span class="comment"># 执行的命令改为如下</span></span><br><span class="line"><span class="comment"># /bin/sh -c "export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 &amp;&amp; export OPENBLAS_CORETYPE=ARMV8 &amp;&amp; jupyter lab --ip=0.0.0.0 --no-browser"</span></span><br><span class="line">sudo vim /etc/systemd/system/jetcard_jupyter.service</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start jetcard_jupyter.service</span><br></pre></td></tr></table></figure>

<h2 id="Install-torch2trt"><a href="#Install-torch2trt" class="headerlink" title="Install torch2trt"></a>Install torch2trt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/torch2trt.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链tensorrt到torch</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/lib/python3.6/dist-packages/tensorrt tensorrt</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line"><span class="built_in">cd</span> ~/repos/torch2trt/</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-jetson-inference"><a href="#Install-jetson-inference" class="headerlink" title="Install jetson-inference"></a>Install jetson-inference</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/dusty-nv/jetson-inference.git</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">vim tools/download-models.sh <span class="comment"># 在 wget 前增加 proxychains4</span></span><br><span class="line">vim CMakePreBuild.sh <span class="comment"># 在 apt-get 前增加 proxychains4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 $&#123;PYTHON_EXECUTABLE&#125; 为 /home/frotech/.virtualenvs/torch/bin/python3</span></span><br><span class="line">vim utils/python/bindings/FindNumPy.cmake</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择下载哪些模型，跳过安装PyTorch</span></span><br><span class="line">cmake ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到torch</span></span><br><span class="line"><span class="comment">## 修改下面的路径，将其改为torch环境的路径，注意dist-packages改为site-packages</span></span><br><span class="line"><span class="comment"># set(PYTHON_BINDING_INSTALL_DIR /usr/lib/python$&#123;PYTHON_VERSION_MAJOR&#125;.$&#123;PYTHON_VERSION_MINOR&#125;/dist-packages)</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">make -j4</span><br><span class="line">OPENBLAS_CORETYPE=ARMV8 sudo -E make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="built_in">cd</span> aarch64/bin</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/building-repo-2.md" target="_blank" rel="noopener">Building the Project from Source</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/482" target="_blank" rel="noopener">Cmake not Detecting Virtual Environment (venv)</a></li>
<li><a href="https://unix.stackexchange.com/questions/337819/how-to-export-variable-for-use-with-sudo" target="_blank" rel="noopener">How to export variable for use with sudo?</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/369#issuecomment-513595175" target="_blank" rel="noopener">ImportError: libjetson-utils.so: cannot open shared object file: No such file or directory</a></li>
</ul>
<h2 id="Install-JetCam"><a href="#Install-JetCam" class="headerlink" title="Install JetCam"></a>Install JetCam</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pip install .</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install .</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<h2 id="Install-YOLOX"><a href="#Install-YOLOX" class="headerlink" title="Install YOLOX"></a>Install YOLOX</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/Megvii-BaseDetection/YOLOX.git</span><br><span class="line"><span class="built_in">cd</span> YOLOX/</span><br><span class="line">pc4 pip install loguru tqdm Pillow thop ninja tabulate</span><br><span class="line">pc4 pip install <span class="string">'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'</span></span><br><span class="line">vim requirements.txt <span class="comment"># 取消安装 opencv-python pycocotools onnx...</span></span><br><span class="line">pc4 pip install -v -e .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换 trt</span></span><br><span class="line">pc4 wget https://github.com/Megvii-BaseDetection/YOLOX/releases/download/0.1.1rc0/yolox_nano.pth</span><br><span class="line">python tools/trt.py -n yolox-nano -c yolox_nano.pth</span><br></pre></td></tr></table></figure>

<h2 id="Install-aiocoap"><a href="#Install-aiocoap" class="headerlink" title="Install aiocoap"></a>Install aiocoap</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">workon torch</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap</span><br><span class="line">git checkout dffbe242d09</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>

<h2 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libzbar0</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install pyzbar</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-AI-and-jetbot-scratch-to-torch"><a href="#Install-fro-AI-and-jetbot-scratch-to-torch" class="headerlink" title="Install fro-AI and jetbot-scratch to torch"></a>Install fro-AI and jetbot-scratch to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line">pc4 pip install fro-AI jetbot-scratch</span><br></pre></td></tr></table></figure>

<h2 id="Install-tensorflow1-15-to-cv"><a href="#Install-tensorflow1-15-to-cv" class="headerlink" title="Install tensorflow1.15 to cv"></a>Install tensorflow1.15 to cv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.19.4 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11</span><br><span class="line"></span><br><span class="line">pc4 pip install -U numpy==1.19.4 grpcio absl-py py-cpuinfo psutil portpicker six mock requests gast h5py astor termcolor protobuf keras-applications keras-preprocessing wrapt google-pasta setuptools testresources</span><br><span class="line">pc4 pip install -U numpy==1.16.1</span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v461 <span class="string">'tensorflow&lt;2'</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-protobuf"><a href="#Install-protobuf" class="headerlink" title="Install protobuf"></a>Install protobuf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-aarch_64.zip</span><br><span class="line">unzip protoc-3.19.4-linux-aarch_64.zip -d protoc-3.19.4</span><br><span class="line">sudo cp protoc-3.19.4/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line">sudo cp -r protoc-3.19.4/include/* /usr/<span class="built_in">local</span>/include/</span><br></pre></td></tr></table></figure>

<h2 id="Install-TensorFlow-Object-Detection-API-1-x"><a href="#Install-TensorFlow-Object-Detection-API-1-x" class="headerlink" title="Install TensorFlow Object Detection API(1.x)"></a>Install TensorFlow Object Detection API(1.x)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/tensorflow/models.git</span><br><span class="line"><span class="built_in">cd</span> models/research</span><br><span class="line">git checkout 5f4d34fc</span><br><span class="line">sudo protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="制作-img"><a href="#制作-img" class="headerlink" title="制作 img"></a>制作 img</h2><p>删除 <code>~/repos/fro_jetbot_service/config.json</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Linux_for_Tegra/tools</span><br><span class="line">sudo ROOTFS_DIR=&lt;root&gt; ./jetson-disk-image-creator.sh -o sd-blob.img -b jetson-nano -r 100</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3271/index.html#page/Tegra%20Linux%20Driver%20Package%20Development%20Guide/flashing.html#wwpID0E03E0HA" target="_blank" rel="noopener">To re-enable oem-config manually on an SD card</a></p>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>How To Disable Unattended Upgrades On Ubuntu</title>
    <url>/sundries/2021/11/25/How-To-Disable-Unattended-Upgrades-On-Ubuntu/</url>
    <content><![CDATA[<p>有时在使用 <code>apt install xxx</code> 时会出现以下错误信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E: Could not get lock &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to acquire the dpkg frontend lock (&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend), is another process using it?</span><br></pre></td></tr></table></figure>

<p>而且在关机时还会出现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A stop job is running for Unattended Upgrades Shutdown (10s &#x2F; 30 min)</span><br></pre></td></tr></table></figure>

<p>这就是 <code>unattended-upgrades</code> 服务造成的。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>运行：</p>
<p><code>sudo dpkg-reconfigure unattended-upgrades</code></p>
<p>选择 <strong>No</strong>。</p>
<p>又或者直接移除：</p>
<p><code>sudo apt remove unattended-upgrades</code></p>
<blockquote>
<p>ref: <a href="https://ostechnix.com/how-to-disable-unattended-upgrades-on-ubuntu/" target="_blank" rel="noopener">How To Disable Unattended Upgrades On Ubuntu</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>jp4.6 log</title>
    <url>/sundries/2021/08/19/jp4-6-log/</url>
    <content><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开网卡</span></span><br><span class="line">sudo ifconfig wlan0 up</span><br><span class="line"><span class="comment"># 配wifi</span></span><br><span class="line">sudo nmtui</span><br><span class="line">mkdir repos</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git cmake</span><br></pre></td></tr></table></figure>

<h2 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install proxychains4</span><br><span class="line">sudo vim /etc/proxychains.conf <span class="comment"># 修改代理地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化proxychains4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias pc4='proxychains4'"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias sudo='sudo '"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Install-other-dependencies"><a href="#Install-other-dependencies" class="headerlink" title="Install other dependencies"></a>Install other dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo pc4 apt-get install python3-dev</span><br><span class="line">sudo pc4 apt-get install nano locate</span><br><span class="line">sudo pc4 apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo pc4 apt-get install cython3</span><br><span class="line">sudo pc4 apt-get install libxml2-dev libxslt1-dev</span><br><span class="line">sudo pc4 apt install curl screen</span><br></pre></td></tr></table></figure>

<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo -H proxychains4 python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br></pre></td></tr></table></figure>

<h2 id="Set-up-Python-virtual-environments"><a href="#Set-up-Python-virtual-environments" class="headerlink" title="Set up Python virtual environments"></a>Set up Python virtual environments</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains4 pip install virtualenv virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Create-virtual-environment"><a href="#Create-virtual-environment" class="headerlink" title="Create virtual environment"></a>Create virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv cv -p python3</span><br><span class="line">mkvirtualenv tf2 -p python3</span><br><span class="line">mkvirtualenv torch -p python3</span><br></pre></td></tr></table></figure>

<h2 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Jetson-stats"><a href="#安装-Jetson-stats" class="headerlink" title="安装 Jetson stats"></a>安装 Jetson stats</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">sudo -H proxychains4 pip install -U jetson-stats</span><br></pre></td></tr></table></figure>

<h2 id="Install-tensorflow2"><a href="#Install-tensorflow2" class="headerlink" title="Install tensorflow2"></a>Install tensorflow2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pip install testresources setuptools==49.6.0</span><br><span class="line">pip install -U numpy==1.19.4 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11</span><br><span class="line">pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v46 tensorflow</span><br></pre></td></tr></table></figure>

<h2 id="Install-matplotlib-to-tf2"><a href="#Install-matplotlib-to-tf2" class="headerlink" title="Install matplotlib to tf2"></a>Install matplotlib to tf2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">wget https://github.com/matplotlib/matplotlib/archive/v3.3.4.tar.gz</span><br><span class="line">tar -xvf v3.3.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.4/</span><br><span class="line">wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xf freetype-2.6.1.tar.gz -C build/</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-numpy-to-cv-torch"><a href="#Install-numpy-to-cv-torch" class="headerlink" title="Install numpy to cv, torch"></a>Install numpy to cv, torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install numpy==1.19.4</span><br><span class="line">workon torch</span><br><span class="line">pip install numpy==1.19.4</span><br></pre></td></tr></table></figure>

<h2 id="Install-matplotlib-to-cv-torch"><a href="#Install-matplotlib-to-cv-torch" class="headerlink" title="Install matplotlib to cv, torch"></a>Install matplotlib to cv, torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/matplotlib-3.3.4/</span><br><span class="line">workon cv</span><br><span class="line">python setup.py install</span><br><span class="line">workon torch</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-PyTorch-to-torch"><a href="#Install-PyTorch-to-torch" class="headerlink" title="Install PyTorch to torch"></a>Install PyTorch to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">wget https://nvidia.box.com/shared/static/h1z9sw4bb1ybi0rm3tu8qdj8hs05ljbm.whl -O torch-1.9.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">sudo apt install libopenblas-base libopenmpi-dev</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pip install Cython</span><br><span class="line">pip install torch-1.9.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># torchvision</span></span><br><span class="line">sudo apt install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">git <span class="built_in">clone</span> --branch v0.10.0 https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.10.0</span><br><span class="line">pip install -U setuptools</span><br><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-Jupyter"><a href="#Install-Jupyter" class="headerlink" title="Install Jupyter"></a>Install Jupyter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">sudo -H pip3 install jupyterlab</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('z14git', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建notebook目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自启动服务</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials</span><br><span class="line">sudo mv jetcard_jupyter.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetcard_jupyter</span><br><span class="line">sudo systemctl start jetcard_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ipywidgets</span></span><br><span class="line">sudo -H pip3 install jupyterlab_widgets</span><br><span class="line"></span><br><span class="line"><span class="comment"># add cv, tf2, torch</span></span><br><span class="line">workon cv</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ipywidgets to cv, tf2, torch</span></span><br><span class="line">workon cv</span><br><span class="line">sudo apt install libffi-dev</span><br><span class="line">pip install ipywidgets</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install ipywidgets</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pip install ipywidgets</span><br></pre></td></tr></table></figure>

<h2 id="Install-OpenCV"><a href="#Install-OpenCV" class="headerlink" title="Install OpenCV"></a>Install OpenCV</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">wget -O opencv-4.5.3.zip https://github.com/opencv/opencv/archive/4.5.3.zip</span><br><span class="line">wget -O opencv_contrib-4.5.3.zip https://github.com/opencv/opencv_contrib/archive/refs/tags/4.5.3.zip</span><br><span class="line"></span><br><span class="line">sudo apt install libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libjpeg-turbo8-dev liblapacke-dev libopenblas-dev libpostproc-dev libtesseract-dev libxine2-dev libx264-dev qv4l2 v4l-utils v4l2ucp libgoogle-glog-dev</span><br><span class="line"></span><br><span class="line">unzip -q opencv-4.5.3.zip</span><br><span class="line">unzip -q opencv_contrib-4.5.3.zip</span><br><span class="line">mv opencv-4.5.3 opencv</span><br><span class="line">mv opencv_contrib-4.5.3 opencv_contrib</span><br><span class="line"><span class="built_in">cd</span> opencv/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">sudo mkdir /usr/venv_cv</span><br><span class="line">workon cv</span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_opencv_java_bindings_generator=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/venv_cv -D OPENCV_DNN_CUDA=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=~/repos/opencv_contrib/modules -D PYTHON3_NUMPY_INCLUDE_DIRS=~/.venv/cv/lib/python3.6/site-packages/numpy/core/include -D WITH_CUDA=ON -D CUDA_ARCH_PTX=<span class="string">""</span> -D CUDA_ARCH_BIN=5.3 -D WITH_GSTREAMER=ON -D WITH_TENGINE=ON -D WITH_FREETYPE=ON -D WITH_OPENGL=ON ..</span><br><span class="line">make -j4</span><br><span class="line">sudo pc4 make install</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<h2 id="Install-torch2trt"><a href="#Install-torch2trt" class="headerlink" title="Install torch2trt"></a>Install torch2trt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix: AttributeError: 'tensorrt.tensorrt.Builder' object has no attribute 'max_workspace_size'</span></span><br><span class="line"><span class="comment"># pc4 git clone https://github.com/gcunhase/torch2trt</span></span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/torch2trt.git</span><br><span class="line"><span class="built_in">cd</span> torch2trt/</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链tensorrt到torch</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/lib/python3.6/dist-packages/tensorrt tensorrt</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/NVIDIA-AI-IOT/torch2trt/issues/592" target="_blank" rel="noopener">Example fails with ‘tensorrt.tensorrt.Builder’ object has no attribute ‘max_workspace_size’</a></p>
<h2 id="Install-jetson-inference"><a href="#Install-jetson-inference" class="headerlink" title="Install jetson-inference"></a>Install jetson-inference</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/dusty-nv/jetson-inference.git</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">vim tools/download-models.sh <span class="comment"># 在wget前增加proxychains4</span></span><br><span class="line">vim CMakePreBuild.sh <span class="comment"># 增加proxychains4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 $&#123;PYTHON_EXECUTABLE&#125; 为 /home/frotech/.virtualenvs/torch/bin/python3</span></span><br><span class="line">vim utils/python/bindings/FindNumPy.cmake</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br><span class="line"><span class="comment"># 选择下载哪些模型，跳过安装PyTorch</span></span><br><span class="line">cmake ../</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到torch</span></span><br><span class="line"><span class="comment">## 修改下面的路径，将其改为torch环境的路径，注意dist-packages改为site-packages</span></span><br><span class="line"><span class="comment"># set(PYTHON_BINDING_INSTALL_DIR /usr/lib/python$&#123;PYTHON_VERSION_MAJOR&#125;.$&#123;PYTHON_VERSION_MINOR&#125;/dist-packages)</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">make -j4</span><br><span class="line">OPENBLAS_CORETYPE=ARMV8 sudo -E make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="comment"># maybe need to reboot</span></span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/building-repo-2.md" target="_blank" rel="noopener">Building the Project from Source</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/482" target="_blank" rel="noopener">Cmake not Detecting Virtual Environment (venv)</a></li>
<li><a href="https://unix.stackexchange.com/questions/337819/how-to-export-variable-for-use-with-sudo" target="_blank" rel="noopener">How to export variable for use with sudo?</a></li>
</ul>
<h2 id="禁用nvgetty服务"><a href="#禁用nvgetty服务" class="headerlink" title="禁用nvgetty服务"></a>禁用nvgetty服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libzbar0</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install pyzbar</span><br></pre></td></tr></table></figure>

<h2 id="Install-other-python-packages"><a href="#Install-other-python-packages" class="headerlink" title="Install other python packages"></a>Install other python packages</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod simple-pid pyyaml websockets</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod simple-pid pyyaml websockets</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod simple-pid pyyaml websockets</span><br></pre></td></tr></table></figure>

<h2 id="Fix-opencv-error"><a href="#Fix-opencv-error" class="headerlink" title="Fix opencv error"></a>Fix opencv error</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop jetcard_jupyter</span><br><span class="line"><span class="comment"># 执行的命令改为如下</span></span><br><span class="line"><span class="comment"># export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 &amp;&amp; export OPENBLAS_CORETYPE=ARMV8 &amp;&amp; jupyter lab --ip=0.0.0.0 --no-browser</span></span><br><span class="line">sudo vim /etc/systemd/system/jetcard_jupyter.service</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-jetbot-service"><a href="#Install-fro-jetbot-service" class="headerlink" title="Install fro_jetbot_service"></a>Install fro_jetbot_service</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/fro_jetbot_service.git</span><br><span class="line"><span class="built_in">cd</span> fro_jetbot_service/</span><br><span class="line">git checkout jp4.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># OLED信息显示服务</span></span><br><span class="line">python3 create_stats_service.py</span><br><span class="line">sudo mv jetbot_stats.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_stats</span><br><span class="line">sudo systemctl start jetbot_stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序上传、运行、停止服务</span></span><br><span class="line">python3 create_coding_service.py</span><br><span class="line">sudo mv jetbot_coding.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_coding</span><br><span class="line">sudo systemctl start jetbot_coding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动开启AP，更新 SSID</span></span><br><span class="line">python3 create_ap_service.py</span><br><span class="line">sudo mv jetbot_ap_update.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_ap_update</span><br><span class="line">sudo systemctl start jetbot_ap_update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">python3 create_first_boot_init_service.py</span><br><span class="line">sudo mv jetbot_init.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_init</span><br></pre></td></tr></table></figure>

<h2 id="Install-frotech-adapter"><a href="#Install-frotech-adapter" class="headerlink" title="Install frotech_adapter"></a>Install frotech_adapter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line">pc4 pip install jetson-adapter-pkg</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-AI-and-jetbot-scratch-to-torch"><a href="#Install-fro-AI-and-jetbot-scratch-to-torch" class="headerlink" title="Install fro-AI and jetbot-scratch to torch"></a>Install fro-AI and jetbot-scratch to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line">pc4 pip install fro-AI jetbot-scratch</span><br></pre></td></tr></table></figure>

<h2 id="Install-custom-jetcam-to-torch"><a href="#Install-custom-jetcam-to-torch" class="headerlink" title="Install custom jetcam to torch"></a>Install custom jetcam to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/z14git/jetcam.git jetcam_z14</span><br><span class="line"></span><br><span class="line">workon torch</span><br><span class="line"><span class="built_in">cd</span> jetcam_z14/</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-JetCam"><a href="#Install-JetCam" class="headerlink" title="Install JetCam"></a>Install JetCam</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-tensorflow1-15-to-cv"><a href="#Install-tensorflow1-15-to-cv" class="headerlink" title="Install tensorflow1.15 to cv"></a>Install tensorflow1.15 to cv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.19.4 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures protobuf pybind11</span><br><span class="line"></span><br><span class="line">pc4 pip install -U numpy==1.19.4 grpcio absl-py py-cpuinfo psutil portpicker six mock requests gast h5py astor termcolor protobuf keras-applications keras-preprocessing wrapt google-pasta setuptools testresources</span><br><span class="line">pc4 pip install -U numpy==1.16.1</span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v46 <span class="string">'tensorflow&lt;2'</span></span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html#install_multiple_versions_tensorflow" target="_blank" rel="noopener">3.1. Installing Multiple TensorFlow Versions</a></p>
<h2 id="Install-protobuf"><a href="#Install-protobuf" class="headerlink" title="Install protobuf"></a>Install protobuf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.17.3/protoc-3.17.3-linux-aarch_64.zip</span><br><span class="line">unzip protoc-3.17.3-linux-aarch_64.zip -d protoc-3.17.3</span><br><span class="line">sudo cp protoc-3.17.3/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line">sudo cp -r protoc-3.17.3/include/* /usr/<span class="built_in">local</span>/include/</span><br></pre></td></tr></table></figure>

<p>ref: <a href="http://google.github.io/proto-lens/installing-protoc.html" target="_blank" rel="noopener">Installing protoc</a></p>
<h2 id="Install-TensorFlow-Object-Detection-API-1-x"><a href="#Install-TensorFlow-Object-Detection-API-1-x" class="headerlink" title="Install TensorFlow Object Detection API(1.x)"></a>Install TensorFlow Object Detection API(1.x)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/tensorflow/models.git</span><br><span class="line"><span class="built_in">cd</span> models/research</span><br><span class="line">git checkout 5f4d34fc</span><br><span class="line">sudo protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Fix-autocomplete-not-working-Todo"><a href="#Fix-autocomplete-not-working-Todo" class="headerlink" title="Fix autocomplete not working (Todo)"></a>Fix autocomplete not working (Todo)</h2><p>原 0.18 版本 tab 键自动补全为失效，需要降低版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line">pip install jedi==0.17.2</span><br><span class="line">workon cv</span><br><span class="line">pip install jedi==0.17.2</span><br><span class="line">workon tf2</span><br><span class="line">pip install jedi==0.17.2</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/jupyterlab/jupyterlab/issues/9602#issuecomment-758752192" target="_blank" rel="noopener">The autocomplete does not work when I press Tab or Shift + Tab</a></p>
<h2 id="Install-YOLOX"><a href="#Install-YOLOX" class="headerlink" title="Install YOLOX"></a>Install YOLOX</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon torch</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/Megvii-BaseDetection/YOLOX.git</span><br><span class="line"><span class="built_in">cd</span> YOLOX/</span><br><span class="line">pc4 pip install loguru tqdm Pillow thop ninja tabulate</span><br><span class="line">pip install -v -e .</span><br><span class="line">pc4 pip install <span class="string">'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'</span></span><br></pre></td></tr></table></figure>

<h2 id="Update-CMake"><a href="#Update-CMake" class="headerlink" title="Update CMake"></a>Update CMake</h2><p>编译 onnx-tensorrt 需要 &gt; 3.13 版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget http://www.cmake.org/files/v3.20/cmake-3.20.6.tar.gz</span><br><span class="line">tar xpf cmake-3.20.6.tar.gz cmake-3.20.6/</span><br><span class="line"><span class="built_in">cd</span> cmake-3.20.6/</span><br><span class="line">sudo pc4 apt-get install libssl-dev libcurl4-openssl-dev</span><br><span class="line">./bootstrap --system-curl</span><br><span class="line">make -j4</span><br><span class="line"><span class="comment"># 将z14git替换为你的用户名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/home/z14git/repos/cmake-3.20.6/bin/:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Install-onnx-tensorrt"><a href="#Install-onnx-tensorrt" class="headerlink" title="Install onnx-tensorrt"></a>Install onnx-tensorrt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/onnx/onnx-tensorrt.git</span><br><span class="line"><span class="built_in">cd</span> onnx-tensorrt</span><br><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">sudo apt-get install libprotobuf-dev protobuf-compiler</span><br><span class="line">cmake .. -DTENSORRT_ROOT=/usr/src/tensorrt/ </span><br><span class="line">sudo chmod -R 751 /usr/<span class="built_in">local</span>/include/google/</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$PWD</span>:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<h2 id="Install-aiocoap"><a href="#Install-aiocoap" class="headerlink" title="Install aiocoap"></a>Install aiocoap</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">workon torch</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap</span><br><span class="line">git checkout dffbe242d09</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>修改trt batchSize</title>
    <url>/sundries/2021/07/28/%E4%BF%AE%E6%94%B9trt-batchSize/</url>
    <content><![CDATA[<p><strong>问题：</strong></p>
<p>在数字识别时，一次输入多张图片时出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error: condition: batchSize &gt; 0 &amp;&amp; batchSize &lt;&#x3D; mEngine.getMaxBatchSize(). Note: Batch size was: 2, but engine max batch size was: 1</span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<p>在转换 trt 模型时，增加参数 <code>max_batch_size=16</code></p>
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://github.com/NVIDIA-AI-IOT/torch2trt/issues/540#issuecomment-825494765" target="_blank" rel="noopener">how to fix this error</a></li>
</ul>
]]></content>
      <tags>
        <tag>torch2trt</tag>
      </tags>
  </entry>
  <entry>
    <title>OSError: SavedModel file does not exist at</title>
    <url>/sundries/2021/07/25/OSError-SavedModel-file-does-not-exist-at/</url>
    <content><![CDATA[<p><strong>问题：</strong></p>
<p>OSError: SavedModel file does not exist at: main.h5/{saved_model.pbtxt|saved_model.pb}</p>
<p><strong>解决方法：</strong></p>
<p>填写模型文件的详细路径。</p>
<p>参考：<a href="https://github.com/tensorflow/tensorflow/issues/35909#issuecomment-845859164" target="_blank" rel="noopener">OSError: SavedModel file does not exist at: main.h5/{saved_model.pbtxt|saved_model.pb}</a></p>
]]></content>
      <tags>
        <tag>tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>build opencv on windows</title>
    <url>/sundries/2021/05/28/build-opencv-on-windows/</url>
    <content><![CDATA[<h2 id="prerequisites"><a href="#prerequisites" class="headerlink" title="prerequisites"></a>prerequisites</h2><ul>
<li><p>Python</p>
</li>
<li><p>Cmake</p>
<p>  Download the windows installer from <a href="https://cmake.org/download/" target="_blank" rel="noopener">https://cmake.org/download/</a> . Just double click the downloaded MSI installer and follow normal windows installation process.</p>
</li>
<li><p>vcpkg</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> d:/repos</span><br><span class="line">git clone https://github.com/Microsoft/vcpkg.git</span><br><span class="line"><span class="built_in">cd</span> vcpkg</span><br><span class="line">.\bootstrap-vcpkg.bat</span><br><span class="line">vcpkg install freetype:x64-windows</span><br><span class="line">vcpkg install harfbuzz:x64-windows</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://visualstudio.microsoft.com/downloads/" target="_blank" rel="noopener">visualstudio</a><br>  install C++ build tools</p>
</li>
<li><p>OpenCV source code</p>
<ul>
<li><a href="https://github.com/opencv/opencv/releases" target="_blank" rel="noopener">OpenCV</a></li>
<li><a href="https://github.com/opencv/opencv_contrib/releases" target="_blank" rel="noopener">OpenCV-Contrib</a></li>
</ul>
</li>
</ul>
<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><ol>
<li><p>解压源代码</p>
</li>
<li><p>在 OpenCV-x.x.x 目录下创建 <code>build</code> 目录</p>
</li>
<li><p>修改 <code>opencv_contrib-x.x.x\modules\freetype\CMakeLists.txt</code>, eg:</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(the_description <span class="string">"FreeType module. It enables to draw strings with outlines and mono-bitmaps/gray-bitmaps."</span>)</span><br><span class="line"><span class="keyword">if</span>(APPLE_FRAMEWORK)</span><br><span class="line">ocv_module_disable(freetype)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(OPENCV_INITIAL_PASS)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> FREETYPE_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"freetype2:   NO"</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"freetype2:   YES (ver $&#123;FREETYPE_VERSION&#125;)"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> HARFBUZZ_FOUND)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"harfbuzz:    NO"</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"harfbuzz:    YES (ver $&#123;HARFBUZZ_VERSION&#125;)"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># if(FREETYPE_FOUND AND HARFBUZZ_FOUND)</span></span><br><span class="line"><span class="comment"># ocv_define_module(freetype opencv_core opencv_imgproc WRAP python)</span></span><br><span class="line"><span class="comment"># ocv_target_link_libraries($&#123;the_module&#125; $&#123;FREETYPE_LIBRARIES&#125; $&#123;HARFBUZZ_LIBRARIES&#125;)</span></span><br><span class="line"><span class="comment"># ocv_include_directories( $&#123;FREETYPE_INCLUDE_DIRS&#125; $&#123;HARFBUZZ_INCLUDE_DIRS&#125; )</span></span><br><span class="line"><span class="comment"># else()</span></span><br><span class="line"><span class="comment">#   ocv_module_disable(freetype)</span></span><br><span class="line"><span class="comment"># endif()</span></span><br><span class="line"><span class="keyword">link_directories</span>(<span class="string">"D:/repos/vcpkg/installed/x64-windows/lib"</span>)</span><br><span class="line">ocv_define_module(freetype opencv_core opencv_imgproc WRAP python)</span><br><span class="line">ocv_target_link_libraries(<span class="variable">$&#123;the_module&#125;</span> freetype harfbuzz)</span><br><span class="line">ocv_include_directories( <span class="string">"D:/repos/vcpkg/installed/x64-windows/include"</span> <span class="string">"D:/repos/vcpkg/installed/x64-windows/include/harfbuzz"</span> )</span><br></pre></td></tr></table></figure>

<p> ref:<a href="https://blog.csdn.net/hfxy520704031010/article/details/106680888" target="_blank" rel="noopener">windows下opencv的编译过程记录</a></p>
</li>
<li><p>cd 到 OpenCV 根目录</p>
</li>
<li><p>执行命令</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cmake -G <span class="string">"Visual Studio 16 2019"</span> -B D:\tmp\opencv-4.5.2\build -D BUILD_NEW_PYTHON_SUPPORT=ON -D BUILD_PYTHON_SUPPORT=ON -D BUILD_opencv_python3=yes -D PYTHON_DEFAULT_EXECUTABLE=C:\Users\Noctis\.venv\torch\Scripts\python.exe -D OPENCV_SKIP_PYTHON_LOADER=ON -D PYTHON_LIBRARY=D:\Python3\libs\python38.lib -D OPENCV_EXTRA_MODULES_PATH=D:\tmp\opencv_contrib-4.5.2\modules -D OPEN_CV_FORCE_PYTHON_LIBS=yes -D CMAKE_TOOLCHAIN_FILE=D:\repos\vcpkg\scripts\buildsystems\vcpkg.cmake</span><br></pre></td></tr></table></figure>
</li>
<li><p>Open the CMake GUI, browse for the folder of the source code folder (root folder) and build folder and then click File-Reload Cache. Also ensure the grouped and Advanced check box are checked (this makes it easier to read). Then check the following:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. Click on Build, make sure:</span><br><span class="line">       i. BUILD_opencv_python_bindings_generator is checked.</span><br><span class="line">b. Click on ENABLE, make sure in addition to others selected ENABLE_PYLINT is also selected</span><br><span class="line">c. CLICK on OPENCV, make sure:</span><br><span class="line">       i. OPENCV_EXTRA_MODULES_PATH has the right path if not, click the entry field and input the right path</span><br><span class="line">       ii. OPENCV_PYTHON3_VERSION is checked</span><br><span class="line">       iii. OPENCV_FORCE_PYTHON_LIBS is checked</span><br><span class="line">d. Click on PYTHON3 and make sure:</span><br><span class="line">       i. PYTHON3_EXECUTABLE has the right path</span><br><span class="line">       ii. PYTHON3_INCLUDE_DIR has the right path</span><br><span class="line">       iii. PYTHON3_LIBRARY has the right lib file link</span><br><span class="line">       iv. PYTHON3_NUMPY_INCLUDE_DIRS has the right link</span><br><span class="line">       v. PYTHON3_PACKAGES_PATH has the right link</span><br><span class="line">e. Finally click Configure (once) and then generate</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个环境变量 <code>PYTHONPATH</code>，输入3个地址，示例：<code>D:\tmp\opencv-4.5.2\build\python_loader;D:\Python3\Scripts\;D:\Python3\</code></p>
</li>
</ol>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><ol>
<li>打开 <code>opencv-x.x.x\build\OpenCV.sln</code></li>
<li>在 <code>Solution Explorer</code> 面板下，展开 <code>CMakeTargets</code>，右键 <code>INSTALL</code>，点击 ‘Build`</li>
<li>将 <code>Solution Configurations</code> 由 <code>Debug</code> 改为 <code>Release</code> 再 <code>Build</code> 一次。出现 <code>fatal error LNK1104: cannot open file &#39;python38_d.lib&#39;</code> 类似的错误可以不用管。</li>
</ol>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://github.com/BabaGodPikin/Build-OpenCv-for-Python-with-Extra-Modules-Windows-10" target="_blank" rel="noopener">Build-OpenCv-for-Python-with-Extra-Modules-Windows-10</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/120902067" target="_blank" rel="noopener">Windows 10使用Python OpenCV 在图片上打印输出中文UTF-8</a></li>
</ul>
]]></content>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>jp4.5.1 log</title>
    <url>/sundries/2021/04/29/jp4-5-1-log/</url>
    <content><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开网卡</span></span><br><span class="line">sudo ifconfig wlan0 up</span><br><span class="line"><span class="comment"># 配wifi</span></span><br><span class="line">sudo nmtui</span><br><span class="line">mkdir repos</span><br><span class="line"><span class="comment"># 最高性能模式</span></span><br><span class="line">sudo nvpmodel -m 0</span><br><span class="line">sudo jetson_clocks</span><br><span class="line"><span class="comment"># Install system-level dependencies</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git cmake</span><br></pre></td></tr></table></figure>

<h2 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install-config</span><br><span class="line">sudo vim /etc/proxychains.conf <span class="comment"># 修改代理地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化proxychains4</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias pc4='proxychains4'"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias sudo='sudo '"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/rofl0r/proxychains-ng/issues/139#issuecomment-260360687" target="_blank" rel="noopener">#139</a></p>
<h2 id="Install-other-dependencies"><a href="#Install-other-dependencies" class="headerlink" title="Install other dependencies"></a>Install other dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo pc4 apt-get install python3-dev</span><br><span class="line">sudo pc4 apt-get install nano locate</span><br><span class="line">sudo pc4 apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo pc4 apt-get install cython3</span><br><span class="line">sudo pc4 apt-get install libxml2-dev libxslt1-dev</span><br><span class="line">sudo pc4 apt install curl screen</span><br></pre></td></tr></table></figure>

<h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo -H proxychains4 python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br></pre></td></tr></table></figure>

<h2 id="创建venv-cv"><a href="#创建venv-cv" class="headerlink" title="创建venv cv"></a>创建venv cv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir .venv</span><br><span class="line">sudo apt install python3-venv</span><br><span class="line">python3 -m venv ~/.venv/cv</span><br></pre></td></tr></table></figure>

<h2 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Jetson-stats"><a href="#安装-Jetson-stats" class="headerlink" title="安装 Jetson stats"></a>安装 Jetson stats</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">sudo -H proxychains4 pip install -U jetson-stats</span><br></pre></td></tr></table></figure>

<h2 id="更新protobuf"><a href="#更新protobuf" class="headerlink" title="更新protobuf"></a>更新protobuf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-aarch_64.zip</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-python-3.12.3.zip</span><br><span class="line">unzip protobuf-python-3.12.3.zip</span><br><span class="line">unzip protoc-3.12.3-linux-aarch_64.zip -d protoc-3.12.3</span><br><span class="line">sudo cp protoc-3.12.3/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line"><span class="built_in">export</span> PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.12.3/</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到 cv</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install Cython</span><br><span class="line"><span class="built_in">cd</span> python/</span><br><span class="line">pc4 python setup.py build --cpp_implementation</span><br><span class="line">pc4 python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">pc4 python setup.py install --cpp_implementation</span><br></pre></td></tr></table></figure>

<h2 id="Install-tf1-x-in-‘cv’-virtual-environment"><a href="#Install-tf1-x-in-‘cv’-virtual-environment" class="headerlink" title="Install tf1.x in ‘cv’ virtual environment"></a>Install tf1.x in ‘cv’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pc4 pip install -U testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line">pc4 wget https://developer.download.nvidia.com/compute/redist/jp/v45/tensorflow/tensorflow-1.15.5+nv21.4-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">pc4 pip install tensorflow-1.15.5+nv21.4-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">pc4 pip install astor</span><br></pre></td></tr></table></figure>

<h2 id="Install-matplotlib"><a href="#Install-matplotlib" class="headerlink" title="Install matplotlib"></a>Install matplotlib</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/matplotlib/matplotlib/archive/v3.3.4.tar.gz</span><br><span class="line">tar -xvf v3.3.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.4/</span><br><span class="line">pc4 wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xf freetype-2.6.1.tar.gz -C build/</span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-TensorFlow-Object-Detection-API-1-x"><a href="#Install-TensorFlow-Object-Detection-API-1-x" class="headerlink" title="Install TensorFlow Object Detection API(1.x)"></a>Install TensorFlow Object Detection API(1.x)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/tensorflow/models.git</span><br><span class="line"><span class="built_in">cd</span> models/research</span><br><span class="line">git checkout 5f4d34fc</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-Jupyter"><a href="#Install-Jupyter" class="headerlink" title="Install Jupyter"></a>Install Jupyter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">sudo -H proxychains4 pip3 install jupyterlab</span><br><span class="line">sudo -H proxychains4 pip3 install testresources</span><br><span class="line">sudo -H proxychains4 pip3 install jupyterlab</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('z14git', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建notebook目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"></span><br><span class="line"><span class="comment"># add cv</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建自启动服务</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">deactivate</span><br><span class="line">pc4 wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials</span><br><span class="line">sudo mv jetcard_jupyter.service /etc/systemd/system/jetcard_jupyter.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetcard_jupyter</span><br><span class="line">sudo systemctl start jetcard_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ipywidgets</span></span><br><span class="line">sudo -H proxychains4 pip3 install jupyterlab_widgets</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ipywidgets to cv</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">sudo pc4 apt install libffi-dev</span><br><span class="line">pc4 pip install ipywidgets</span><br><span class="line">sudo systemctl restart jetcard_jupyter.service</span><br></pre></td></tr></table></figure>

<h2 id="Install-OpenCV"><a href="#Install-OpenCV" class="headerlink" title="Install OpenCV"></a>Install OpenCV</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget -O opencv-4.5.2.zip https://github.com/opencv/opencv/archive/4.5.2.zip</span><br><span class="line">pc4 wget -O opencv_contrib-4.5.2.zip https://github.com/opencv/opencv_contrib/archive/4.5.2.zip</span><br><span class="line">sudo pc4 apt install libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libjpeg-turbo8-dev liblapacke-devenblas-dev libpostproc-dev libtesseract-dev libxine2-dev libx264-dev qv4l2 v4l-utils v4l2ucp libgoogle-glog-dev</span><br><span class="line">unzip -q opencv-4.5.2.zip</span><br><span class="line">unzip -q opencv_contrib-4.5.2.zip</span><br><span class="line">mv opencv-4.5.2 opencv</span><br><span class="line">mv opencv_contrib-4.5.2 opencv_contrib</span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line"><span class="built_in">cd</span> opencv/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">sudo mkdir /usr/venv_cv</span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_opencv_java_bindings_generator=OFF -D CMAKE_BUILD_TYPE=RELEASE     -D CMAKE_INSTALL_PREFIX=/usr/venv_cv     -D BUILD_PROTOBUF=OFF     -D PROTOBUF_UPDATE_FILES=ON -D OPENCV_DNN_CUDA=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=~/repos/opencv_contrib/modules -D PYTHON3_NUMPY_INCLUDE_DIRS=~/.venv/cv/lib/python3.6/site-packages/numpy/core/include -D WITH_CUDA=ON -D CUDA_ARCH_PTX=<span class="string">""</span> -D CUDA_ARCH_BIN=5.3 -D WITH_GSTREAMER=ON -D WITH_TENGINE=ON -D WITH_VULKAN=ON -D WITH_OPENMP=ON -D WITH_FREETYPE=ON -D WITH_OPENGL=ON ..</span><br><span class="line"></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">cd</span> ~/.venv/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_cv/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<h2 id="创建venv-torch"><a href="#创建venv-torch" class="headerlink" title="创建venv torch"></a>创建venv torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">python3 -m venv ~/.venv/torch</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="Install-protobuf-to-torch"><a href="#Install-protobuf-to-torch" class="headerlink" title="Install protobuf to torch"></a>Install protobuf to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/protobuf-3.12.3/python/</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install Cython</span><br><span class="line">pc4 python setup.py build --cpp_implementation</span><br><span class="line">pc4 python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">pc4 python setup.py install --cpp_implementation</span><br></pre></td></tr></table></figure>

<h2 id="Install-matplotlib-to-torch"><a href="#Install-matplotlib-to-torch" class="headerlink" title="Install matplotlib to torch"></a>Install matplotlib to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">sudo rm -r matplotlib-3.3.4</span><br><span class="line">tar -xvf v3.3.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.4/</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install -U setuptools==49.6.0</span><br><span class="line">pc4 wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xf freetype-2.6.1.tar.gz -C build/</span><br><span class="line">pc4 pip install numpy cycler python-dateutil kiwisolver pyparsing Pillow</span><br><span class="line">pc4 pip install wheel</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="创建-venv-tf2"><a href="#创建-venv-tf2" class="headerlink" title="创建 venv tf2"></a>创建 venv tf2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">python3 -m venv ~/.venv/tf2</span><br></pre></td></tr></table></figure>

<h2 id="Install-tf2"><a href="#Install-tf2" class="headerlink" title="Install tf2"></a>Install tf2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install -U testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line"></span><br><span class="line"><span class="comment"># install protobuf</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos/protobuf-3.12.3/python/</span><br><span class="line">pc4 pip install Cython</span><br><span class="line">pc4 python setup.py build --cpp_implementation</span><br><span class="line">pc4 python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">pc4 python setup.py install --cpp_implementation</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pc4 pip install wheel</span><br><span class="line">pc4 pip install astor wrapt</span><br><span class="line">pc4 pip install termcolor grpcio</span><br><span class="line">pc4 pip install -U setuptools</span><br><span class="line">pc4 pip install --upgrade pip</span><br><span class="line">pc4 pip install numpy==1.19.5</span><br><span class="line">pc4 wget https://developer.download.nvidia.com/compute/redist/jp/v45/tensorflow/tensorflow-2.4.0+nv21.4-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">pc4 pip install tensorflow-2.4.0+nv21.4-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<h3 id="fix-Illegal-instruction-core-dumped-error"><a href="#fix-Illegal-instruction-core-dumped-error" class="headerlink" title="fix Illegal instruction(core dumped) error"></a>fix Illegal instruction(core dumped) error</h3><p>在执行 Python 前</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://stackoverflow.com/questions/65631801/illegal-instructioncore-dumped-error-on-jetson-nano" target="_blank" rel="noopener">Illegal instruction(core dumped) error on Jetson Nano</a></p>
<p>###　fix <code>ModuleNotFoundError: No module named &#39;google.protobuf&#39;</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.venv/tf2/lib/python3.6/site-packages/protobuf-3.12.3-py3.6-linux-aarch64.egg/google/</span><br><span class="line">mv __init__.py bak.__init__.py</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/jkjung-avt/jetson_nano/issues/9#issuecomment-629803485" target="_blank" rel="noopener">Missing protobuf</a></p>
<h2 id="Install-PyTorch-to-torch"><a href="#Install-PyTorch-to-torch" class="headerlink" title="Install PyTorch to torch"></a>Install PyTorch to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pc4 wget https://nvidia.box.com/shared/static/p57jwntv436lfrd78inwl7iml6p13fzh.whl -O torch-1.8.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">sudo pc4 apt install libopenblas-base libopenmpi-dev</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install Cython</span><br><span class="line">pc4 pip install numpy torch-1.8.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># torchvision</span></span><br><span class="line">sudo pc4 apt install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --branch v0.9.0 https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.9.0</span><br><span class="line">pc4 pip install -U setuptools</span><br><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8 <span class="comment"># fix: Illegal instruction(core dumped) happend at below</span></span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="add-torch-kernel"><a href="#add-torch-kernel" class="headerlink" title="add torch kernel"></a>add torch kernel</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ipywidgets</span></span><br><span class="line">pc4 pip install ipywidgets</span><br></pre></td></tr></table></figure>

<h2 id="add-tf2-kernel"><a href="#add-tf2-kernel" class="headerlink" title="add tf2 kernel"></a>add tf2 kernel</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br><span class="line"></span><br><span class="line"><span class="comment"># install ipywidgets</span></span><br><span class="line">pc4 pip install ipywidgets</span><br></pre></td></tr></table></figure>

<h2 id="Install-OpenCV-to-torch"><a href="#Install-OpenCV-to-torch" class="headerlink" title="Install OpenCV to torch"></a>Install OpenCV to torch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/opencv</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">mkdir build_torch</span><br><span class="line"><span class="built_in">cd</span> build_torch/</span><br><span class="line">sudo mkdir /usr/venv_torch</span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_opencv_python2=OFF -D BUILD_opencv_python3=ON -D BUILD_opencv_java_bindings_generator=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/venv_torch -D BUILD_PROTOBUF=OFF -D PROTOBUF_UPDATE_FILES=ON -D OPENCV_DNN_CUDA=ON -D OPENCV_ENABLE_NONFREE=ON -D OPENCV_EXTRA_MODULES_PATH=~/repos/opencv_contrib/modules -D PYTHON3_NUMPY_INCLUDE_DIRS=~/.venv/torch/lib/python3.6/site-packages/numpy/core/include -D WITH_CUDA=ON -D CUDA_ARCH_PTX=<span class="string">""</span> -D CUDA_ARCH_BIN=5.3 -D WITH_GSTREAMER=ON -D WITH_TENGINE=ON -D WITH_VULKAN=ON -D WITH_OPENMP=ON -D WITH_FREETYPE=ON -D WITH_OPENGL=ON ..</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">cd</span> ~/.venv/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_torch/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<h2 id="Install-OpenCV-to-tf2"><a href="#Install-OpenCV-to-tf2" class="headerlink" title="Install OpenCV to tf2"></a>Install OpenCV to tf2</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.venv/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/venv_torch/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<h2 id="Install-JetCam"><a href="#Install-JetCam" class="headerlink" title="Install JetCam"></a>Install JetCam</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line"></span><br><span class="line"><span class="comment"># install to cv</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># install to torch</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># install to tf2</span></span><br><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-torch2trt"><a href="#Install-torch2trt" class="headerlink" title="Install torch2trt"></a>Install torch2trt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/torch2trt</span><br><span class="line"><span class="built_in">cd</span> torch2trt/</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链tensorrt到torch</span></span><br><span class="line"><span class="built_in">cd</span> ~/.venv/torch/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/lib/python3.6/dist-packages/tensorrt tensorrt</span><br></pre></td></tr></table></figure>

<h2 id="Install-jetson-inference"><a href="#Install-jetson-inference" class="headerlink" title="Install jetson-inference"></a>Install jetson-inference</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/dusty-nv/jetson-inference.git</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">vim tools/download-models.sh <span class="comment"># 在wget前增加proxychains4</span></span><br><span class="line">vim CMakePreBuild.sh <span class="comment"># 增加proxychains4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 $&#123;PYTHON_EXECUTABLE&#125; 为 /home/frotech/.venv/torch/bin/python3</span></span><br><span class="line">vim /utils/python/bindings/FindNumPy.cmake</span><br><span class="line"></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> OPENBLAS_CORETYPE=ARMV8</span><br><span class="line"><span class="comment"># 选择下载哪些模型，跳过安装PyTorch</span></span><br><span class="line">cmake ../</span><br><span class="line">make -j4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到torch</span></span><br><span class="line"><span class="comment">## 修改下面的路径，将其改为cv环境的路径，注意dist-packages改为site-packages</span></span><br><span class="line"><span class="comment"># set(PYTHON_BINDING_INSTALL_DIR /usr/lib/python$&#123;PYTHON_VERSION_MAJOR&#125;.$&#123;PYTHON_VERSION_MINOR&#125;/dist-packages)</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line"></span><br><span class="line">OPENBLAS_CORETYPE=ARMV8 sudo -E make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/building-repo-2.md" target="_blank" rel="noopener">Building the Project from Source</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/482" target="_blank" rel="noopener">Cmake not Detecting Virtual Environment (venv)</a></li>
<li><a href="https://unix.stackexchange.com/questions/337819/how-to-export-variable-for-use-with-sudo" target="_blank" rel="noopener">How to export variable for use with sudo?</a></li>
</ul>
<h2 id="Install-modbus-tk"><a href="#Install-modbus-tk" class="headerlink" title="Install modbus_tk"></a>Install modbus_tk</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install modbus_tk</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install modbus_tk</span><br><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install modbus_tk</span><br></pre></td></tr></table></figure>

<p>使用ttyTHS1作串口通信，需要禁用nvgetty服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Install-aiocoap"><a href="#Install-aiocoap" class="headerlink" title="Install aiocoap"></a>Install aiocoap</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap</span><br><span class="line">git checkout dffbe242d09</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>

<h2 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libzbar0</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install pyzbar</span><br></pre></td></tr></table></figure>

<h2 id="Install-other-python-packages"><a href="#Install-other-python-packages" class="headerlink" title="Install other python packages"></a>Install other python packages</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install Flask flask_restful yapf Adafruit_SSD1306 crcmod</span><br></pre></td></tr></table></figure>

<h2 id="Fix-core-dump"><a href="#Fix-core-dump" class="headerlink" title="Fix core dump"></a>Fix core dump</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop jetcard_jupyter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行的命令改为如下</span></span><br><span class="line"><span class="comment"># export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 &amp;&amp; export OPENBLAS_CORETYPE=ARMV8 &amp;&amp; jupyter lab --ip=0.0.0.0 --no-browser</span></span><br><span class="line">sudo vim /etc/systemd/system/jetcard_jupyter.service</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-jetbot-service"><a href="#Install-fro-jetbot-service" class="headerlink" title="Install fro_jetbot_service"></a>Install fro_jetbot_service</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/fro_jetbot_service.git</span><br><span class="line"><span class="built_in">cd</span> fro_jetbot_service/</span><br><span class="line"></span><br><span class="line"><span class="comment"># OLED信息显示服务</span></span><br><span class="line">python3 create_stats_service.py</span><br><span class="line">sudo mv jetbot_stats.service /etc/systemd/system/jetbot_stats.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_stats</span><br><span class="line">sudo systemctl start jetbot_stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序上传、运行、停止服务</span></span><br><span class="line">python3 create_coding_service.py</span><br><span class="line">sudo mv jetbot_coding.service /etc/systemd/system/jetbot_coding.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_coding</span><br><span class="line">sudo systemctl start jetbot_coding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动开启AP，更新 SSID</span></span><br><span class="line">python3 create_ap_service.py</span><br><span class="line">sudo mv jetbot_ap_update.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_ap_update</span><br><span class="line">sudo systemctl start jetbot_ap_update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决/dev/ttyTHS1权限问题</span></span><br><span class="line">python3 create_first_boot_init_service.py</span><br><span class="line">sudo mv jetbot_init.service /etc/systemd/system/</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_init</span><br></pre></td></tr></table></figure>

<h2 id="Install-frotech-adapter"><a href="#Install-frotech-adapter" class="headerlink" title="Install frotech_adapter"></a>Install frotech_adapter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/aiotlab_jetson_adapter.git jetson_adapter</span><br><span class="line"><span class="built_in">cd</span> jetson_adapter</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install .</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/cv/bin/activate</span><br><span class="line">pc4 pip install .</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/tf2/bin/activate</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<h2 id="Install-fro-ai"><a href="#Install-fro-ai" class="headerlink" title="Install fro_ai"></a>Install fro_ai</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/fro_-ai.git fro_AI</span><br><span class="line"><span class="built_in">cd</span> fro_AI</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<h2 id="低功耗模式"><a href="#低功耗模式" class="headerlink" title="低功耗模式"></a>低功耗模式</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nvpmodel -m 1</span><br></pre></td></tr></table></figure>

<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"export OPENBLAS_CORETYPE=ARMV8"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># torch 的 Jetcam 调用 jetson-inference 的 API</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/z14git/jetcam.git jetcam_z14</span><br><span class="line"><span class="built_in">source</span> ~/.venv/torch/bin/activate</span><br><span class="line"><span class="built_in">cd</span> jetcam_z14/</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>git 服务器证书验证失败</title>
    <url>/sundries/2021/04/08/git-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><code>git clone https://xxx.git</code> 时报错：</p>
<p><code>CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</code></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>Linux:</strong></p>
<p><code>export GIT_SSL_NO_VERIFY=1</code></p>
<p><strong>Windows:</strong></p>
<p><code>set GIT_SSL_NO_VERIFY 1</code></p>
<p><strong>Git:</strong></p>
<p><code>git config --global http.sslVerify false</code></p>
<blockquote>
<p>ref: <a href="https://www.jianshu.com/p/7d599bdf370a" target="_blank" rel="noopener">git错误error: server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu install v2ray</title>
    <url>/sundries/2021/02/22/ubuntu-install-v2ray/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo snap install qv2ray</span><br><span class="line">下载 https://github.com/v2fly/v2ray-core/releases/download/v&lt;版本号&gt;/v2ray-linux-64.zip</span><br><span class="line">cp v2ray-linux-64.zip ~/snap/qv2ray/4091/.config/qv2ray</span><br><span class="line">unzip v2ray-linux-64.zip -d vcore</span><br><span class="line">rm v2ray-linux-64.zip</span><br></pre></td></tr></table></figure>

<p>打开qv2ray，依次点击Preference-&gt;Kernel Settings-&gt;Check V2Ray Core Settings</p>
<blockquote>
<p>ref: <a href="https://medium.com/@eleveninstrangerthings/%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%9B%BE%E5%BD%A2%E5%8C%96v2ray%E5%AE%A2%E6%88%B7%E7%AB%AFqv2ray-d0f690b7c519" target="_blank" rel="noopener">在Ubuntu上安装图形化v2Ray客户端Qv2Ray （2021年1月更新）</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>jp4.5 log</title>
    <url>/sundries/2021/02/07/jp4-5-log/</url>
    <content><![CDATA[<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开网卡</span></span><br><span class="line">sudo ifconfig wlan0 up</span><br><span class="line"><span class="comment"># 配wifi</span></span><br><span class="line">sudo nmtui</span><br><span class="line">mkdir repos</span><br></pre></td></tr></table></figure>

<h3 id="最高性能模式"><a href="#最高性能模式" class="headerlink" title="最高性能模式"></a>最高性能模式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nvpmodel -m 0</span><br><span class="line">sudo jetson_clocks</span><br></pre></td></tr></table></figure>

<h2 id="Install-system-level-dependencies"><a href="#Install-system-level-dependencies" class="headerlink" title="Install system-level dependencies"></a>Install system-level dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git cmake</span><br></pre></td></tr></table></figure>

<h3 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install-config</span><br><span class="line">sudo vim /etc/proxychains.conf <span class="comment"># 修改代理地址</span></span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/rofl0r/proxychains-ng/issues/139#issuecomment-260360687" target="_blank" rel="noopener">#139</a></p>
<h3 id="简化proxychains4"><a href="#简化proxychains4" class="headerlink" title="简化proxychains4"></a>简化proxychains4</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"alias pc4='proxychains4'"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias sudo='sudo '"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>ref :</p>
<ul>
<li><a href="https://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo" target="_blank" rel="noopener">Aliases not available when using sudo</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/111228714" target="_blank" rel="noopener">chainproxys-ng：在服务器/终端也能使用代理</a></li>
</ul>
<h3 id="Install-other-dependencies"><a href="#Install-other-dependencies" class="headerlink" title="Install other dependencies"></a>Install other dependencies</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo pc4 apt-get install python3-dev</span><br><span class="line">sudo pc4 apt-get install nano locate</span><br><span class="line">sudo pc4 apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo pc4 apt-get install cython3</span><br><span class="line">sudo pc4 apt-get install libxml2-dev libxslt1-dev</span><br><span class="line">sudo pc4 apt install curl screen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新gcc</span></span><br><span class="line">sudo pc4 apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/<span class="built_in">test</span></span><br><span class="line">sudo pc4 apt update</span><br><span class="line">sudo pc4 apt install gcc-6 g++-6 gcc-7 g++-7 gcc-8 g++-8 gcc-9 g++-9</span><br><span class="line"><span class="comment"># 设置优先级</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 70 --slave /usr/bin/g++ g++ /usr/bin/g++-7 --slave /usr/bin/gcov gcov /usr/bin/gcov-7</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 60 --slave /usr/bin/g++ g++ /usr/bin/g++-6 --slave /usr/bin/gcov gcov /usr/bin/gcov-6</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --config gcc <span class="comment">#GCC8</span></span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://linuxize.com/post/how-to-install-gcc-compiler-on-ubuntu-18-04/" target="_blank" rel="noopener">How to Install GCC Compiler on Ubuntu 18.04</a></p>
<h2 id="Set-up-Python-virtual-environments-on-your-Jetson-Nano"><a href="#Set-up-Python-virtual-environments-on-your-Jetson-Nano" class="headerlink" title="Set up Python virtual environments on your Jetson Nano"></a>Set up Python virtual environments on your Jetson Nano</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo -H proxychains4 python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br><span class="line"></span><br><span class="line">sudo -H proxychains4 pip install virtualenv virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Create-your-‘cv’-virtual-environment"><a href="#Create-your-‘cv’-virtual-environment" class="headerlink" title="Create your ‘cv’ virtual environment"></a>Create your ‘cv’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv cv -p python3</span><br><span class="line">workon cv</span><br></pre></td></tr></table></figure>

<h2 id="Create-‘tf2’-virtual-environment"><a href="#Create-‘tf2’-virtual-environment" class="headerlink" title="Create ‘tf2’ virtual environment"></a>Create ‘tf2’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv tf2 -p python3</span><br></pre></td></tr></table></figure>

<h2 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Jetson-stats"><a href="#安装-Jetson-stats" class="headerlink" title="安装 Jetson stats"></a>安装 Jetson stats</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains4 pip install -U jetson-stats</span><br></pre></td></tr></table></figure>

<h2 id="Update-CMake"><a href="#Update-CMake" class="headerlink" title="Update CMake"></a>Update CMake</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget http://www.cmake.org/files/v3.19/cmake-3.19.4.tar.gz</span><br><span class="line">tar xpf cmake-3.19.4.tar.gz cmake-3.19.4/</span><br><span class="line"><span class="built_in">cd</span> cmake-3.19.4/</span><br><span class="line">sudo pc4 apt-get install libssl-dev libcurl4-openssl-dev</span><br><span class="line">./bootstrap --system-curl</span><br><span class="line">make -j4</span><br><span class="line"><span class="comment"># 将z14git替换为你的用户名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/home/z14git/repos/cmake-3.19.4/bin/:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h2 id="更新protobuf"><a href="#更新protobuf" class="headerlink" title="更新protobuf"></a>更新protobuf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-aarch_64.zip</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-python-3.12.3.zip</span><br><span class="line">unzip protobuf-python-3.12.3.zip</span><br><span class="line">unzip protoc-3.12.3-linux-aarch_64.zip -d protoc-3.12.3</span><br><span class="line">sudo cp protoc-3.12.3/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">export</span> PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.12.3/</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">pc4 pip install Cython</span><br><span class="line"><span class="built_in">cd</span> python/</span><br><span class="line">pc4 python setup.py build --cpp_implementation</span><br><span class="line">pc4 python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">pc4 python setup.py install --cpp_implementation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到tf2</span></span><br><span class="line">wokron tf2</span><br><span class="line">pc4 python setup.py build --cpp_implementation</span><br><span class="line">pc4 python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">pc4 python setup.py install --cpp_implementation</span><br></pre></td></tr></table></figure>

<h2 id="Install-tf1-x-in-‘cv’-virtual-environment"><a href="#Install-tf1-x-in-‘cv’-virtual-environment" class="headerlink" title="Install tf1.x in ‘cv’ virtual environment"></a>Install tf1.x in ‘cv’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pc4 pip install -U testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v45 <span class="string">'tensorflow&lt;2'</span></span><br></pre></td></tr></table></figure>

<h2 id="装matplotlib"><a href="#装matplotlib" class="headerlink" title="装matplotlib"></a>装matplotlib</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/matplotlib/matplotlib/archive/v3.3.4.tar.gz</span><br><span class="line">tar -xvf v3.3.4.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.4/</span><br><span class="line">pc4 wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xf freetype-2.6.1.tar.gz -C build/</span><br><span class="line"><span class="comment"># 装到cv</span></span><br><span class="line">workon cv</span><br><span class="line">sudo update-alternatives --config gcc <span class="comment">#GCC7</span></span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装到tf2</span></span><br><span class="line">workon tf2</span><br><span class="line">sudo update-alternatives --config gcc <span class="comment">#GCC7</span></span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-TensorFlow-Object-Detection-API-1-x"><a href="#Install-TensorFlow-Object-Detection-API-1-x" class="headerlink" title="Install TensorFlow Object Detection API(1.x)"></a>Install TensorFlow Object Detection API(1.x)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/tensorflow/models.git</span><br><span class="line"><span class="built_in">cd</span> models/research</span><br><span class="line">git checkout 5f4d34fc</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-PyTorch"><a href="#Install-PyTorch" class="headerlink" title="Install PyTorch"></a>Install PyTorch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libopenblas-base libopenmpi-dev</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install Cython</span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://nvidia.box.com/shared/static/cs3xn3td6sfgtene6jdvsxlr366m2dhq.whl -O torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line">pc4 pip install numpy==1.16.1 torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line"><span class="comment"># torchvision</span></span><br><span class="line">sudo pc4 apt install libjpeg-dev zlib1g-dev libpython3-dev libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line">git checkout v0.8.1</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.8.1</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到tf2</span></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Cython</span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 pip install numpy==1.16.1 torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.8.1</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-opencv"><a href="#Install-opencv" class="headerlink" title="Install opencv"></a>Install opencv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget -O opencv-4.5.1.zip https://github.com/opencv/opencv/archive/4.5.1.zip</span><br><span class="line">pc4 wget -O opencv_contrib-4.5.1.zip https://github.com/opencv/opencv_contrib/archive/4.5.1.zip</span><br><span class="line">sudo pc4 apt install libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libjpeg-turbo8-dev liblapacke-dev libopenblas-dev libpostproc-dev libtesseract-dev libxine2-dev libx264-dev qv4l2 v4l-utils v4l2ucp libgoogle-glog-dev</span><br><span class="line">unzip -q opencv-4.5.1.zip</span><br><span class="line">unzip -q opencv_contrib-4.5.1.zip</span><br><span class="line">mv opencv-4.5.1 opencv</span><br><span class="line">mv opencv_contrib-4.5.1 opencv_contrib</span><br><span class="line">sudo update-alternatives --config gcc <span class="comment">#GCC8</span></span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> opencv/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">	-D BUILD_opencv_python2=OFF \</span><br><span class="line">	-D BUILD_opencv_python3=ON \</span><br><span class="line">	-D BUILD_opencv_java_bindings_generator=OFF \</span><br><span class="line">	-D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">    -D BUILD_PROTOBUF=OFF \</span><br><span class="line">    -D PROTOBUF_UPDATE_FILES=ON \</span><br><span class="line">	-D OPENCV_DNN_CUDA=ON \</span><br><span class="line">	-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">	-D OPENCV_EXTRA_MODULES_PATH=~/repos/opencv_contrib/modules \</span><br><span class="line">	-D PYTHON3_NUMPY_INCLUDE_DIRS=~/.virtualenvs/cv/lib/python3.6/site-packages/numpy/core/include \</span><br><span class="line">	-D WITH_CUDA=ON \</span><br><span class="line">	-D CUDA_ARCH_PTX=<span class="string">""</span> \</span><br><span class="line">	-D CUDA_ARCH_BIN=5.3 \</span><br><span class="line">	-D WITH_GSTREAMER=ON \</span><br><span class="line">	-D WITH_TENGINE=ON \</span><br><span class="line">	-D WITH_VULKAN=ON \</span><br><span class="line">	-D WITH_OPENMP=ON \</span><br><span class="line">	-D WITH_FREETYPE=ON \</span><br><span class="line">	-D WITH_OPENGL=ON ..</span><br><span class="line"></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装到cv</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/cv2 cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 装到tf2</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/cv2 cv2</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://docs.opencv.org/master/db/d05/tutorial_config_reference.html" target="_blank" rel="noopener">OpenCV configuration options reference</a></p>
<h2 id="Install-Jupyter-Related"><a href="#Install-Jupyter-Related" class="headerlink" title="Install Jupyter Related"></a>Install Jupyter Related</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install -y curl</span><br><span class="line">deactivate</span><br><span class="line">pc4 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo pc4 apt install -y nodejs libffi-dev</span><br><span class="line">sudo -H proxychains4 pip3 install -U jupyter jupyterlab==2.2.6</span><br><span class="line">sudo -H proxychains4 jupyter labextension install @jupyter-widgets/jupyterlab-manager</span><br><span class="line"></span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('z14git', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建notebook目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cv</span></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tf2</span></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置自动启动服务</span></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">deactivate</span><br><span class="line">pc4 wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials</span><br><span class="line">sudo mv jetcard_jupyter.service /etc/systemd/system/jetcard_jupyter.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># fix 在jupyter lab中导入opencv时出现 "cannot allocate memory in static TLS block"</span></span><br><span class="line"><span class="comment"># 执行的命令改为如下</span></span><br><span class="line"><span class="comment"># export LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 &amp;&amp; jupyter lab --ip=0.0.0.0 --no-browser</span></span><br><span class="line">sudo vim /etc/systemd/system/jetcard_jupyter.service</span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetcard_jupyter</span><br><span class="line">sudo systemctl start jetcard_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install ipywidgets</span></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install ipywidgets</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install ipywidgets</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/NVIDIA-AI-IOT/jetcard/blob/8f793f4df703cd53cae20955f72c73ac81907074/install.sh#L74" target="_blank" rel="noopener">install.sh</a></li>
<li><a href="https://github.com/NVIDIA-AI-IOT/jetbot/blob/master/docker/base/Dockerfile#L83" target="_blank" rel="noopener">jetbot/docker/base/Dockerfile</a></li>
</ul>
<h2 id="Install-tf2-x-in-‘tf2’-virtual-environment"><a href="#Install-tf2-x-in-‘tf2’-virtual-environment" class="headerlink" title="Install tf2.x in ‘tf2’ virtual environment"></a>Install tf2.x in ‘tf2’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">pc4 pip install -U testresources setuptools==49.6.0</span><br><span class="line">pc4 pip install -U numpy==1.16.1 future==0.18.2 mock==3.0.5 h5py==2.10.0 keras_preprocessing==1.1.1 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v45 tensorflow</span><br></pre></td></tr></table></figure>

<p>将完后，<code>import tensorflow</code>会出现错误 <code>ModuleNotFoundError: No module named &#39;google.protobuf&#39;</code></p>
<p>解决方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/protobuf-3.12.3-py3.6-linux-aarch64.egg/google</span><br><span class="line">mv __init__.py bak.__init__.py</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/jkjung-avt/jetson_nano/issues/9#issuecomment-629803485" target="_blank" rel="noopener">Missing protobuf</a></p>
<h2 id="安装JetCam"><a href="#安装JetCam" class="headerlink" title="安装JetCam"></a>安装JetCam</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libzbar0</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyzbar</span><br></pre></td></tr></table></figure>

<h2 id="安装串口库"><a href="#安装串口库" class="headerlink" title="安装串口库"></a>安装串口库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install pyserial</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyserial</span><br></pre></td></tr></table></figure>

<h2 id="安装modbus-tk"><a href="#安装modbus-tk" class="headerlink" title="安装modbus_tk"></a>安装modbus_tk</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install modbus_tk</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install modbus_tk</span><br></pre></td></tr></table></figure>

<p>使用ttyTHS1作串口通信，需要禁用nvgetty服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br></pre></td></tr></table></figure>

<h2 id="安装crcmod"><a href="#安装crcmod" class="headerlink" title="安装crcmod"></a>安装crcmod</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install crcmod</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install crcmod</span><br></pre></td></tr></table></figure>

<h2 id="解决-dev-ttyTHS1权限问题"><a href="#解决-dev-ttyTHS1权限问题" class="headerlink" title="解决/dev/ttyTHS1权限问题"></a>解决<code>/dev/ttyTHS1</code>权限问题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Install-Adafruit-SSD1306"><a href="#Install-Adafruit-SSD1306" class="headerlink" title="Install Adafruit_SSD1306"></a>Install Adafruit_SSD1306</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install Adafruit_SSD1306</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Adafruit_SSD1306</span><br></pre></td></tr></table></figure>

<h2 id="install-flask"><a href="#install-flask" class="headerlink" title="install flask"></a>install flask</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install Flask</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Flask</span><br></pre></td></tr></table></figure>

<h2 id="安装aiocoap"><a href="#安装aiocoap" class="headerlink" title="安装aiocoap"></a>安装aiocoap</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">workon cv</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap/</span><br><span class="line">vim setup.py <span class="comment"># python_requires='&gt;=3.6',</span></span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>

<h2 id="安装torch2trt"><a href="#安装torch2trt" class="headerlink" title="安装torch2trt"></a>安装torch2trt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/torch2trt</span><br><span class="line"><span class="built_in">cd</span> torch2trt/</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链tensorrt到cv</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> .virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/lib/python3.6/dist-packages/tensorrt tensorrt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软链tensorrt到tf2</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br></pre></td></tr></table></figure>

<h2 id="Install-jetson-inference"><a href="#Install-jetson-inference" class="headerlink" title="Install jetson-inference"></a>Install jetson-inference</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/dusty-nv/jetson-inference.git</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">vim tools/download-models.sh <span class="comment"># 在wget前增加proxychains4</span></span><br><span class="line">vim CMakePreBuild.sh <span class="comment"># 增加proxychains4</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ../ <span class="comment"># 选择下载哪些模型，跳过安装PyTorch</span></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"><span class="comment"># 安装到cv</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line"><span class="comment">## 修改下面的路径，将其改为cv环境的路径，注意dist-packages改为site-packages</span></span><br><span class="line"><span class="comment"># set(PYTHON_BINDING_INSTALL_DIR /usr/lib/python$&#123;PYTHON_VERSION_MAJOR&#125;.$&#123;PYTHON_VERSION_MINOR&#125;/dist-packages)</span></span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">workon cv</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo rm -r ~/.virtualenvs/cv/lib/python2.7/</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到tf2，一样要修改路径</span></span><br><span class="line">workon tf2</span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo rm -r ~/.virtualenvs/tf2/lib/python2.7/</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/building-repo-2.md" target="_blank" rel="noopener">Building the Project from Source</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/482" target="_blank" rel="noopener">Cmake not Detecting Virtual Environment (venv)</a></li>
</ul>
<h2 id="修改pip源"><a href="#修改pip源" class="headerlink" title="修改pip源"></a>修改pip源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>

<h2 id="安装yapf"><a href="#安装yapf" class="headerlink" title="安装yapf"></a>安装yapf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install yapf</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install yapf</span><br></pre></td></tr></table></figure>

<h2 id="安装flask-restful"><a href="#安装flask-restful" class="headerlink" title="安装flask_restful"></a>安装flask_restful</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install flask_restful</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install flask_restful</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装TL-WDN6200驱动</title>
    <url>/sundries/2021/01/30/ubuntu%E5%AE%89%E8%A3%85TL-WDN6200%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gnab/rtl8812au.git</span><br><span class="line"><span class="built_in">cd</span> rtl8812au</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo modprobe 8812au</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://www.jianshu.com/p/58938a9b75a6" target="_blank" rel="noopener">Ubuntu12.04安装TL-wdn6200 linux驱动</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix Error 0x80071160</title>
    <url>/sundries/2021/01/21/Fix-Error-0x80071160/</url>
    <content><![CDATA[<ol>
<li>已管理员身份运行Terminal</li>
<li>执行<code>dism.exe /Online /Cleanup-image /Restorehealth</code></li>
<li>执行<code>sfc /scannow</code></li>
</ol>
<blockquote>
<p>ref: <a href="https://www.youtube.com/watch?v=3xbTDspwQNU&ab_channel=AarohanTechSol" target="_blank" rel="noopener">Fix Error 0x80071160 While Updating Windows 10</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>mdk 编译包含中文的源代码</title>
    <url>/sundries/2021/01/04/mdk-%E7%BC%96%E8%AF%91%E5%8C%85%E5%90%AB%E4%B8%AD%E6%96%87%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>在非英文操作系统上，即使源代码使用UTF8，编译时仍有可能报错。</p>
<p><strong>解决方法</strong></p>
<p>添加编译选项 <code>--locale=english</code></p>
<blockquote>
<p>ref: <a href="https://www.keil.com/support/man/docs/armcc/armcc_chr1359124931077.htm" target="_blank" rel="noopener">–locale=lang_country</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>mdk</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu安装显卡驱动</title>
    <url>/sundries/2020/11/18/ubuntu%E5%AE%89%E8%A3%85%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ubuntu-drivers devices <span class="comment"># 查看设备和推荐的驱动</span></span><br><span class="line">sudo ubuntu-drivers autoinstall <span class="comment"># 安装推荐的驱动</span></span><br><span class="line"><span class="comment"># sudo apt install nvidia-340 # 安装指定版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>linux</tag>
        <tag>driver</tag>
      </tags>
  </entry>
  <entry>
    <title>修改默认启动项</title>
    <url>/sundries/2020/11/17/%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/</url>
    <content><![CDATA[<p>修改<code>/etc/default/grub</code>, 然后执行<code>sudo update-grub</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># If you change this file, run &#39;update-grub&#39; afterwards to update</span><br><span class="line"></span><br><span class="line"># &#x2F;boot&#x2F;grub&#x2F;grub.cfg.</span><br><span class="line"></span><br><span class="line"># For full documentation of the options in this file, see:</span><br><span class="line"></span><br><span class="line">#   info -f grub -n &#39;Simple configuration&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GRUB_DEFAULT&#x3D;0</span><br><span class="line">&#x2F;&#x2F; ★ 默认启动项，按menuentry顺序，从0开始；若改为saved，则默认上次启动项</span><br><span class="line"></span><br><span class="line">#GRUB_HIDDEN_TIMEOUT&#x3D;0      &#x2F;&#x2F;隐藏菜单，grub2不再使</span><br><span class="line"></span><br><span class="line">GRUB_HIDDEN_TIMEOUT_QUIET&#x3D;true</span><br><span class="line">&#x2F;&#x2F;true不显示倒计时，屏幕将会是空白的；false空白屏幕上有计时器</span><br><span class="line"></span><br><span class="line">GRUB_TIMEOUT&#x3D;3</span><br><span class="line">&#x2F;&#x2F; ★ 设置进入默认启动项的等候时间，默认值10秒；若为-1则一直等待</span><br><span class="line"></span><br><span class="line">GRUB_DISTRIBUTOR&#x3D;&#96;lsb_release -i -s 2&gt; &#x2F;dev&#x2F;null || echo Debian&#96;</span><br><span class="line"></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT&#x3D;&quot;quiet splash&quot;</span><br><span class="line">&#x2F;&#x2F; ★ 添加内核启动参数，这个为默认</span><br><span class="line"></span><br><span class="line">GRUB_CMDLINE_LINUX&#x3D;&quot;acpi_osi&#x3D;Linux&quot;</span><br><span class="line">&#x2F;&#x2F; ★ 手动添加内核启动参数，比如 acpi&#x3D;off noapic等可在这里添加</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Uncomment to enable BadRAM filtering, modify to suit your needs</span><br><span class="line"></span><br><span class="line"># This works with Linux (no patch required) and with any kernel that obtains</span><br><span class="line"></span><br><span class="line"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span><br><span class="line"></span><br><span class="line">#GRUB_BADRAM&#x3D;&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Uncomment to disable graphical terminal (grub-pc only)</span><br><span class="line"></span><br><span class="line">#GRUB_TERMINAL&#x3D;console</span><br><span class="line">&#x2F;&#x2F;设置是否使用图形介面。去除前面#，仅使用控制台终端，不使用图形介面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># The resolution used on graphical terminal</span><br><span class="line"></span><br><span class="line"># note that you can use only modes which your graphic card supports via VBE</span><br><span class="line"></span><br><span class="line"># you can see them in real GRUB with the command &#96;vbeinfo&#39;</span><br><span class="line"></span><br><span class="line">#GRUB_GFXMODE&#x3D;640x480</span><br><span class="line">&#x2F;&#x2F; ★ 设定图形介面分辨率，如不使用默认，把前面#去掉，分辨率按需修改</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Uncomment if you don&#39;t want GRUB to pass &quot;root&#x3D;UUID&#x3D;xxx&quot; parameter to Linux</span><br><span class="line"></span><br><span class="line">#GRUB_DISABLE_LINUX_UUID&#x3D;true</span><br><span class="line">&#x2F;&#x2F;设置grub命令是否使用UUID，去掉#，使用root&#x3D;&#x2F;dev&#x2F;sdax而不用root&#x3D;UUDI&#x3D;xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Uncomment to disable generation of recovery mode menu entries</span><br><span class="line"></span><br><span class="line">#GRUB_DISABLE_RECOVERY&#x3D;&quot;true&quot;</span><br><span class="line">&#x2F;&#x2F;设定是否创建修复模式菜单项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Uncomment to get a beep at grub start</span><br><span class="line"></span><br><span class="line">#GRUB_INIT_TUNE&#x3D;&quot;480 440 1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://www.jianshu.com/p/f9e17ba42943" target="_blank" rel="noopener">/etc/default/grub 文件详解</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>grub</tag>
      </tags>
  </entry>
  <entry>
    <title>Reconfiguring a Jetson Device with oem-config</title>
    <url>/sundries/2020/11/17/re-enable-oem-config/</url>
    <content><![CDATA[<ol>
<li><p>Enter this command to install the following packages on the source device to enable <code>oem-config</code> for the next reboot: <code>ubiquity</code>, <code>oem-config</code>, and <code>oem-config-gtk</code>:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install --no-install-recommends ubiquity oem-config oem-config-gtk</span><br></pre></td></tr></table></figure>
</li>
<li><p>Remove the package <code>nvidia-l4f-oem-config</code>:</p>
<p> <code>sudo dpkg --purge nvidia-l4t-oem-config</code></p>
</li>
<li><p>Power off the source device and remove the SD card from it, then insert it into in the host system.</p>
</li>
<li><p>Mount partition #1 of the SD card (an ext4 filesystem) on the host, using a mount point of your choice.</p>
<p> ps: 直接用读卡器接入电脑即可，默认会自动挂载到 <code>/media/xxx</code> 目录下</p>
</li>
<li><p>Apply any Jetson-specific binaries to partition #1 of SD card. The appropriate files are listed in nv-oem-config, and are applied by the <code>apply_binaries</code> script. Enter these commands to run the script:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Linux_for_Tegra</span><br><span class="line">sudo ./apply_binaries.sh -r &lt;root&gt;</span><br></pre></td></tr></table></figure>

<p> Where <code>&lt;root&gt;</code> represents the partition #1 of SD card mount point.</p>
</li>
<li><p>Set <code>nv-oem-config.target</code> as the default.target:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$root</span>/etc/systemd/system <span class="comment"># 将 $root 替换为 /media/xxx</span></span><br><span class="line">sudo rm default.target</span><br><span class="line">sudo ln -s /lib/systemd/system/nv-oem-config.target default.target</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run <code>jetson-disk-image-creator.sh</code> to create a new SD card image with modified rootfs:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Linux_for_Tegra/tools</span><br><span class="line">sudo ROOTFS_DIR=&lt;root&gt; ./jetson-disk-image-creator.sh -o sd-blob.img -b jetson-nano -r 100</span><br></pre></td></tr></table></figure>

<p> Where <code>&lt;root&gt;</code> represents partition #1 of the SD card on its mount point. For details, see <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3243/Tegra%20Linux%20Driver%20Package%20Development%20Guide/flashing.html#wwpID0E0DG0HA" target="_blank" rel="noopener">To generate an image to be flashed to an SD card</a>.</p>
</li>
<li><p>弹出读卡器</p>
</li>
<li><p>Flash <code>sd-blob.img</code> to the new SD card.</p>
</li>
</ol>
<blockquote>
<p>ref: <a href="https://docs.nvidia.com/jetson/archives/l4t-archived/l4t-3243/index.html#page/Tegra%2520Linux%2520Driver%2520Package%2520Development%2520Guide%2Fflashing.html%23wwpID0E0KD0HA" target="_blank" rel="noopener">Reconfiguring a Jetson Device with oem-config</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu turn on wifi</title>
    <url>/sundries/2020/11/16/ubuntu-turn-on-wifi/</url>
    <content><![CDATA[<p>用<code>iwconfig</code>查看无线接口，一般是<code>wlan0</code>之类的名称。</p>
<p>然后执行</p>
<p><code>sudo ifconfig wlan0 up</code></p>
<blockquote>
<p>ref: <a href="https://www.linuxbabe.com/ubuntu/connect-to-wi-fi-from-terminal-on-ubuntu-18-04-19-04-with-wpa-supplicant" target="_blank" rel="noopener">Connect to Wi-Fi From Terminal on Ubuntu 18.04/20.04 with WPA Supplicant</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>using proxy in python script</title>
    <url>/sundries/2020/11/11/using-proxy-in-python-script/</url>
    <content><![CDATA[<p>for request:</p>
<p><code>pip install requests[socks]</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.args)</span><br></pre></td></tr></table></figure>

<p>for urllib:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener, urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">proxy_handler = ProxyHandler(&#123;<span class="string">'socks5'</span>: <span class="string">'localhost:1080'</span>&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read())</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure>

<p>for boto3:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> botocore.config <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line">boto3.resource(<span class="string">'s3'</span>, config=Config(proxies=&#123;<span class="string">'https'</span>: <span class="string">'foo.bar:3128'</span>&#125;))</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://amberwest.github.io/2018/07/19/python3-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/" target="_blank" rel="noopener">python3：代理设置</a></li>
<li><a href="https://www.coder.work/article/6265084" target="_blank" rel="noopener">您如何在boto3中使用HTTP / HTTPS代理？</a></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 10 用命令行下载</title>
    <url>/sundries/2020/11/11/windows-10-%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example 1</span></span><br><span class="line">curl.exe -<span class="literal">-output</span> index.html -<span class="literal">-url</span> https://superuser.com</span><br><span class="line"><span class="comment"># example 2</span></span><br><span class="line">curl.exe <span class="literal">-o</span> index.html https://superuser.com</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://superuser.com/questions/25538/how-to-download-files-from-command-line-in-windows-like-wget-or-curl" target="_blank" rel="noopener">How to download files from command line in Windows like wget or curl</a></li>
<li><a href="https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409" target="_blank" rel="noopener">Tar and Curl Come to Windows!</a></li>
</ul>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>拉取指定远程分支到本地</title>
    <url>/sundries/2020/11/11/%E6%8B%89%E5%8F%96%E6%8C%87%E5%AE%9A%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
    <content><![CDATA[<p>假设要拉取z14/dev</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch z14 dev</span><br><span class="line">git checkout -b dev z14/dev</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://zj-git-guide.readthedocs.io/zh_CN/latest/advanced/%E6%8B%89%E5%8F%96%E6%8C%87%E5%AE%9A%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%88%B0%E6%9C%AC%E5%9C%B0/" target="_blank" rel="noopener">拉取指定远程分支到本地</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vlc play rtp stream</title>
    <url>/sundries/2020/11/09/vlc-play-rtp-stream/</url>
    <content><![CDATA[<p>新建一个SDP文件，假设输入流是H264，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;0</span><br><span class="line">m&#x3D;video 1234 RTP&#x2F;AVP 96</span><br><span class="line">a&#x3D;rtpmap:96 H264&#x2F;90000</span><br><span class="line">c&#x3D;IN IP4 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>接着用VLC打开SDP文件即可。</p>
<p>若输入流是MJPEG，则SDP文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v&#x3D;0</span><br><span class="line">m&#x3D;video 1234 RTP&#x2F;AVP 26</span><br><span class="line">a&#x3D;rtpmap:26 JPEG&#x2F;90000</span><br><span class="line">c&#x3D;IN IP4 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://blog.csdn.net/zhoubotong2012/article/details/86712289" target="_blank" rel="noopener">VLC接收RTP流的SDP文件写法</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/aux-streaming.md#rtp" target="_blank" rel="noopener">Camera Streaming and Multimedia</a></li>
<li><a href="https://github.com/wang-bin/QtAV/issues/712" target="_blank" rel="noopener">Problems playing RTP-streams (mjpeg, h264)</a></li>
</ul>
]]></content>
      <tags>
        <tag>vlc</tag>
        <tag>rtp</tag>
      </tags>
  </entry>
  <entry>
    <title>Opencv编译出现&#39;In-source builds are not allowed&#39;</title>
    <url>/sundries/2020/11/06/Opencv%E7%BC%96%E8%AF%91%E5%87%BA%E7%8E%B0-In-source-builds-are-not-allowed/</url>
    <content><![CDATA[<p>应该是在代码根目录下直接执行过cmake，导致根目录下生成了CMakeCache.txt，需要删除CMakeCache.txt再次执行编译即可。</p>
<p>ref:</p>
<ul>
<li><a href="https://blog.csdn.net/WhereYouSink/article/details/80007449" target="_blank" rel="noopener">Opencv编译出现”In-source builds are not allowed”</a></li>
<li><a href="https://www.mobibrw.com/2017/7393" target="_blank" rel="noopener">Ubuntu 16.04编译安装最新的OpenCV3.2</a></li>
</ul>
]]></content>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>screen基础使用</title>
    <url>/sundries/2020/11/06/screen%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>C-a 表示 Ctrl + a</p>
<h2 id="创建一个新screen"><a href="#创建一个新screen" class="headerlink" title="创建一个新screen"></a>创建一个新screen</h2><p><code>screen -S screen_name</code></p>
<p>screen_name自行定义</p>
<h2 id="查看会话"><a href="#查看会话" class="headerlink" title="查看会话"></a>查看会话</h2><p><code>screen -ls</code></p>
<h2 id="会话分离与恢复"><a href="#会话分离与恢复" class="headerlink" title="会话分离与恢复"></a>会话分离与恢复</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -d <span class="comment"># 分离</span></span><br><span class="line"><span class="comment"># 如果是分离当前会话，C-a d</span></span><br><span class="line">screen -r id <span class="comment"># id 用screen -ls查看</span></span><br></pre></td></tr></table></figure>

<p>ps: 会话还未分离是没法用<code>-r</code>恢复的</p>
<p>ref: <a href="https://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="noopener">linux screen 命令详解</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>通过ssh远程连接windows</title>
    <url>/sundries/2020/11/04/%E9%80%9A%E8%BF%87ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5windows/</url>
    <content><![CDATA[<h2 id="Installing-OpenSSH-with-PowerShell"><a href="#Installing-OpenSSH-with-PowerShell" class="headerlink" title="Installing OpenSSH with PowerShell"></a>Installing OpenSSH with PowerShell</h2><p>To install OpenSSH using PowerShell, first launch PowerShell as an Administrator. To make sure that the OpenSSH features are available for install:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-WindowsCapability</span> <span class="literal">-Online</span> | ? Name <span class="operator">-like</span> <span class="string">'OpenSSH*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This should return the following output:</span></span><br><span class="line"></span><br><span class="line">Name  : OpenSSH.Client~~~~<span class="number">0.0</span>.<span class="number">1.0</span></span><br><span class="line">State : NotPresent</span><br><span class="line">Name  : OpenSSH.Server~~~~<span class="number">0.0</span>.<span class="number">1.0</span></span><br><span class="line">State : NotPresent</span><br></pre></td></tr></table></figure>

<p>Then, install the server and/or client features:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install the OpenSSH Client</span></span><br><span class="line"><span class="built_in">Add-WindowsCapability</span> <span class="literal">-Online</span> <span class="literal">-Name</span> OpenSSH.Client~~~~<span class="number">0.0</span>.<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the OpenSSH Server</span></span><br><span class="line"><span class="built_in">Add-WindowsCapability</span> <span class="literal">-Online</span> <span class="literal">-Name</span> OpenSSH.Server~~~~<span class="number">0.0</span>.<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Both of these should return the following output:</span></span><br><span class="line"></span><br><span class="line">Path          :</span><br><span class="line">Online        : True</span><br><span class="line">RestartNeeded : False</span><br></pre></td></tr></table></figure>

<h2 id="Initial-Configuration-of-SSH-Server"><a href="#Initial-Configuration-of-SSH-Server" class="headerlink" title="Initial Configuration of SSH Server"></a>Initial Configuration of SSH Server</h2><p>To configure the OpenSSH server for initial use on Windows, launch PowerShell as an administrator, then run the following commands to start the SSHD service:</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Start-Service</span> sshd</span><br><span class="line"><span class="comment"># OPTIONAL but recommended:</span></span><br><span class="line"><span class="built_in">Set-Service</span> <span class="literal">-Name</span> sshd <span class="literal">-StartupType</span> <span class="string">'Automatic'</span></span><br><span class="line"><span class="comment"># Confirm the Firewall rule is configured. It should be created automatically by setup.</span></span><br><span class="line"><span class="built_in">Get-NetFirewallRule</span> <span class="literal">-Name</span> *ssh*</span><br><span class="line"><span class="comment"># There should be a firewall rule named "OpenSSH-Server-In-TCP", which should be enabled</span></span><br><span class="line"><span class="comment"># If the firewall does not exist, create one</span></span><br><span class="line"><span class="built_in">New-NetFirewallRule</span> <span class="literal">-Name</span> sshd <span class="literal">-DisplayName</span> <span class="string">'OpenSSH Server (sshd)'</span> <span class="literal">-Enabled</span> True <span class="literal">-Direction</span> Inbound <span class="literal">-Protocol</span> TCP <span class="literal">-Action</span> Allow <span class="literal">-LocalPort</span> <span class="number">22</span></span><br></pre></td></tr></table></figure>

<p>部署好后，在另一台windows电脑上，可通过以下方式连接：</p>
<figure class="highlight ps"><table><tr><td class="code"><pre><span class="line">Ssh <span class="literal">-p</span> port username@servername</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse" target="_blank" rel="noopener">Installation of OpenSSH For Windows Server 2019 and Windows 10</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Using SCP to copy a file on a non standard ssh port</title>
    <url>/sundries/2020/11/03/Using-SCP-to-copy-a-file-on-a-non-standard-ssh-port/</url>
    <content><![CDATA[<p>用<code>-P</code>参数即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp -P port file user@remote_ip</span><br></pre></td></tr></table></figure>

<p>ps: <code>-P</code> 要在文件前</p>
<p>ref: <a href="https://askubuntu.com/questions/32413/copy-with-ssh-with-port-other-than-22" target="_blank" rel="noopener">copy with ssh with port other than 22</a></p>
]]></content>
      <tags>
        <tag>ssh</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title>install v2ray on ubuntu</title>
    <url>/sundries/2020/11/03/install-v2ray-on-ubuntu/</url>
    <content><![CDATA[<ol>
<li><p>先在能FQ的电脑上下载<a href="https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh" target="_blank" rel="noopener">安装脚本</a></p>
</li>
<li><p>然后将脚本传到要安装v2ray的电脑上并执行：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo bash install-release.sh</span><br></pre></td></tr></table></figure>

<p> ps: 遇到连接超时就再试一次</p>
</li>
<li><p>将windows上的v2ray安装目录下的已配置好的config.json复制到 <code>/usr/local/etc/v2ray/config.json</code></p>
</li>
<li><p>再执行以下命令：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> v2ray</span><br><span class="line">sudo systemctl start v2ray</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>ps: 装完后连不上- -||</p>
<p>ref: <a href="https://github.com/v2fly/fhs-install-v2ray" target="_blank" rel="noopener">fhs-install-v2ray</a></p>
]]></content>
      <tags>
        <tag>ubuntu</tag>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>restart jetson nano camera</title>
    <url>/sundries/2020/10/30/restart-jetson-nano-camera/</url>
    <content><![CDATA[<p>重启 Jetson Nano 摄像头：</p>
<p><code>sudo systemctl restart nvargus-daemon</code></p>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用cv2.VideoWriter实现rtsp推流</title>
    <url>/sundries/2020/10/27/%E5%A6%82%E4%BD%95%E7%94%A8cv2-VideoWriter%E5%AE%9E%E7%8E%B0rtsp%E6%8E%A8%E6%B5%81/</url>
    <content><![CDATA[<h2 id="安装-v4l2loopback"><a href="#安装-v4l2loopback" class="headerlink" title="安装 v4l2loopback"></a>安装 v4l2loopback</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">mkdir v4l2loopback</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/umlaeute/v4l2loopback.git v4l2loopback</span><br><span class="line"><span class="built_in">cd</span> v4l2loopback/</span><br><span class="line">git checkout v0.10.0</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">modprobe v4l2loopback</span><br></pre></td></tr></table></figure>

<p>这里假设 v4l2loopback 创建的设备是 <code>/dev/video1</code></p>
<p>ref:</p>
<ul>
<li><a href="https://github.com/umlaeute/v4l2loopback" target="_blank" rel="noopener">v4l2loopback</a></li>
<li><a href="https://forums.developer.nvidia.com/t/jetpack-4-2-1-building-v4l2loopback-fails/79201" target="_blank" rel="noopener">Jetpack 4.2.1 : building v4l2loopback fails</a></li>
</ul>
<h2 id="build-rtsp-server"><a href="#build-rtsp-server" class="headerlink" title="build rtsp server"></a>build rtsp server</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgstrtspserver-1.0 libgstreamer1.0-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GStreamer/gst-rtsp-server.git</span><br><span class="line"><span class="built_in">cd</span> gst-rtsp-server/</span><br><span class="line">git checkout 1.14</span><br><span class="line"><span class="built_in">cd</span> examples/</span><br><span class="line">gcc <span class="built_in">test</span>-launch.c -o <span class="built_in">test</span>-launch $(pkg-config --cflags --libs gstreamer-1.0 gstreamer-rtsp-server-1.0)</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>往 <code>/dev/video1</code>写入数据</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">out = cv2.VideoWriter(<span class="string">"appsrc ! videoconvert ! video/x-raw,format=BGRx ! identity drop-allocation=true ! v4l2sink device=/dev/video1"</span>,</span><br><span class="line">                      <span class="number">0</span>, framerate, (<span class="number">640</span>, <span class="number">360</span>))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    out.write(frame)</span><br></pre></td></tr></table></figure>

<h2 id="start-rtsp-server"><a href="#start-rtsp-server" class="headerlink" title="start rtsp server"></a>start rtsp server</h2><p><code>./test-launch &quot;v4l2src device=/dev/video1 ! nvvidconv ! nvv4l2h265enc ! h265parse ! rtph265pay name=pay0 pt=96 config-interval=1 &quot;</code></p>
<p>ref: <a href="https://forums.developer.nvidia.com/t/rtsp-streaming-with-cv-videowriter/111686" target="_blank" rel="noopener">RTSP streaming with cv::VideoWriter</a></p>
]]></content>
      <tags>
        <tag>opencv</tag>
        <tag>rtsp</tag>
        <tag>GStreamer</tag>
      </tags>
  </entry>
  <entry>
    <title>ModuleNotFoundError: No module named &#39;IPython.core.profiledir&#39;</title>
    <url>/sundries/2020/10/21/ModuleNotFoundError-No-module-named-IPython-core-profiledir/</url>
    <content><![CDATA[<p>打开某个内核的notebook出现以下错误：</p>
<p><code>ModuleNotFoundError: No module named &#39;IPython.core.profiledir&#39;</code></p>
<p>解决方法：</p>
<p>在出错的内核中，执行以下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall ipython</span><br><span class="line">pip install ipython</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>git remote add</title>
    <url>/sundries/2020/10/20/git-remote-add/</url>
    <content><![CDATA[<p>git 添加远程</p>
<p>eg:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add z14 https://github.com/z14git/repo.git</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://docs.github.com/cn/free-pro-team@latest/github/using-git/adding-a-remote" target="_blank" rel="noopener">添加远程</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>fix ImportError: IProgress not found.</title>
    <url>/sundries/2020/09/22/fix-ImportError-IProgress-not-found/</url>
    <content><![CDATA[<p>执行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">conda install -n base -c conda-forge widgetsnbextension</span><br><span class="line">conda install -n py36 -c conda-forge ipywidgets</span><br></pre></td></tr></table></figure>

<p>ps: <code>py36</code>是实际要运行notebook的内核</p>
<blockquote>
<p>ref: <a href="https://ipywidgets.readthedocs.io/en/stable/user_install.html" target="_blank" rel="noopener">Installation</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>jupyter</tag>
        <tag>ipywidgets</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Anaconda with proxy</title>
    <url>/sundries/2020/09/16/Using-Anaconda-with-proxy/</url>
    <content><![CDATA[<p>在<code>.condarc</code>文件中添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_servers:</span><br><span class="line">    http: socks5:&#x2F;&#x2F;127.0.0.1:10808</span><br><span class="line">    https: socks5:&#x2F;&#x2F;127.0.0.1:10808</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref:<br>    - <a href="https://tomaxent.com/2018/05/17/Anaconda-uses-socket-proxy-on-Windows-10/" target="_blank" rel="noopener">Anaconda uses socket proxy on Windows 10</a><br>    - <a href="https://docs.anaconda.com/anaconda/user-guide/tasks/proxy/" target="_blank" rel="noopener">Using Anaconda behind a company proxy</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>how to remove cards at the end of youtube video</title>
    <url>/sundries/2020/09/13/how-to-remove-cards-at-the-end-of-youtube-video/</url>
    <content><![CDATA[<p>在adblock中添加filter(当前位置：Setting-&gt;Customize-&gt;Manually edit your filters)：</p>
<pre><code>www.youtube.com##.ytp-ce-element</code></pre><blockquote>
<p>ref: <a href="https://www.reddit.com/r/youtube/comments/5owodn/tip_how_to_block_youtube_end_screen_video_ad_the/" target="_blank" rel="noopener">Tip: How to block youtube end screen video ad, the new youtube feature.</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>youtube</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取dtype为string的tf.tensor的string值</title>
    <url>/sundries/2020/07/22/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96dtype%E4%B8%BAstring%E7%9A%84tf.tensor%E7%9A%84string%E5%80%BC/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">AUTOTUNE = tf.data.experimental.AUTOTUNE</span><br><span class="line">list_ds = tf.data.Dataset.list_files(<span class="string">"dataset_xy/*.jpg"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_x</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="string">"""Gets the x value from the image filename"""</span></span><br><span class="line">    <span class="keyword">return</span> tf.strings.to_number(file_name.numpy()[<span class="number">3</span>:<span class="number">6</span>], tf.float32) / <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_label</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    file_name = tf.strings.split(file_path, os.path.sep)[<span class="number">-1</span>]</span><br><span class="line">    x = tf.py_function(func=get_x,inp=[file_name],Tout=tf.float32)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_path</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    label = get_label(file_path)</span><br><span class="line">    <span class="keyword">return</span> label</span><br><span class="line"></span><br><span class="line">train_ds = list_ds.map(process_path, num_parallel_calls=AUTOTUNE)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://stackoverflow.com/questions/56122670/how-to-get-string-value-out-of-tf-tensor-which-dtype-is-string" target="_blank" rel="noopener">how to get string value out of tf.tensor which dtype is string</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>tensorflow</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>创建trt模型时，出现core dumped</title>
    <url>/sundries/2020/07/17/%E5%88%9B%E5%BB%BAtrt%E6%A8%A1%E5%9E%8B%E6%97%B6-%E5%87%BA%E7%8E%B0core-dumped/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><ul>
<li>JetPack4.4</li>
</ul>
<p>使用这份<a href="https://github.com/tensorflow/tensorrt/blob/r1.14%2B/tftrt/examples/object_detection/object_detection.py" target="_blank" rel="noopener">代码</a></p>
<p>在优化模型时，若<code>force_nms_cpu</code>为<code>True</code>，则会出现core dumped</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>方法1：</p>
<p>修改<a href="https://github.com/tensorflow/tensorrt/blob/r1.14%2B/tftrt/examples/object_detection/graph_utils.py" target="_blank" rel="noopener">graph_utils.py</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def force_nms_cpu(frozen_graph):</span><br><span class="line">    for node in frozen_graph.node:</span><br><span class="line">        if &#39;NonMaxSuppression&#39; in node.name:</span><br><span class="line">-             node.device &#x3D; &#39;&#x2F;device:CPU:0&#39;</span><br><span class="line">+             node.device &#x3D; &#39;&#x2F;job:localhost&#x2F;replica:0&#x2F;task:0&#x2F;device:CPU:0&#39;</span><br><span class="line">    return frozen_graph</span><br></pre></td></tr></table></figure>

<p>方法2：</p>
<p>不开启<code>force_nms_cpu</code></p>
<p>ref:</p>
<ul>
<li><a href="https://github.com/tensorflow/tensorrt/issues/107" target="_blank" rel="noopener">when force_nms_cpu is true and use_trt is true, will be core dumped</a></li>
<li><a href="https://github.com/dataplayer12/homesecurity/issues/6" target="_blank" rel="noopener">Tensorflow Model issue</a></li>
</ul>
]]></content>
      <tags>
        <tag>tensorflow</tag>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu开机自动挂载磁盘</title>
    <url>/sundries/2020/07/15/ubuntu%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BD%E7%A3%81%E7%9B%98/</url>
    <content><![CDATA[<h2 id="格式化磁盘"><a href="#格式化磁盘" class="headerlink" title="格式化磁盘"></a>格式化磁盘</h2><p>用Gparted</p>
<h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><p>mkdir ~/data</p>
<h2 id="设置开机自动挂载"><a href="#设置开机自动挂载" class="headerlink" title="设置开机自动挂载"></a>设置开机自动挂载</h2><h3 id="查询硬盘分区对应的UUID"><a href="#查询硬盘分区对应的UUID" class="headerlink" title="查询硬盘分区对应的UUID"></a>查询硬盘分区对应的UUID</h3><p>eg:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo blkid /dev/sda1</span><br></pre></td></tr></table></figure>

<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p><code>sudo vim /etc/fstab</code></p>
<p>增加一行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UUID&#x3D;d765d835-4989-4bff-8ae8-116c654d4bba   &#x2F;home&#x2F;z14git&#x2F;data  ext4    defaults    0   2</span><br></pre></td></tr></table></figure>

<p>第一个数字：0表示开机不检查磁盘，1表示开机检查磁盘；<br>第二个数字：0表示交换分区，1代表启动分区（Linux），2表示普通分区</p>
<p>最后，执行<code>sudo mount -a</code>自动挂载</p>
<h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>这种方法挂载后，普通用户是不能写的，暂时的解决办法是执行 <code>sudo chmod 777 ~/data</code></p>
<p>ref:</p>
<ul>
<li><a href="https://blog.csdn.net/qq_35451572/article/details/79541106" target="_blank" rel="noopener">Ubuntu 磁盘挂载——开机自动挂载</a></li>
<li><a href="https://blog.csdn.net/qq_29729577/article/details/52057629" target="_blank" rel="noopener">Ubuntu系统挂载新硬盘方法</a></li>
<li><a href="https://blog.csdn.net/ls20121006/article/details/78665718" target="_blank" rel="noopener">Linux 下挂载新硬盘以及更改为普通权限</a></li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV: libgomp.so.1: cannot allocate memory in static TLS block</title>
    <url>/sundries/2020/07/15/OpenCV-libgomp-so-1-cannot-allocate-memory-in-static-TLS-block/</url>
    <content><![CDATA[<p>在测试TF2的OD API时，<code>import cv2</code>出现以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ImportError: /usr/lib/aarch64-linux-gnu/libgomp.so.1: cannot allocate memory in static TLS block</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>将<code>import cv2</code>放在前面（应该在<code>import tensorflow</code>前就可以了）</p>
<p>ref: <a href="https://github.com/opencv/opencv/issues/14884" target="_blank" rel="noopener">aarch64: libgomp.so.1: cannot allocate memory in static TLS block</a></p>
]]></content>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 10 每次登陆都清除所有用户设置?</title>
    <url>/sundries/2020/06/18/windows-10-%E6%AF%8F%E6%AC%A1%E7%99%BB%E9%99%86%E9%83%BD%E6%B8%85%E9%99%A4%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="症状："><a href="#症状：" class="headerlink" title="症状："></a>症状：</h2><blockquote>
<p>My Windows 10 system has suddenly started doing something really weird. Every time I log in, I see a “Preparing Windows” message, and once I am logged in, I see that all of my settings are gone. By that I mean:</p>
<ul>
<li>The desktop background has been reset to the default one (with the Windows logo)</li>
<li>All of my pinned taskbar shortcuts are gone</li>
<li>All my accounts in Google Chrome are gone</li>
<li>My custom regional settings are gone</li>
<li>My installed keyboard layouts are gone</li>
<li>All applications act like it is the first time running them (no applications seem to have been uninstalled)</li>
</ul>
<p>The current Windows 10 build number is 10.0.10586. A couple of days ago, I set things up so that I would receive Insider builds as they came out, but to the best of my knowledge, no updates have been installed yet.</p>
</blockquote>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><blockquote>
<p>I have seen this before. Windows loads an empty profile instead of the existing one, something previously seen with Windows 7, and now Windows 10 as well, but the operating system has not changed that much in this aspect.</p>
<p>One thing that can work is removing the affected profile from the profile list in the registry:</p>
<ul>
<li>HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList</li>
</ul>
<p>The problem profile will have two folders starting with the same GUID, one with a .bak extension and one without. Rename the one without the .bak extension to something else (add a .tmp extension, for example), then remove the .bak extension from the one that has it (which has your correct profile settings).</p>
<p>Reboot and log in as you normally would. Your settings should be back to normal. This “problem” is described in full in this blog post:</p>
<p><a href="http://www.landviser.net/content/how-fix-windows-7-loads-default-instead-user-modified-profile-wiping-all-settings-files" target="_blank" rel="noopener">How to fix: Windows 7 loads default instead of user-modified profile wiping off all settings, files, email accounts, bookmarks</a></p>
</blockquote>
<blockquote>
<p>ref: <a href="https://www.howtogeek.com/256956/why-has-windows-10-erased-all-my-settings-every-time-i-sign-in/" target="_blank" rel="noopener">Why Has Windows 10 “Erased” All My Settings Every Time I Sign In?</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo Error: Spawn failed</title>
    <url>/sundries/2020/06/14/hexo-Error-Spawn-failed/</url>
    <content><![CDATA[<p>今天，deploy到github上时出现以下错误：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (D:\repositories\z14_sundries\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (events.js:311:20)</span><br><span class="line">    at ChildProcess.cp.emit (D:\repositories\z14_sundries\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (internal/child_process.js:275:12)</span><br></pre></td></tr></table></figure>

<p>由于gitee那边没有问题，所以猜想是因为github设置了代理，但代理没开，导致错误。<br>于是取消了github的代理，重新deploy，结果成功了。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install jupyter in Termux</title>
    <url>/sundries/2020/06/14/how-to-install-jupyter-in-Termux/</url>
    <content><![CDATA[<p>直接<code>pip install jupyter</code>，可能会在安装<code>pyzmq</code>时出错。<br>因此，需要先<code>pkg install libzmq</code>。</p>
<p>安装完后</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jupyter lab --generate-config</span><br><span class="line">python -c <span class="string">"from notebook.auth.security import set_password; set_password('z14git', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br></pre></td></tr></table></figure>

<p>用nano修改<code>~/.jupyter/jupyter_notebook_config.py</code></p>
<p>增加以下内容：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">'*'</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>termux</tag>
      </tags>
  </entry>
  <entry>
    <title>how to install matplotlib in Termux</title>
    <url>/sundries/2020/06/14/how-to-install-matplotlib-in-Termux/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkg install python clang freetype libpng</span><br><span class="line">pip install cython</span><br><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://wiki.termux.com/wiki/Instructions_for_installing_python_packages" target="_blank" rel="noopener">Instructions for installing python packages</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>android</tag>
        <tag>termux</tag>
      </tags>
  </entry>
  <entry>
    <title>jetson nano 如何使用摄像头</title>
    <url>/sundries/2020/05/27/jetson-nano-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</url>
    <content><![CDATA[<p>For using this example on a USB camera:</p>
<p>Test capability of your camera:</p>
<p><code>v4l2-ctl --list-formats-ext --device=0</code></p>
<p>Now you will want to test the camera with gstreamer:</p>
<p><code>gst-launch-1.0 v4l2src device=/dev/video0 ! video/x-raw,format=YUY2,width=320, height=240, framerate=30/1 ! xvimagesink</code></p>
<p>or if you have mjpeg camera</p>
<p><code>gst-launch-1.0 v4l2src device=/dev/video0 ! image/jpeg, width=320, height=240, type=video, framerate=61612/513 ! jpegdec ! xvimagesink</code></p>
<p>and finally</p>
<p><code>gst-launch-1.0 v4l2src device=/dev/video0 ! image/jpeg, width=1280,height=720, type=video, framerate=61612/513 ! jpegdec ! videoconvert ! video/x-raw, format=BGR ! xvimagesink</code></p>
<p>then you can change the code in the python program to your working settings such as (make sure you fix the text format idents):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_jetson_gstreamer_source</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="string">'v4l2src device=/dev/video0 ! image/jpeg, width=(int)640, height=(int)480, type=video, framerate=(fraction)61612/513 ! '</span> +</span><br><span class="line"><span class="string">' jpegdec ! '</span> +</span><br><span class="line"><span class="string">'videoconvert ! video/x-raw, format=(string)BGR ! appsink'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="https://gist.github.com/ageitgey/84943a12dd0d9f54e90f824b94e4c2a9#gistcomment-2969024" target="_blank" rel="noopener">doorbell_camera.py</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu在终端下弹出U盘</title>
    <url>/sundries/2020/05/27/ubuntu%E5%9C%A8%E7%BB%88%E7%AB%AF%E4%B8%8B%E5%BC%B9%E5%87%BAU%E7%9B%98/</url>
    <content><![CDATA[<p>要弹出U盘可以这样，假设sda1是U盘（可用<code>df -h</code>查看）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo eject -s /dev/sda1</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 如何支持exFAT</title>
    <url>/sundries/2020/05/27/ubuntu-%E5%A6%82%E4%BD%95%E6%94%AF%E6%8C%81exFAT/</url>
    <content><![CDATA[<p><code>sudo apt-get install exfat-fuse exfat-utils</code></p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>build log about jetson nano image based on jp4.3</title>
    <url>/sundries/2020/05/18/build-jetson-nano-image-based-on-jp4-3/</url>
    <content><![CDATA[<h2 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h2><p>下载jp4.3的<a href="https://developer.nvidia.com/jetson-nano-sd-card-imager-3231" target="_blank" rel="noopener">镜像</a>，<br>解压并用balenaEtcher烧录到SD卡</p>
<h2 id="oem-config"><a href="#oem-config" class="headerlink" title="oem-config"></a>oem-config</h2><p>SD卡插入到Jetson Nano上，上电。</p>
<p>用USB线连接Jetson Nano，电脑用终端工具打开串口访问Jetson Nano。</p>
<p>根据终端工具上显示的信息完成首次启动的配置。</p>
<p>wifi可以稍后用<code>sudo nmtui</code>配置。</p>
<h2 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h2><p>以下命令均在Jetson Nano上执行</p>
<h3 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install proxychains</span><br><span class="line">sudo vim /etc/proxychains.conf <span class="comment">#修改代理地址</span></span><br></pre></td></tr></table></figure>

<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>卸载多余应用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge libreoffice*</span><br><span class="line">sudo apt-get purge thunderbird*</span><br></pre></td></tr></table></figure>

<p>最高性能模式</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nvpmodel -m 0</span><br><span class="line">sudo jetson_clocks</span><br></pre></td></tr></table></figure>

<h3 id="Install-system-level-dependencies"><a href="#Install-system-level-dependencies" class="headerlink" title="Install system-level dependencies"></a>Install system-level dependencies</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install git cmake</span><br><span class="line">sudo proxychains apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo proxychains apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo proxychains apt-get install python3-dev</span><br><span class="line">sudo proxychains apt-get install nano locate</span><br></pre></td></tr></table></figure>

<p>Next, we’ll install SciPy prerequisites (gathered from NVIDIA’s devtalk forums) and a system-level Cython library:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo proxychains apt-get install protobuf-compiler libprotobuf-dev openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个在装npm时会被卸载，所以应该不用装</span></span><br><span class="line">sudo proxychains apt-get install libssl-dev libcurl4-openssl-dev</span><br><span class="line">sudo proxychains apt-get install cython3</span><br></pre></td></tr></table></figure>

<p>We also need a few XML tools for working with TensorFlow Object Detection (TFOD) API projects:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install libxml2-dev libxslt1-dev</span><br></pre></td></tr></table></figure>

<h3 id="Update-CMake"><a href="#Update-CMake" class="headerlink" title="Update CMake"></a>Update CMake</h3><p>Now we’ll update the CMake precompiler tool as we need a newer version in order to successfully compile OpenCV.</p>
<p>First, download and extract the CMake update:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget http://www.cmake.org/files/v3.13/cmake-3.13.0.tar.gz</span><br><span class="line">tar xpvf cmake-3.13.0.tar.gz cmake-3.13.0/</span><br></pre></td></tr></table></figure>

<p>Next, compile CMake:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> cmake-3.13.0/</span><br><span class="line">./bootstrap --system-curl</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure>

<p>And finally, update your bash profile:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将jetson替换为你的用户名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/home/jetson/cmake-3.13.0/bin/:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h3 id="Install-OpenCV-system-level-dependencies-and-other-development-dependencies"><a href="#Install-OpenCV-system-level-dependencies-and-other-development-dependencies" class="headerlink" title="Install OpenCV system-level dependencies and other development dependencies"></a>Install OpenCV system-level dependencies and other development dependencies</h3><p>Let’s now install OpenCV dependecies on our system beginning with tools needed to build and compile OpenCV with parallelism:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install build-essential pkg-config</span><br><span class="line">sudo proxychains apt-get install libtbb2 libtbb-dev</span><br></pre></td></tr></table></figure>

<p>Next, we’ll install a handful of codecs and image libraries:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo proxychains apt-get install libxvidcore-dev libavresample-dev</span><br><span class="line">sudo proxychains apt-get install libtiff-dev libjpeg-dev libpng-dev</span><br></pre></td></tr></table></figure>

<p>And then we’ll install a selection of GUI libraries:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install python-tk libgtk-3-dev</span><br><span class="line">sudo proxychains apt-get install libcanberra-gtk-module libcanberra-gtk3-module</span><br></pre></td></tr></table></figure>

<p>Lastly, we’ll install Video4Linux (V4L) so that we can work with USB webcams and install a library for FireWire cameras:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install libv4l-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure>

<h3 id="Set-up-Python-virtual-environments-on-your-Jetson-Nano"><a href="#Set-up-Python-virtual-environments-on-your-Jetson-Nano" class="headerlink" title="Set up Python virtual environments on your Jetson Nano"></a>Set up Python virtual environments on your Jetson Nano</h3><p>First, we’ll install the de facto Python package management tool, pip:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo -H proxychains python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br></pre></td></tr></table></figure>

<p>And then we’ll install my favorite tools for managing virtual environments, virtualenv and virtualenvwrapper:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure>

<p>The virtualenvwrapper tool is not fully installed until you add information to your bash profile. Go ahead and open up your ~/.bashrc with the nano ediitor:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># virtualenv and virtualenvwrapper</span><br><span class="line">export WORKON_HOME&#x3D;$HOME&#x2F;.virtualenvs</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenv</span><br><span class="line">source &#x2F;usr&#x2F;local&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>

<p>Save and exit the file using the keyboard shortcuts shown at the bottom of the nano editor, and then load the bash profile to finish the virtualenvwrapper installation:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="Create-your-‘cv’-virtual-environment"><a href="#Create-your-‘cv’-virtual-environment" class="headerlink" title="Create your ‘cv’ virtual environment"></a>Create your ‘cv’ virtual environment</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv cv -p python3</span><br><span class="line">workon cv</span><br></pre></td></tr></table></figure>

<h3 id="Install-the-Protobuf-Compiler"><a href="#Install-the-Protobuf-Compiler" class="headerlink" title="Install the Protobuf Compiler"></a>Install the Protobuf Compiler</h3><p>TensorFlow’s performance can be significantly impacted (in a negative way) if an efficient implementation of protobuf and libprotobuf are not present.</p>
<p>When we pip-install TensorFlow, it automatically installs a version of protobuf that might not be the ideal one. The issue with slow TensorFlow performance has been detailed in this NVIDIA Developer forum.</p>
<p>First, download and install an efficient implementation of the protobuf compiler (source):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget https://raw.githubusercontent.com/z14git/jetson_nano/tf1.15/install_protobuf-3.9.2.sh</span><br><span class="line">sudo chmod +x install_protobuf-3.9.2.sh</span><br><span class="line">./install_protobuf-3.9.2.sh</span><br></pre></td></tr></table></figure>

<p>这大概要装一个多小时</p>
<p>Once protobuf is installed on your system, you need to install it inside your virtual environment:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">cp -r ~/src/protobuf-3.9.2/python/ .</span><br><span class="line"><span class="built_in">cd</span> python</span><br><span class="line">proxychains python setup.py install --cpp_implementation</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h3 id="Install-TensorFlow-NumPy"><a href="#Install-TensorFlow-NumPy" class="headerlink" title="Install TensorFlow, NumPy"></a>Install TensorFlow, NumPy</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">sudo proxychains apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line"></span><br><span class="line">proxychains pip install -U numpy grpcio absl-py py-cpuinfo psutil portpicker six mock requests gast h5py astor termcolor protobuf keras-applications keras-preprocessing wrapt google-pasta</span><br></pre></td></tr></table></figure>

<p>执行上面的指令可能会遇到这个问题:</p>
<p><code>ERROR: Could not build wheels for numpy which use PEP 517 and cannot be installed directly.</code></p>
<p>If you come across that message, then follow these additional steps. First, install NumPy with super user privileges:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains pip install numpy</span><br></pre></td></tr></table></figure>

<p>Then, create a symbolic link from your system’s NumPy into your virtual environment site-packages. To be able to do that you would need the installation path of <code>numpy</code>, which can be found out by issuing a NumPy uninstall command, and then canceling it as follows:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo pip uninstall numpy</span><br><span class="line">Uninstalling numpy-1.18.1:</span><br><span class="line">  Would remove:</span><br><span class="line">    /usr/bin/f2py</span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/f2py</span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/f2py3</span><br><span class="line">    /usr/<span class="built_in">local</span>/bin/f2py3.6</span><br><span class="line">    /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/numpy-1.18.1.dist-info/*</span><br><span class="line">    /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/numpy/*</span><br><span class="line">Proceed (y/n)? n</span><br></pre></td></tr></table></figure>

<p><strong>Note that you should type <code>n</code> at the prompt because we do not want to proceed with uninstalling NumPy</strong>. Then, note down the installation path (highlighted), and execute the following commands (replacing the paths as needed):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line"><span class="comment"># 或者将dist-info也加上更好</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/numpy numpy</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>At this point, NumPy is sym-linked into your virtual environment. We should quickly test it as NumPy is needed for the remainder of this tutorial. Issue the following commands in a terminal:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ workon cv</span><br><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import numpy</span><br></pre></td></tr></table></figure>

<p>numpy没问题后重新执行上一次的指令,但省略numpy,最好清清缓存再执行,grpcio和h5py可能要装几十分钟</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -r ~/.cache</span><br><span class="line">proxychains pip install grpcio</span><br><span class="line">proxychains pip install absl-py</span><br><span class="line">proxychains pip install py-cpuinfo psutil portpicker six mock requests h5py astor termcolor protobuf keras-applications keras-preprocessing wrapt google-pasta</span><br><span class="line"></span><br><span class="line">proxychains pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v43 tensorflow==1.15.2+nv20.3</span><br></pre></td></tr></table></figure>

<h3 id="安装PyTorch"><a href="#安装PyTorch" class="headerlink" title="安装PyTorch"></a>安装PyTorch</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains wget https://nvidia.box.com/shared/static/ncgzus5o23uck9i5oth2n8n06k340l6k.whl -O torch-1.4.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">sudo proxychains apt-get install libopenblas-base libopenmpi-dev</span><br><span class="line">proxychains pip install Cython</span><br><span class="line">proxychains pip install torch-1.4.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line">sudo proxychains apt-get install libjpeg-dev zlib1g-dev</span><br><span class="line">proxychains git <span class="built_in">clone</span> --branch v0.5.0 https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line">proxychains pip install pillow</span><br><span class="line">proxychains python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>

<h3 id="Install-exFAT-Support"><a href="#Install-exFAT-Support" class="headerlink" title="Install exFAT Support"></a>Install exFAT Support</h3><p>方便用U盘复制文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install exfat-fuse exfat-utils</span><br></pre></td></tr></table></figure>

<h3 id="Install-the-TensorFlow-Object-Detection-API-on-Jetson-Nano"><a href="#Install-the-TensorFlow-Object-Detection-API-on-Jetson-Nano" class="headerlink" title="Install the TensorFlow Object Detection API on Jetson Nano"></a>Install the TensorFlow Object Detection API on Jetson Nano</h3><p>在电脑上下载<a href="https://codeload.github.com/tensorflow/models/zip/5f4d34fc982f599c105e152819fc3b7c82c92960" target="_blank" rel="noopener">https://codeload.github.com/tensorflow/models/zip/5f4d34fc982f599c105e152819fc3b7c82c92960</a></p>
<p>PS: 这个提交取自<a href="https://github.com/NVIDIA-AI-IOT/jetcard/blob/4278b7790893517e5a7cbd2e12a72dba968ff8cf/install.sh#L121" target="_blank" rel="noopener">此处</a></p>
<p>复制models-5f4d34fc982f599c105e152819fc3b7c82c92960.zip到U盘，<br>通过U盘复制文件到Jetson Nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> /media/&lt;U盘&gt;</span><br><span class="line">cp models-5f4d34fc982f599c105e152819fc3b7c82c92960.zip ~/model.zip</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip model.zip</span><br><span class="line">mv models-5f4d34fc982f599c105e152819fc3b7c82c92960/ models/</span><br></pre></td></tr></table></figure>

<p>要弹出U盘可以这样，sda1是U盘（可用<code>df -h</code>查看）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo eject -s /dev/sda1</span><br></pre></td></tr></table></figure>

<p>安装coco api</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains git <span class="built_in">clone</span> https://github.com/cocodataset/cocoapi.git</span><br><span class="line"><span class="built_in">cd</span> cocoapi/PythonAPI</span><br><span class="line">proxychains python setup.py install</span><br></pre></td></tr></table></figure>

<p>The next step is to compile the Protobuf libraries used by the TFOD API. The Protobuf libraries enable us (and therefore the TFOD API) to serialize structured data in a language-agnostic way:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> ~/models/research/</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">proxychains python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">proxychains python setup.py install</span><br></pre></td></tr></table></figure>

<h3 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h3 id="Install-OpenCV-4-1-2-on-Jetson-Nano"><a href="#Install-OpenCV-4-1-2-on-Jetson-Nano" class="headerlink" title="Install OpenCV 4.1.2 on Jetson Nano"></a>Install OpenCV 4.1.2 on Jetson Nano</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains wget -O opencv.zip https://github.com/opencv/opencv/archive/4.1.2.zip</span><br><span class="line">proxychains wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.1.2.zip</span><br><span class="line"></span><br><span class="line">unzip opencv.zip</span><br><span class="line">unzip opencv_contrib.zip</span><br><span class="line">mv opencv-4.1.2 opencv</span><br><span class="line">mv opencv_contrib-4.1.2 opencv_contrib</span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> opencv</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">proxychains cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">	-D WITH_CUDA=ON \</span><br><span class="line">	-D CUDA_ARCH_PTX=<span class="string">""</span> \</span><br><span class="line">	-D CUDA_ARCH_BIN=<span class="string">"5.3,6.2,7.2"</span> \</span><br><span class="line">	-D WITH_CUBLAS=ON \</span><br><span class="line">	-D WITH_LIBV4L=ON \</span><br><span class="line">	-D BUILD_opencv_python3=ON \</span><br><span class="line">	-D BUILD_opencv_python2=OFF \</span><br><span class="line">	-D BUILD_opencv_java=OFF \</span><br><span class="line">	-D WITH_GSTREAMER=ON \</span><br><span class="line">	-D WITH_GTK=ON \</span><br><span class="line">	-D BUILD_TESTS=OFF \</span><br><span class="line">	-D BUILD_PERF_TESTS=OFF \</span><br><span class="line">	-D BUILD_EXAMPLES=OFF \</span><br><span class="line">	-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">	-D OPENCV_EXTRA_MODULES_PATH=/home/jetson/opencv_contrib/modules ..</span><br><span class="line"></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>Then, we need to create a symbolic link from OpenCV’s installation directory to the virtual environment. A symbolic link is like a pointer in that a special operating system file points from one place to another on your computer (in this case our Nano). Let’s create the sym-link now:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line"><span class="comment"># 下面的地址要先检测一下</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so cv2.so</span><br></pre></td></tr></table></figure>

<h3 id="Install-traitlets-master-to-support-the-unlink-method"><a href="#Install-traitlets-master-to-support-the-unlink-method" class="headerlink" title="Install traitlets (master, to support the unlink() method)"></a>Install traitlets (master, to support the unlink() method)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains python -m pip install git+https://github.com/ipython/traitlets@master</span><br></pre></td></tr></table></figure>

<h3 id="Install-Jupyter-Lab"><a href="#Install-Jupyter-Lab" class="headerlink" title="Install Jupyter Lab"></a>Install Jupyter Lab</h3><p>其实不应该在cv下装的！</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">sudo proxychains apt-get install nodejs-dev node-gyp libssl1.0-dev</span><br><span class="line">sudo proxychains apt install -y nodejs npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下步骤最好不要执行</span></span><br><span class="line">proxychains pip install jupyter jupyterlab</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python -c <span class="string">"from notebook.auth.security import set_password; set_password('jetson', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br></pre></td></tr></table></figure>

<p>在系统中安装jupyter lab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment"># 在cv中运行过jupyter lab要删除下面的文件夹</span></span><br><span class="line">rm -r .ipython/</span><br><span class="line">rm -r .jupyter</span><br><span class="line">sudo -H proxychains pip3 install jupyter jupyterlab</span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('jetson', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br></pre></td></tr></table></figure>

<p>解决ipywidgets不能正常显示的问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains jupyter labextension install @jupyter-widgets/jupyterlab-manager</span><br></pre></td></tr></table></figure>

<p>上面的命令可能会出现以下错误：</p>
<p><code>ValueError: Please install nodejs &gt;=10.0.0 before continuing. nodejs may be installed using conda or directly from the nodejs website.</code></p>
<p>解决方法，更新<code>nodejs</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget https://nodejs.org/dist/v12.16.3/node-v12.16.3-linux-arm64.tar.xz</span><br><span class="line">tar -xvf node-v12.16.3-linux-arm64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> node-v12.16.3-linux-arm64</span><br><span class="line">sudo cp -R * /usr/<span class="built_in">local</span>/</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>更新nodejs后，重新执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains jupyter labextension install @jupyter-widgets/jupyterlab-manager</span><br></pre></td></tr></table></figure>

<p>这次可能会出现以下错误：</p>
<p><code>ValueError: &quot;@jupyter-widgets/jupyterlab-manager&quot; is not a valid npm package</code></p>
<p>下载ipywidgets源码安装即可：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改npm下载镜像</span></span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:$(id -gn <span class="variable">$USER</span>) /home/jetson/.config</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># proxychains git clone https://github.com/jupyter-widgets/ipywidgets.git</span></span><br><span class="line"><span class="comment"># cd ipywidgets/packages/jupyterlab-manager</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains wget https://github.com/jupyter-widgets/ipywidgets/archive/@jupyter-widgets/jupyterlab-manager@2.0.0.zip</span><br><span class="line">unzip jupyterlab-manager@2.0.0.zip</span><br><span class="line">mv ipywidgets--jupyter-widgets-jupyterlab-manager-2.0.0 ipywidgets2.0</span><br><span class="line"><span class="built_in">cd</span> ipywidgets2.0/packages/jupyterlab-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的指令用sock5代理执行会出错</span></span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">sudo jupyter labextension link .</span><br></pre></td></tr></table></figure>

<p>在cv中安装ipykernel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deactivate</span><br><span class="line">jupyter lab --ip=0.0.0.0 --no-browser</span><br></pre></td></tr></table></figure>

<p>修改notebook目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"><span class="comment"># 实际可以不修改</span></span><br><span class="line">vim ~/.jupyter/jupyter_notebook_config.py</span><br></pre></td></tr></table></figure>

<p>增加以下内容：</p>
<p><code>c.NotebookApp.notebook_dir = &#39;/home/jetson/Tutorials&#39;</code></p>
<p>创建自动启动服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line"></span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials --output fro_jupyter.service</span><br><span class="line">sudo mv fro_jupyter.service /etc/systemd/system/fro_jupyter.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> fro_jupyter</span><br><span class="line">sudo systemctl start fro_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br></pre></td></tr></table></figure>

<h3 id="fix-for-Traitlet-permission-error"><a href="#fix-for-Traitlet-permission-error" class="headerlink" title="fix for Traitlet permission error"></a>fix for Traitlet permission error</h3><p>sudo chown -R jetson:jetson ~/.local/share/</p>
<h3 id="安装JetCam"><a href="#安装JetCam" class="headerlink" title="安装JetCam"></a>安装JetCam</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line">workon cv</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h3 id="安装pandas"><a href="#安装pandas" class="headerlink" title="安装pandas"></a>安装pandas</h3><p>创建object detect数据集时会用到，大概需要几十分钟</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains pip install pandas</span><br></pre></td></tr></table></figure>

<p>安装失败，之后尝试执行<code>sudo proxychains apt-get install python-pandas</code>没有反应</p>
<p>测试发现，以下指令也没有反应</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt automove</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>

<p>接上显示器后，发现<code>Sotfware &amp; Updates</code>也打开不了。</p>
<p>用<code>dmesg | grep apt</code>查看日志时，发现这样的信息：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">[ 5620.829799] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.832072] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.834376] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.836644] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.836681] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.838935] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.841225] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.844804] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5620.847132] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5621.223173] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5625.832395] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.853068] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.884503] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.888887] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.891077] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.893260] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.895436] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.897635] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5625.899797] EXT4-fs warning (device mmcblk0p1): ext4_dirent_csum_verify:353: inode #26947: comm apt-config: No space for directory leaf checksum. Please run e2fsck -D.</span><br><span class="line">[ 5626.229412] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.229425] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.247977] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-check: Directory block failed checksum</span><br><span class="line">[ 5626.274355] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.277675] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.277682] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.279948] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.282194] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.284396] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br><span class="line">[ 5626.286664] EXT4-fs error (device mmcblk0p1): htree_dirblock_to_tree:963: inode #26947: block 2: comm apt-config: Directory block failed checksum</span><br></pre></td></tr></table></figure>

<p>遂将SD卡用读卡器连接到电脑上，执行<code>sudo fsck -c -y /dev/sdb1</code>修复（<code>/dev/sdb1</code>是SD卡）。</p>
<p>PS: 修复前要不要挂载SD卡</p>
<p>修复完后，之前不能用的程序，现在都正常了，暂时未发现异常。</p>
<p>继续安装pandas</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">sudo proxychains apt-get install python-pandas</span><br><span class="line">proxychains pip install pandas</span><br></pre></td></tr></table></figure>

<h3 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install libzbar0</span><br><span class="line">workon cv</span><br><span class="line">proxychains pip install pyzbar</span><br></pre></td></tr></table></figure>

<h3 id="安装串口库"><a href="#安装串口库" class="headerlink" title="安装串口库"></a>安装串口库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains pip install pyserial</span><br></pre></td></tr></table></figure>

<h3 id="安装modbus-tk"><a href="#安装modbus-tk" class="headerlink" title="安装modbus_tk"></a>安装modbus_tk</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains pip install modbus_tk</span><br></pre></td></tr></table></figure>

<p>使用ttyTHS1作串口通信，需要禁用nvgetty服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br></pre></td></tr></table></figure>

<h3 id="安装crcmod"><a href="#安装crcmod" class="headerlink" title="安装crcmod"></a>安装crcmod</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">proxychains pip install crcmod</span><br></pre></td></tr></table></figure>

<h3 id="安装jtop"><a href="#安装jtop" class="headerlink" title="安装jtop"></a>安装jtop</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">deactivate</span><br><span class="line">sudo proxychains apt-get install python-setuptools</span><br><span class="line">proxychains wget https://github.com/z14git/jetson_stats/archive/aiotlab.zip</span><br><span class="line">unzip aiotlab.zip</span><br><span class="line"><span class="built_in">cd</span> jetson_stats-aiotlab</span><br><span class="line"><span class="comment"># sudo python3 setup.py build</span></span><br><span class="line"><span class="comment"># sudo python3 setup.py install</span></span><br><span class="line"><span class="comment"># 上面2条都会执行失败，用下面这条才成功</span></span><br><span class="line">sudo -H pip install -U .</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">rm aiotlab.zip</span><br><span class="line">sudo rm -r jetson_stats-aiotlab</span><br></pre></td></tr></table></figure>

<h3 id="清除多余文件"><a href="#清除多余文件" class="headerlink" title="清除多余文件"></a>清除多余文件</h3><p>删除HOME目录下的opencv, opencv_contrib, src, python, ipywidgets等比较占空间的文件夹</p>
<p>PS: ipywidgets2.0不要删</p>
<h2 id="tensorrt测试"><a href="#tensorrt测试" class="headerlink" title="tensorrt测试"></a>tensorrt测试</h2><p>复制<code>/usr/src/tensorrt</code>到<code>~/Tutorials</code>目录下</p>
<p>定义一些基础环境变量(暂时未发现用处)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains wget https://github.com/jkjung-avt/jetson_nano/raw/master/install_basics.sh</span><br><span class="line">sh install_basics.sh</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="测试yolov3"><a href="#测试yolov3" class="headerlink" title="测试yolov3"></a>测试yolov3</h3><p>先用proxychains下载yolov3.weights和yolov3.cfg，下载地址见源代码<code>yolov3_to_onnx.py</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> &lt;yolov3_onnx&gt;</span><br><span class="line"><span class="built_in">export</span> CPATH=<span class="variable">$CPATH</span>:/usr/<span class="built_in">local</span>/cuda-10.0/targets/aarch64-linux/include</span><br><span class="line"><span class="built_in">export</span> LIBRARY_PATH=<span class="variable">$LIBRARY_PATH</span>:/usr/<span class="built_in">local</span>/cuda-10.0/targets/aarch64-linux/lib</span><br><span class="line">proxychains python -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>用<code>md5sum &lt;file&gt;</code>检测<code>yolov3.weights</code>和<code>yolov3.cfg</code>是否正确，然后修改<code>yolov3_to_onnx.py</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">diff --git a/yolov3_to_onnx.py b/yolov3_to_onnx.py</span><br><span class="line">index b567e70..1f6bd20 100644</span><br><span class="line"><span class="comment">--- a/yolov3_to_onnx.py</span></span><br><span class="line"><span class="comment">+++ b/yolov3_to_onnx.py</span></span><br><span class="line">@@ -753,14 +753,14 @@ def download_file(local_path, link, checksum_reference=None):</span><br><span class="line"> def main():</span><br><span class="line">     """Run the DarkNet-to-ONNX conversion for YOLOv3-608."""</span><br><span class="line">     # Have to use python 2 due to hashlib compatibility</span><br><span class="line"><span class="deletion">-    if sys.version_info[0] &gt; 2:</span></span><br><span class="line"><span class="deletion">-        raise Exception("This script is only compatible with python2, please re-run this script with python2. The rest of this sample can be run with either version of python.")</span></span><br><span class="line"><span class="addition">+    # if sys.version_info[0] &gt; 2:</span></span><br><span class="line"><span class="addition">+    #     raise Exception("This script is only compatible with python2, please re-run this script with python2. </span></span><br><span class="line">The rest of this sample can be run with either version of python.")</span><br><span class="line"></span><br><span class="line">     # Download the config for YOLOv3 if not present yet, and analyze the checksum:</span><br><span class="line">     cfg_file_path = download_file(</span><br><span class="line">         'yolov3.cfg',</span><br><span class="line">         'https://raw.githubusercontent.com/pjreddie/darknet/f86901f6177dfc6116360a13cc06ab680e0c86b0/cfg/yolov3.cfg',</span><br><span class="line"><span class="deletion">-        'b969a43a848bbf26901643b833cfb96c')</span></span><br><span class="line"><span class="addition">+        None)</span></span><br><span class="line"></span><br><span class="line">     # These are the only layers DarkNetParser will extract parameters from. The three layers of</span><br><span class="line">     # type 'yolo' are not parsed in detail because they are included in the post-processing later:</span><br><span class="line">@@ -789,7 +789,7 @@ def main():</span><br><span class="line">     weights_file_path = download_file(</span><br><span class="line">         'yolov3.weights',</span><br><span class="line">         'https://pjreddie.com/media/files/yolov3.weights',</span><br><span class="line"><span class="deletion">-        'c84e5b99d0e52cd466ae710cadf6d84c')</span></span><br><span class="line"><span class="addition">+        None)</span></span><br><span class="line"></span><br><span class="line">     # Now generate an ONNX graph with weights from the previously parsed layer configurations</span><br><span class="line">     # and the weights file:</span><br></pre></td></tr></table></figure>

<p>执行<code>python yolov3_to_onnx.py</code>失败，在python3上运行还需要继续修改代码，暂时放弃。</p>
<h3 id="安装tf-trt-models"><a href="#安装tf-trt-models" class="headerlink" title="安装tf_trt_models"></a>安装tf_trt_models</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">workon cv</span><br><span class="line">proxychains git <span class="built_in">clone</span> https://github.com/NVIDIA-Jetson/tf_trt_models.git</span><br><span class="line"><span class="built_in">cd</span> tf_trt_models</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="make-tf2-env"><a href="#make-tf2-env" class="headerlink" title="make tf2 env"></a>make tf2 env</h2><p>创建一个新虚拟环境用于tensorflow2</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv tf2 -p python3</span><br><span class="line"><span class="comment"># 在tf2中安装ipykernel</span></span><br><span class="line">workon tf2</span><br><span class="line">proxychains pip install ipykernel</span><br></pre></td></tr></table></figure>

<p>PS: 在<code>workon tf2</code>应该要加上<code>source ~/.bashrc</code></p>
<p>出现以下错误：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: Exception:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/cli/base_command.py", line 188, in _main</span><br><span class="line">    status = self.run(options, args)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/cli/req_command.py", line 185, in wrapper</span><br><span class="line">    return func(self, options, args)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/commands/install.py", line 333, in run</span><br><span class="line">    reqs, check_supported_wheels=not options.target_dir</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/resolution/legacy/resolver.py", line 179, in resolve</span><br><span class="line">    discovered_reqs.extend(self._resolve_one(requirement_set, req))</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/resolution/legacy/resolver.py", line 362, in _resolve_one</span><br><span class="line">    abstract_dist = self._get_abstract_dist_for(req_to_install)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/resolution/legacy/resolver.py", line 314, in _get_abstract_dist_for</span><br><span class="line">    abstract_dist = self.preparer.prepare_linked_requirement(req)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/prepare.py", line 412, in prepare_linked_requirement</span><br><span class="line">    hashes=hashes,</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/prepare.py", line 203, in unpack_url</span><br><span class="line">    unpack_file(file.path, location, file.content_type)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/utils/unpacking.py", line 252, in unpack_file</span><br><span class="line">    flatten=not filename.endswith('.whl')</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/utils/unpacking.py", line 139, in unzip_file</span><br><span class="line">    shutil.copyfileobj(fp, destfp)</span><br><span class="line">  File "/usr/lib/python3.6/shutil.py", line 79, in copyfileobj</span><br><span class="line">    buf = fsrc.read(length)</span><br><span class="line">  File "/usr/lib/python3.6/zipfile.py", line 872, in read</span><br><span class="line">    data = self._read1(n)</span><br><span class="line">  File "/usr/lib/python3.6/zipfile.py", line 948, in _read1</span><br><span class="line">    data = self._decompressor.decompress(data, n)</span><br><span class="line">zlib.error: Error -3 while decompressing data: invalid distance too far back</span><br></pre></td></tr></table></figure>

<p>将numpy软连过来</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/numpy numpy</span><br><span class="line"><span class="comment"># 不应该执行下面这条</span></span><br><span class="line"><span class="comment">#ln -s /usr/local/lib/python3.6/dist-packages/numpy-1.18.1.dist-info numpy-1.18.1.dist-info</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">python -c <span class="string">"import numpy as np;print(np.__version__)"</span></span><br></pre></td></tr></table></figure>

<p>软连cv</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/site-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so cv2.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">python -c <span class="string">"import cv2;print(cv2.__verion__)"</span></span><br></pre></td></tr></table></figure>

<p>第一次执行会显示：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "&lt;string&gt;", line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: module 'cv2' has no attribute '__verion__'</span><br></pre></td></tr></table></figure>

<p>进入python repl环境，<code>import cv2</code>后，输入<code>cv2.</code>然后按tab，之后就正常了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新pip</span></span><br><span class="line">proxychains python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<p>软连pyzmq</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/pyzmq-19.0.1.dist-info pyzmq-19.0.1.dist-info</span><br></pre></td></tr></table></figure>

<p>再次尝试安装ipykernel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">proxychains pip install ipykernel</span><br></pre></td></tr></table></figure>

<p>这次出现以下提示：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: Error checking for conflicts.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3021, in _dep_map</span><br><span class="line">    return self.__dep_map</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2815, in __getattr__</span><br><span class="line">    raise AttributeError(attr)</span><br><span class="line">AttributeError: _DistInfoDistribution__dep_map</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3012, in _parsed_pkg_info</span><br><span class="line">    return self._pkg_info</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2815, in __getattr__</span><br><span class="line">    raise AttributeError(attr)</span><br><span class="line">AttributeError: _pkg_info</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/commands/install.py", line 512, in _warn_about_conflicts</span><br><span class="line">    package_set, _dep_info = check_install_conflicts(to_install)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/check.py", line 114, in check_install_conflicts</span><br><span class="line">    package_set, _ = create_package_set_from_installed()</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/check.py", line 53, in create_package_set_from_installed</span><br><span class="line">    package_set[name] = PackageDetails(dist.version, dist.requires())</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2736, in requires</span><br><span class="line">    dm = self._dep_map</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3023, in _dep_map</span><br><span class="line">    self.__dep_map = self._compute_dependencies()</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3032, in _compute_dependencies</span><br><span class="line">    for req in self._parsed_pkg_info.get_all('Requires-Dist') or []:</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3014, in _parsed_pkg_info</span><br><span class="line">    metadata = self.get_metadata(self.PKG_INFO)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 1895, in get_metadata</span><br><span class="line">    raise KeyError("No metadata except PKG-INFO is available")</span><br><span class="line">KeyError: 'No metadata except PKG-INFO is available'</span><br><span class="line">Installing collected packages: decorator, six, ipython-genutils, traitlets, python-dateutil, jupyter-core, tornado, jupyter-client, ptyprocess, pexpect, wcwidth, prompt-toolkit, backcall, pickleshare, parso, jedi, pygments, ipython, ipykernel</span><br><span class="line">Successfully installed backcall-0.1.0 decorator-4.4.2 ipykernel-5.3.0 ipython-7.14.0 ipython-genutils-0.2.0 jedi-0.17.0 jupyter-client-6.1.3 jupyter-core-4.6.3 parso-0.7.0 pexpect-4.8.0 pickleshare-0.7.5 prompt-toolkit-3.0.5 ptyprocess-0.6.0 pygments-2.6.1 python-dateutil-2.8.1 six-1.14.0 tornado-6.0.4 traitlets-4.3.3 wcwidth-0.1.9</span><br></pre></td></tr></table></figure>

<p>继续执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br></pre></td></tr></table></figure>

<p>会提示：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named 'zmq'</span><br></pre></td></tr></table></figure>

<p>发现pyzmq-19.0.1.dist-info软连错误，修复之</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">rm pyzmq-19.0.1.dist-info</span><br><span class="line">ln -s ~/.virtualenvs/cv/lib/python3.6/site-packages/pyzmq-19.0.1.dist-info pyzmq-19.0.1.dist-info</span><br><span class="line">ln -s ~/.virtualenvs/cv/lib/python3.6/site-packages/zmq zmq</span><br></pre></td></tr></table></figure>

<p>继续尝试安装ipykernel</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">proxychains pip install --upgrade setuptools</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br></pre></td></tr></table></figure>

<p>在执行<code>pip install</code>时会有错误提示：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: Error checking for conflicts.</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3021, in _dep_map</span><br><span class="line">    return self.__dep_map</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2815, in __getattr__</span><br><span class="line">    raise AttributeError(attr)</span><br><span class="line">AttributeError: _DistInfoDistribution__dep_map</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3012, in _parsed_pkg_info</span><br><span class="line">    return self._pkg_info</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2815, in __getattr__</span><br><span class="line">    raise AttributeError(attr)</span><br><span class="line">AttributeError: _pkg_info</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/commands/install.py", line 512, in _warn_about_conflicts</span><br><span class="line">    package_set, _dep_info = check_install_conflicts(to_install)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/check.py", line 114, in check_install_conflicts</span><br><span class="line">    package_set, _ = create_package_set_from_installed()</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_internal/operations/check.py", line 53, in create_package_set_from_installed</span><br><span class="line">    package_set[name] = PackageDetails(dist.version, dist.requires())</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 2736, in requires</span><br><span class="line">    dm = self._dep_map</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3023, in _dep_map</span><br><span class="line">    self.__dep_map = self._compute_dependencies()</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3032, in _compute_dependencies</span><br><span class="line">    for req in self._parsed_pkg_info.get_all('Requires-Dist') or []:</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 3014, in _parsed_pkg_info</span><br><span class="line">    metadata = self.get_metadata(self.PKG_INFO)</span><br><span class="line">  File "/home/frotech/.virtualenvs/tf2/lib/python3.6/site-packages/pip/_vendor/pkg_resources/__init__.py", line 1895, in get_metadata</span><br><span class="line">    raise KeyError("No metadata except PKG-INFO is available")</span><br><span class="line">KeyError: 'No metadata except PKG-INFO is available'</span><br><span class="line">Installing collected packages: setuptools</span><br><span class="line">  Attempting uninstall: setuptools</span><br><span class="line">    Found existing installation: setuptools 46.1.3</span><br><span class="line">    Uninstalling setuptools-46.1.3:</span><br><span class="line">      Successfully uninstalled setuptools-46.1.3</span><br><span class="line">Successfully installed setuptools-46.4.0</span><br></pre></td></tr></table></figure>

<p>但貌似不影响安装</p>
<p>测试，发现jupyter lab不能启动，应该是删除了ipywidgets2.0文件夹的原因，修复之</p>
<ul>
<li>将U盘格式化为ext4</li>
<li>复制jp4.3_raw_b246c9.img中的<code>~/ipywidgets2.0</code>到U盘（<code>cp -a</code>)</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /media/&lt;U盘&gt;</span><br><span class="line">cp -a ipywidgets2.0 ~/ipywidgets2.0</span><br><span class="line">sudo systemctl start fro_jupyter</span><br></pre></td></tr></table></figure>

<p>OK，jupyter lab可以重新启动了，测试过tf2内核也可以用</p>
<h3 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h3><p>复制jp4.3_raw_b246c9.img中的<code>~/python</code>到U盘（<code>cp -a</code>)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /media/&lt;U盘&gt;</span><br><span class="line">cp -a python ~/python</span><br><span class="line">workon tf2</span><br><span class="line"><span class="built_in">cd</span> ~/python</span><br><span class="line">proxychains python setup.py install --cpp_implementation</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h3 id="Install-TensorFlow2"><a href="#Install-TensorFlow2" class="headerlink" title="Install TensorFlow2"></a>Install TensorFlow2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">proxychains pip install grpcio absl-py py-cpuinfo psutil portpicker six mock requests gast h5py astor termcolor keras-applications keras-preprocessing wrapt google-pasta</span><br><span class="line">proxychains pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v43 tensorflow==2.1.0+nv20.3</span><br></pre></td></tr></table></figure>

<p>由于网络原因，下载tensorflow失败，改用电脑下载，然后将whl文件复制到U盘</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /media/&lt;U盘&gt;</span><br><span class="line">cp tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl ~/tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains pip install --pre tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<p>再次遇到<code>KeyError: &#39;No metadata except PKG-INFO is available&#39;</code>且发现安装到<code>scipy-1.4.1</code>时出错</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains wget https://github.com/scipy/scipy/releases/download/v1.4.1/scipy-1.4.1.tar.gz</span><br><span class="line">tar -xzvf scipy-1.4.1.tar.gz scipy-1.4.1</span><br><span class="line"><span class="built_in">cd</span> scipy-1.4.1</span><br><span class="line">workon tf2</span><br><span class="line">proxychains python setup.py install</span><br></pre></td></tr></table></figure>

<p>成功安装scipy后，再次安装tf2</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains pip install --pre tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<p>这次遇到的错误是：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement opt-einsum&gt;=2.3.2 (from tensorflow==2.1.0+nv20.3) (from versions: none)</span><br><span class="line">ERROR: No matching distribution found for opt-einsum&gt;=2.3.2 (from tensorflow==2.1.0+nv20.3)</span><br></pre></td></tr></table></figure>

<p>用电脑下载<a href="https://files.pythonhosted.org/packages/63/a5/e6c07b08b934831ccb8c98ee335e66b7761c5754ee3cabfe4c11d0b1af28/opt_einsum-3.2.1-py3-none-any.whl" target="_blank" rel="noopener">opt_einsum-3.2.1-py3-none-any.whl</a></p>
<p>复制到Jetson Nano的<code>~</code>目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">proxychains pip install opt_einsum-3.2.1-py3-none-any.whl</span><br></pre></td></tr></table></figure>

<p>继续安装失败，尝试了以下措施：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm ~/.virtualenvs/tf2/lib/python3.6/site-packages/numpy-1.18.1.dist-info</span><br><span class="line">workon tf2</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple numpy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入桌面重新连接wifi</span></span><br><span class="line">proxychains pip install opt_einsum</span><br><span class="line">proxychains pip install --pre tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<p>安装完成后，在<code>import tensorflow</code>时，出现以下错误</p>
<p><code>ModuleNotFoundError: No module named &#39;google.protobuf&#39;</code></p>
<p>尝试以下措施</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">proxychains pip install numpy grpcio absl-py py-cpuinfo psutil portpicker six mock requests gast h5py astor termcolor protobuf keras-applications keras-preprocessing wrapt google-pasta</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple google</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple protobuf</span><br><span class="line">pip uninstall google</span><br><span class="line">pip uninstall protobuf</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple google protobuf</span><br></pre></td></tr></table></figure>

<p>执行上面的操作后，可正常<code>import tensorflow</code>了，应该是<code>protobuf</code>的版本低的问题</p>
<p><del>### install PIL, matplotlib, jetcam, ipywidgets</del></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple Pillow</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple matplotlib</span><br><span class="line">python -m pip install git+https://github.com/ipython/traitlets@master</span><br><span class="line"><span class="built_in">cd</span> ~/jetcam</span><br><span class="line">python setup.py install</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple ipywidgets</span><br></pre></td></tr></table></figure>

<p><del>### clean</del></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm tensorflow-2.1.0+nv20.3-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">rm scipy-1.4.1.tar.gz</span><br><span class="line">rm opt_einsum-3.2.1-py3-none-any.whl</span><br></pre></td></tr></table></figure>

<p><del>### Install DeepStream SDK 4</del></p>
<p>To install additional packages</p>
<ul>
<li>Enter the following command to install the prerequisite packages for installing the DeepStream SDK:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt install \</span><br><span class="line">    libssl1.0.0 \</span><br><span class="line">    libgstreamer1.0-0 \</span><br><span class="line">    gstreamer1.0-tools \</span><br><span class="line">    gstreamer1.0-plugins-good \</span><br><span class="line">    gstreamer1.0-plugins-bad \</span><br><span class="line">    gstreamer1.0-plugins-ugly \</span><br><span class="line">    gstreamer1.0-libav \</span><br><span class="line">    libgstrtspserver-1.0-0 \</span><br><span class="line">    libjansson4=2.11-1</span><br></pre></td></tr></table></figure>

<p>To install librdkafka</p>
<p>Install <code>librdkafka</code> by running <code>apt-get</code> on the Jetson device:</p>
<p><code>sudo proxychains apt-get install librdkafka1=0.11.3-1build1</code></p>
<p>To install latest NVIDIA V4L2 GStreamer plugin</p>
<p><code>sudo proxychains apt install --reinstall nvidia-l4t-gstreamer</code></p>
<p>To install the DeepStream SDK</p>
<p>电脑下载<a href="https://developer.download.nvidia.com/assets/embedded/secure/tools/files/jetpack-sdks/jetpack-4.3/JETPACK_43_b132_DEEPSTREAM/deepstream-4.0_4.0.2-1_arm64.deb" target="_blank" rel="noopener">deepstream-4.0_4.0.2-1_arm64.deb</a></p>
<p>用U盘将deepstream-4.0_4.0.2-1_arm64.deb复制到HOME目录下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install ./deepstream-4.0_4.0.2-1_arm64.deb</span><br></pre></td></tr></table></figure>

<h2 id="64G-SD卡"><a href="#64G-SD卡" class="headerlink" title="64G SD卡"></a>64G SD卡</h2><p>突然发现不能正常import numpy等库，遂将版本<code>2e4054d63</code>烧录到64G SD卡上</p>
<p>以下操作在64G卡上进行</p>
<h3 id="扩展容量"><a href="#扩展容量" class="headerlink" title="扩展容量"></a>扩展容量</h3><p>增加6G容量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo /usr/lib/nvidia/resizefs/nvresizefs.sh -s 35959</span><br></pre></td></tr></table></figure>

<h3 id="安装dlib"><a href="#安装dlib" class="headerlink" title="安装dlib"></a>安装dlib</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget http://dlib.net/files/dlib-19.19.tar.bz2</span><br><span class="line">tar jxvf dlib-19.19.tar.bz2</span><br><span class="line"><span class="built_in">cd</span> dlib-19.19</span><br><span class="line">workon cv</span><br><span class="line">sudo apt-get install libopenblas-dev</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build/</span><br><span class="line">cmake ..</span><br><span class="line">cmake --build .</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h3 id="安装v4l-utils"><a href="#安装v4l-utils" class="headerlink" title="安装v4l-utils"></a>安装v4l-utils</h3><p>查看摄像头参数用</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install v4l-utils</span><br></pre></td></tr></table></figure>

<h3 id="install-PIL-matplotlib-jetcam-ipywidgets"><a href="#install-PIL-matplotlib-jetcam-ipywidgets" class="headerlink" title="install PIL, matplotlib, jetcam, ipywidgets"></a>install PIL, matplotlib, jetcam, ipywidgets</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple Pillow</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple matplotlib</span><br><span class="line">sudo systemctl stop fro_jupyter.service</span><br><span class="line">python -m pip install git+https://github.com/ipython/traitlets@master</span><br><span class="line"><span class="built_in">cd</span> ~/jetcam</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple ipywidgets</span><br><span class="line">sudo systemctl start fro_jupyter.service</span><br></pre></td></tr></table></figure>

<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmtui</span><br></pre></td></tr></table></figure>

<h3 id="Install-DeepStream-SDK-4"><a href="#Install-DeepStream-SDK-4" class="headerlink" title="Install DeepStream SDK 4"></a>Install DeepStream SDK 4</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt install \</span><br><span class="line">    libssl1.0.0 \</span><br><span class="line">    libgstreamer1.0-0 \</span><br><span class="line">    gstreamer1.0-tools \</span><br><span class="line">    gstreamer1.0-plugins-good \</span><br><span class="line">    gstreamer1.0-plugins-bad \</span><br><span class="line">    gstreamer1.0-plugins-ugly \</span><br><span class="line">    gstreamer1.0-libav \</span><br><span class="line">    libgstrtspserver-1.0-0 \</span><br><span class="line">    libjansson4=2.11-1</span><br><span class="line"></span><br><span class="line">sudo proxychains apt-get install librdkafka1=0.11.3-1build1</span><br><span class="line">sudo proxychains apt install --reinstall nvidia-l4t-gstreamer</span><br></pre></td></tr></table></figure>

<p>To install the DeepStream SDK</p>
<p>电脑下载<a href="https://developer.download.nvidia.com/assets/embedded/secure/tools/files/jetpack-sdks/jetpack-4.3/JETPACK_43_b132_DEEPSTREAM/deepstream-4.0_4.0.2-1_arm64.deb" target="_blank" rel="noopener">deepstream-4.0_4.0.2-1_arm64.deb</a></p>
<p>用scp指令复制到jetson nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt-get install ./deepstream-4.0_4.0.2-1_arm64.deb</span><br></pre></td></tr></table></figure>

<h3 id="Install-temporal-shift-module"><a href="#Install-temporal-shift-module" class="headerlink" title="Install temporal-shift-module"></a>Install temporal-shift-module</h3><p>Build TVM with following commands</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo proxychains apt install llvm <span class="comment"># install llvm which is required by tvm</span></span><br><span class="line">proxychains git <span class="built_in">clone</span> -b v0.6 https://github.com/apache/incubator-tvm.git</span><br><span class="line"><span class="built_in">cd</span> incubator-tvm</span><br><span class="line">proxychains git submodule update --init</span><br><span class="line">mkdir build</span><br><span class="line">cp cmake/config.cmake build/</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"><span class="comment">#[</span></span><br><span class="line"><span class="comment">#edit config.cmake to change</span></span><br><span class="line"><span class="comment"># 32 line: USE_CUDA OFF -&gt; USE_CUDA ON</span></span><br><span class="line"><span class="comment">#104 line: USE_LLVM OFF -&gt; USE_LLVM ON</span></span><br><span class="line"><span class="comment">#]</span></span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> python</span><br><span class="line">workon cv</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> topi/python</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>Install ONNX</p>
<p>略，之前在测试yolo模型时已安装</p>
<p>export cuda toolkit binary to path</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda/bin</span><br></pre></td></tr></table></figure>

<p>运行demo</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">proxychains git <span class="built_in">clone</span> https://github.com/mit-han-lab/temporal-shift-module.git</span><br><span class="line"><span class="built_in">cd</span> temporal-shift-module/online_demo</span><br><span class="line">python main.py</span><br></pre></td></tr></table></figure>

<p>出现以下错误</p>
<p><code>cannot import name &#39;bilinear_sample_nchw&#39;</code></p>
<p>修复方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/topi-0.6.dev0-py3.6.egg/topi</span><br></pre></td></tr></table></figure>

<p>另外，预先在电脑上下载<a href="https://file.lzhu.me/projects/tsm/models/mobilenetv2_jester_online.pth.tar" target="_blank" rel="noopener">模型</a>，<br>再用scp复制到Jetson Nano上</p>
<p>之后运行online_demo时，遇到这个<a href="https://github.com/mit-han-lab/temporal-shift-module/issues/63" target="_blank" rel="noopener">错误</a>，暂时放弃</p>
<h3 id="使能SPI"><a href="#使能SPI" class="headerlink" title="使能SPI"></a>使能SPI</h3><p>参考<a href="https://docs.nvidia.com/jetson/l4t/index.html#page/Tegra%20Linux%20Driver%20Package%20Development%20Guide/hw_setup_jetson_io.html" target="_blank" rel="noopener">官方文档</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo find /opt/nvidia/jetson-io/ -mindepth 1 -maxdepth 1 -<span class="built_in">type</span> d -<span class="built_in">exec</span> touch &#123;&#125;/__init__.py \;</span><br><span class="line">sudo mkdir /boot/dtb</span><br><span class="line">sudo cp -v /boot/tegra210-p3448-0000-p3449-0000-[ab]0[02].dtb /boot/dtb/</span><br><span class="line">sudo /opt/nvidia/jetson-io/jetson-io.py</span><br></pre></td></tr></table></figure>

<p>见到界面后，退出，采用命令行方法进行配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo /opt/nvidia/jetson-io/config-by-function.py -o dtb spi1</span><br><span class="line">sudo /opt/nvidia/jetson-io/config-by-function.py -o dtbo spi1</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>重启后，输入下面的命令查看是否成功</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo /opt/nvidia/jetson-io/config-by-pin.py</span><br></pre></td></tr></table></figure>

<h3 id="安装adafruit-bus-device"><a href="#安装adafruit-bus-device" class="headerlink" title="安装adafruit_bus_device"></a>安装adafruit_bus_device</h3><p>为了在python中使用spi，安装adafruit_bus_device，用这个包的好处是方便使用其它adafruit硬件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple adafruit-circuitpython-busdevice</span><br></pre></td></tr></table></figure>

<h3 id="安装frotech-adapter"><a href="#安装frotech-adapter" class="headerlink" title="安装frotech_adapter"></a>安装frotech_adapter</h3><p>上传源代码到开发板</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> &lt;Jetson_adapter&gt;</span><br><span class="line">workon cv</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<p>解决<code>/dev/ttyUSB0</code>权限问题:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="升级到JP4-4"><a href="#升级到JP4-4" class="headerlink" title="升级到JP4.4"></a>升级到JP4.4</h2><ol>
<li><p>Open the <code>apt</code> source configuration file in a text editor, for example:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list.d/nvidia-l4t-apt-source.list</span><br></pre></td></tr></table></figure>
</li>
<li><p>Change the repository name and download URL in the deb commands.</p>
<p> The original commands are:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;common r32 main</span><br><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;&lt;platform&gt; r32 main</span><br></pre></td></tr></table></figure>

<p> Where <platform> is identifies the platform’s processor:</p>
<ul>
<li><p>t186 for Jetson TX2 series</p>
</li>
<li><p>t194 for Jetson AGX Xavier series or Jetson Xavier NX</p>
</li>
<li><p>t210 for Jetson Nano or Jetson TX1</p>
<p>Change the repository name from r32 to r32.4, and <platform> to the appropriate processor name for your platform. If your platform is Jetson Xavier NX, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;common r32.4 main</span><br><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;t194 r32.4 main</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Save and close the source configuration file.</p>
</li>
<li><p>Enter the commands:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt dist-upgrade</span><br></pre></td></tr></table></figure>

<p> If <code>apt</code> prompts you to choose a configuration file, reply Y for <em>yes</em> (to use the NVIDIA updated version of the file).</p>
</li>
<li><p>Reboot your Jetson device when the upgrade is finished.</p>
</li>
</ol>
<h3 id="更新TF2"><a href="#更新TF2" class="headerlink" title="更新TF2"></a>更新TF2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pip install -U pip</span><br><span class="line">pip uninstall tensorflow</span><br><span class="line">proxychains pip install -U testresources setuptools future==0.17.1 mock==3.0.5 h5py keras_preprocessing keras_applications==1.0.8 gast futures protobuf pybind11</span><br></pre></td></tr></table></figure>

<p>在电脑上下载好<code>tensorflow-2.2.0+nv20.6-cp36-cp36m-linux_aarch64.whl</code>，然后上传到jetson nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">scp .\tensorflow-2.2.0+nv20.6-cp36-cp36m-linux_aarch64.whl &lt;user&gt;@remote_ip:~</span><br></pre></td></tr></table></figure>

<p>最后在jetson nano上安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install --pre tensorflow-2.2.0+nv20.6-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<h3 id="解决-dev-ttyTHS1权限问题"><a href="#解决-dev-ttyTHS1权限问题" class="headerlink" title="解决/dev/ttyTHS1权限问题"></a>解决<code>/dev/ttyTHS1</code>权限问题</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<p>使用ttyTHS1作串口通信，需要禁用nvgetty服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br></pre></td></tr></table></figure>

<h3 id="安装TF2的OD-API"><a href="#安装TF2的OD-API" class="headerlink" title="安装TF2的OD API"></a>安装TF2的OD API</h3><p>先删除jetson nano上的<code>models</code>文件夹</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -rf models</span><br></pre></td></tr></table></figure>

<p>在电脑上</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone -<span class="literal">-depth</span> <span class="number">1</span> https://github.com/tensorflow/models</span><br><span class="line">scp <span class="literal">-r</span> .\models &lt;user&gt;@remote_ip:~/models</span><br></pre></td></tr></table></figure>

<p>在jetson nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> models/research/</span><br><span class="line">workon tf2</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">cp object_detection/packages/tf2/setup.py .</span><br><span class="line">proxychains python -m pip install .</span><br></pre></td></tr></table></figure>

<p>出现了如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement tensorflow-addons (from tf-models-official-&gt;object-detection==0.1) (from versions: none)</span><br><span class="line">ERROR: No matching distribution found for tensorflow-addons (from tf-models-official-&gt;object-detection==0.1)</span><br></pre></td></tr></table></figure>

<p>在电脑上下载<a href="https://github.com/tensorflow/addons/archive/v0.10.0.zip" target="_blank" rel="noopener">TensorFlow Addons v0.10.0</a></p>
<p>然后上传到Jetson nano上，之后在jetson nano上解压并安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip addons-0.10.0.zip</span><br><span class="line"><span class="built_in">cd</span> addons-0.10.0</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<p>之后继续安装OD API</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> models/research/</span><br><span class="line">proxychains python -m pip install .</span><br></pre></td></tr></table></figure>

<p>出现新的错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: /home/frotech/.virtualenvs/tf2/bin/python -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-6y1bd261/sentencepiece/setup.py'"'"'; __file__='"'"'/tmp/pip-install-6y1bd261/sentencepiece/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' egg_info --egg-base /tmp/pip-pip-egg-info-6qn_mdp8</span><br><span class="line">         cwd: /tmp/pip-install-6y1bd261/sentencepiece/</span><br><span class="line">    Complete output (5 lines):</span><br><span class="line">    Package sentencepiece was not found in the pkg-config search path.</span><br><span class="line">    Perhaps you should add the directory containing `sentencepiece.pc'</span><br><span class="line">    to the PKG_CONFIG_PATH environment variable</span><br><span class="line">    No package 'sentencepiece' found</span><br><span class="line">    Failed to find sentencepiece pkgconfig</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span><br></pre></td></tr></table></figure>

<p>安装过程中，需要安装<code>pandas</code>，但每次出错都要重装一次，十分浪费时间，所以在解决上面的问题之前，先装<code>pandas</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<h4 id="解决sentencepiece安装问题"><a href="#解决sentencepiece安装问题" class="headerlink" title="解决sentencepiece安装问题"></a>解决<code>sentencepiece</code>安装问题</h4><p>电脑下载<a href="https://github.com/google/sentencepiece/archive/v0.1.92.zip" target="_blank" rel="noopener">sentencepiece-0.1.92.zip</a></p>
<p>然后上传到jetson nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip sentencepiece-0.1.92.zip</span><br><span class="line"><span class="built_in">cd</span> sentencepiece-0.1.92</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">sudo apt-get install cmake build-essential pkg-config libgoogle-perftools-dev</span><br><span class="line">cmake ..</span><br><span class="line">make -j $(nproc)</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig -v</span><br><span class="line"><span class="built_in">cd</span> ../python/</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<p>之后继续安装OD API</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> models/research/</span><br><span class="line">proxychains python -m pip install .</span><br></pre></td></tr></table></figure>

<p>之后出现以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement opencv-python-headless (from tf-models-official-&gt;object-detection==0.1) (from versions: none)</span><br><span class="line">ERROR: No matching distribution found for opencv-python-headless (from tf-models-official-&gt;object-detection==0.1)</span><br></pre></td></tr></table></figure>

<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>在电脑上创建一个假的<code>opencv-python-headless</code>pip包</p>
<p>目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opencv-headless</span><br><span class="line">├── LICENSE</span><br><span class="line">├── opencv-python-headless</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── setup.py</span><br></pre></td></tr></table></figure>

<p>其中<code>setup.py</code>的内容如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"opencv-python-headless"</span>, <span class="comment"># Replace with your own username</span></span><br><span class="line">    version=<span class="string">"4.1.2"</span>,</span><br><span class="line">    author=<span class="string">"z14git"</span>,</span><br><span class="line">    author_email=<span class="string">"lzl1992@gmail.com"</span>,</span><br><span class="line">    description=<span class="string">"fake opencv"</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">        <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.6'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>__init__.py</code>为空</p>
<p>上传到jetson nano上安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> opencv-headless</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<p>之后再重新安装OD API，出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: /home/frotech/.virtualenvs/tf2/bin/python -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-k9o14eiv/dm-tree/setup.py'"'"'; __file__='"'"'/tmp/pip-install-k9o14eiv/dm-tree/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-zegyuwah/install-record.txt --single-version-externally-managed --compile --install-headers /home/frotech/.virtualenvs/tf2/include/site/python3.6/dm-tree</span><br><span class="line">         cwd: /tmp/pip-install-k9o14eiv/dm-tree/</span><br><span class="line">    Complete output (13 lines):</span><br><span class="line">    running install</span><br><span class="line">    running build</span><br><span class="line">    running build_py</span><br><span class="line">    creating build</span><br><span class="line">    creating build/lib.linux-aarch64-3.6</span><br><span class="line">    creating build/lib.linux-aarch64-3.6/tree</span><br><span class="line">    copying tree/tree_test.py -&gt; build/lib.linux-aarch64-3.6/tree</span><br><span class="line">    copying tree/tree_benchmark.py -&gt; build/lib.linux-aarch64-3.6/tree</span><br><span class="line">    copying tree/__init__.py -&gt; build/lib.linux-aarch64-3.6/tree</span><br><span class="line">    running build_ext</span><br><span class="line">    bazel build //tree:_tree --symlink_prefix=build/temp.linux-aarch64-3.6/bazel- --compilation_mode=opt</span><br><span class="line">    unable to execute 'bazel': No such file or directory</span><br><span class="line">    error: command 'bazel' failed with exit status 1</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: /home/frotech/.virtualenvs/tf2/bin/python -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'/tmp/pip-install-k9o14eiv/dm-tree/setup.py'"'"'; __file__='"'"'/tmp/pip-install-k9o14eiv/dm-tree/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-zegyuwah/install-record.txt --single-version-externally-managed --compile --install-headers /home/frotech/.virtualenvs/tf2/include/site/python3.6/dm-tree Check the logs for full command output.</span><br></pre></td></tr></table></figure>

<p>安装出错前成功安装的包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install lxml pycocotools kaggle dill pyyaml python-slugify promise</span><br></pre></td></tr></table></figure>

<h4 id="解决dm-tree安装问题"><a href="#解决dm-tree安装问题" class="headerlink" title="解决dm-tree安装问题"></a>解决dm-tree安装问题</h4><p>首先需要安装<code>bazel</code>，安装过程参考<a href="https://github.com/jkjung-avt/jetson_nano/blob/master/install_bazel-0.26.1.sh" target="_blank" rel="noopener">这里</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y pkg-config zip g++ zlib1g-dev unzip</span><br><span class="line">sudo proxychains apt-get install -y openjdk-8-jdk</span><br></pre></td></tr></table></figure>

<p>电脑下载<a href="https://github.com/bazelbuild/bazel/releases/download/2.0.0/bazel-2.0.0-dist.zip" target="_blank" rel="noopener">bazel-2.0.0-dist.zip</a>(PS:构建tensorflow 2.2.0使用的就是bazel 2.0.0)</p>
<p>上传到jetson nano上安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip bazel-2.0.0-dist.zip -d bazel-2.0.0</span><br><span class="line"><span class="built_in">cd</span> bazel-2.0.0/</span><br><span class="line">EXTRA_BAZEL_ARGS=<span class="string">"--host_javabase=@local_jdk//:jdk"</span> ./compile.sh</span><br><span class="line">sudo cp output/bazel /usr/<span class="built_in">local</span>/bin</span><br><span class="line">bazel <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">pip install dm-tree</span><br></pre></td></tr></table></figure>

<p>之后继续安装OD API</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/models/research/</span><br><span class="line">proxychains python -m pip install .</span><br></pre></td></tr></table></figure>

<blockquote>
<p>退回到 0cf38333076be920a331e337ab43b1b5a3789428</p>
</blockquote>
<h3 id="更新pytorch"><a href="#更新pytorch" class="headerlink" title="更新pytorch"></a>更新pytorch</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple torch-1.6.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev</span><br><span class="line">rm -rf torchvision/</span><br></pre></td></tr></table></figure>

<p>电脑上下载<a href="https://github.com/pytorch/vision/archive/v0.7.0.zip" target="_blank" rel="noopener">vision-0.7.0.zip</a>，然后复制到jetson nano上</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">unzip vision-0.7.0.zip</span><br><span class="line"><span class="built_in">cd</span> vision-0.7.0/</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.7.0</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>

<h3 id="更新protobuf"><a href="#更新protobuf" class="headerlink" title="更新protobuf"></a>更新protobuf</h3><p>电脑上下载<a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-aarch_64.zip" target="_blank" rel="noopener">protoc-3.12.3-linux-aarch_64.zip</a>和<a href="https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-python-3.12.3.zip" target="_blank" rel="noopener">protobuf-python-3.12.3.zip
</a></p>
<p>然后上传到jetson nano home目录，然后参考<a href="https://raw.githubusercontent.com/z14git/jetson_nano/tf1.15/install_protobuf-3.9.2.sh" target="_blank" rel="noopener">install_protobuf-3.9.2.sh</a>进行安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">unzip protobuf-python-3.12.3.zip</span><br><span class="line">unzip protoc-3.12.3-linux-aarch_64.zip -d protoc-3.12.3</span><br><span class="line">sudo cp protoc-3.12.3/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line">workon tf2</span><br><span class="line"><span class="built_in">export</span> PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.12.3/</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">pip uninstall -y protobuf</span><br><span class="line">pip install Cython</span><br><span class="line"><span class="built_in">cd</span> python/</span><br><span class="line">python setup.py build --cpp_implementation</span><br><span class="line">python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">python setup.py install --cpp_implementation</span><br></pre></td></tr></table></figure>

<h3 id="重装TF2"><a href="#重装TF2" class="headerlink" title="重装TF2"></a>重装TF2</h3><p>更新完protobuf，<code>import tensorflow</code>时出现以下错误：</p>
<p><code>ModuleNotFoundError: No module named &#39;google.protobuf&#39;</code></p>
<p>所以要重装一次</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pip uninstall tensorflow</span><br><span class="line">pip install -U tensorflow-2.2.0+nv20.6-cp36-cp36m-linux_aarch64.whl</span><br></pre></td></tr></table></figure>

<p>重装后仍然不行，后来又尝试了以下方法</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall protobuf</span><br><span class="line">pip uninstall google</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.12.3/python</span><br><span class="line">python setup.py install --cpp_implementation</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<p>still not work，最后参考<a href="https://github.com/jkjung-avt/jetson_nano/issues/9#issuecomment-629803485" target="_blank" rel="noopener">这里</a>，执行以下操作即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/protobuf-3.12.3-py3.6-linux-aarch64.egg/google</span><br><span class="line">mv __init__.py bak.__init__.py</span><br></pre></td></tr></table></figure>

<h3 id="增加OLED信息显示服务"><a href="#增加OLED信息显示服务" class="headerlink" title="增加OLED信息显示服务"></a>增加OLED信息显示服务</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/jetbot.git</span><br><span class="line"><span class="built_in">cd</span> jetbot/</span><br><span class="line">git checkout z_jp4.4 <span class="comment">#5ad748d6c8cd763821c07eb2a3c4925784e870d5</span></span><br><span class="line">python3 jetbot/utils/create_stats_service.py</span><br><span class="line">sudo mv jetbot_stats.service /etc/systemd/system/jetbot_stats.service</span><br><span class="line">workon cv</span><br><span class="line">pip install Adafruit_SSD1306</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_stats</span><br><span class="line">sudo systemctl start jetbot_stats</span><br></pre></td></tr></table></figure>

<h3 id="安装aiocoap"><a href="#安装aiocoap" class="headerlink" title="安装aiocoap"></a>安装aiocoap</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap/</span><br><span class="line">pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Deepstream-sdk-5"><a href="#安装Deepstream-sdk-5" class="headerlink" title="安装Deepstream sdk 5"></a>安装Deepstream sdk 5</h3><p>ref : <a href="https://docs.nvidia.com/metropolis/deepstream/dev-guide/index.html#page/DeepStream_Development_Guide/deepstream_quick_start.html#wwpID0E0GI0HA" target="_blank" rel="noopener">Quick Start Guide</a></p>
<h4 id="To-install-the-DeepStream-SDK"><a href="#To-install-the-DeepStream-SDK" class="headerlink" title="To install the DeepStream SDK"></a>To install the DeepStream SDK</h4><p>Using the DeepStream Debian package</p>
<p>Download the DeepStream 5.0 Jetson Debian package <a href="https://developer.nvidia.com/deepstream-getting-started" target="_blank" rel="noopener">deepstream-5.0_5.0.0-1_arm64.deb</a>, to the Jetson device. Then enter the command:</p>
<p><code>sudo apt install ./deepstream-5.0_5.0.0-1_arm64.deb</code></p>
<h4 id="To-install-additional-packages"><a href="#To-install-additional-packages" class="headerlink" title="To install additional packages"></a>To install additional packages</h4><ul>
<li>Enter the following commands to install the prerequisite packages:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install \</span><br><span class="line">    libssl1.0.0 \</span><br><span class="line">    libgstreamer1.0-0 \</span><br><span class="line">    gstreamer1.0-tools \</span><br><span class="line">    gstreamer1.0-plugins-good \</span><br><span class="line">    gstreamer1.0-plugins-bad \</span><br><span class="line">    gstreamer1.0-plugins-ugly \</span><br><span class="line">    gstreamer1.0-libav \</span><br><span class="line">    libgstrtspserver-1.0-0 \</span><br><span class="line">    libjansson4=2.11-1</span><br></pre></td></tr></table></figure>

<h4 id="To-install-librdkafka-to-enable-Kafka-protocol-adaptor-for-message-broker"><a href="#To-install-librdkafka-to-enable-Kafka-protocol-adaptor-for-message-broker" class="headerlink" title="To install librdkafka (to enable Kafka protocol adaptor for message broker)"></a>To install librdkafka (to enable Kafka protocol adaptor for message broker)</h4><ol>
<li><p>Clone the librdkafka repository from GitHub:</p>
<p> <code>git clone https://github.com/edenhill/librdkafka.git</code></p>
</li>
<li><p>Configure and build the library:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> librdkafka</span><br><span class="line">$ git reset --hard 7101c2310341ab3f4675fc565f64f0967e135a6a</span><br><span class="line">./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>Copy the generated libraries to the deepstream directory:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -p /opt/nvidia/deepstream/deepstream-5.0/lib</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/lib/librdkafka* /opt/nvidia/deepstream/deepstream-5.0/lib</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="To-install-latest-NVIDIA-V4L2-GStreamer-plugin"><a href="#To-install-latest-NVIDIA-V4L2-GStreamer-plugin" class="headerlink" title="To install latest NVIDIA V4L2 GStreamer plugin"></a>To install latest NVIDIA V4L2 GStreamer plugin</h4><ol>
<li><p>Open the apt source configuration file in a text editor, for example:</p>
<p> <code>sudo vim /etc/apt/sources.list.d/nvidia-l4t-apt-source.list</code></p>
</li>
<li><p>Change the repository name and download URL in the deb commands shown below:</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;common r32.4 main</span><br><span class="line">deb https:&#x2F;&#x2F;repo.download.nvidia.com&#x2F;jetson&#x2F;t210 r32.4 main</span><br></pre></td></tr></table></figure>
</li>
<li><p>Save and close the source configuration file.</p>
</li>
<li><p>Enter the commands:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install --reinstall nvidia-l4t-gstreamer</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="Installing-GstRtspServer-and-instrospection-typelib"><a href="#Installing-GstRtspServer-and-instrospection-typelib" class="headerlink" title="Installing GstRtspServer and instrospection typelib"></a>Installing GstRtspServer and instrospection typelib</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgstrtspserver-1.0-0 gstreamer1.0-rtsp</span><br><span class="line">sudo apt-get install libgirepository1.0-dev</span><br><span class="line">sudo apt-get install gobject-introspection gir1.2-gst-rtsp-server-1.0</span><br></pre></td></tr></table></figure>

<h3 id="build-rtsp-server"><a href="#build-rtsp-server" class="headerlink" title="build rtsp server"></a>build rtsp server</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libgstrtspserver-1.0 libgstreamer1.0-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/GStreamer/gst-rtsp-server.git</span><br><span class="line"><span class="built_in">cd</span> gst-rtsp-server/</span><br><span class="line">git checkout 1.14</span><br><span class="line"><span class="built_in">cd</span> examples/</span><br><span class="line">gcc <span class="built_in">test</span>-launch.c -o <span class="built_in">test</span>-launch $(pkg-config --cflags --libs gstreamer-1.0 gstreamer-rtsp-server-1.0)</span><br></pre></td></tr></table></figure>

<p>用摄像头作源:</p>
<p><code>./test-launch &quot;nvarguscamerasrc ! video/x-raw(memory:NVMM), format=NV12, width=1920, height=1080, framerate=30/1 ! nvvidconv ! video/x-raw, width=640, height=360, format=NV12, framerate=30/1 ! omxh265enc ! rtph265pay name=pay0 pt=96 config-interval=1&quot;</code></p>
<p>没摄像头时：</p>
<p><code>./test-launch &quot;videotestsrc ! nvvidconv ! nvv4l2h264enc ! h264parse ! rtph264pay name=pay0 pt=96&quot;</code></p>
<p>开另一个终端测试</p>
<p><code>gst-launch-1.0 uridecodebin uri=rtsp://127.0.0.1:8554/test ! nvoverlaysink</code></p>
<p>ref:</p>
<ul>
<li><a href="https://forums.developer.nvidia.com/t/how-do-i-use-jetson-nano-as-cctv/74715" target="_blank" rel="noopener">How do I use Jetson Nano as CCTV?</a></li>
<li><a href="https://forums.developer.nvidia.com/t/jetson-nano-faq/82953" target="_blank" rel="noopener">Jetson Nano FAQ</a></li>
</ul>
<h3 id="INSTALL-v4l2loopback"><a href="#INSTALL-v4l2loopback" class="headerlink" title="INSTALL v4l2loopback"></a>INSTALL v4l2loopback</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">mkdir v4l2loopback</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/umlaeute/v4l2loopback.git v4l2loopback</span><br><span class="line"><span class="built_in">cd</span> v4l2loopback/</span><br><span class="line">git checkout v0.10.0</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">modprobe v4l2loopback</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/umlaeute/v4l2loopback" target="_blank" rel="noopener">v4l2loopback</a></li>
<li><a href="https://forums.developer.nvidia.com/t/jetpack-4-2-1-building-v4l2loopback-fails/79201" target="_blank" rel="noopener">Jetpack 4.2.1 : building v4l2loopback fails</a></li>
</ul>
<h3 id="install-pygame"><a href="#install-pygame" class="headerlink" title="install pygame"></a>install pygame</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install libsdl1.2-dev</span><br><span class="line">sudo apt install python-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev libfreetype6-dev</span><br><span class="line"></span><br><span class="line">sudo apt install libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pip install pygame==2.0.0.dev24</span><br></pre></td></tr></table></figure>

<p>ret:</p>
<ul>
<li><a href="https://forums.developer.nvidia.com/t/install-pygame-on-jetson-nano/83731" target="_blank" rel="noopener">Install Pygame on Jetson nano?</a></li>
<li><a href="https://lazyfoo.net/tutorials/SDL/01_hello_SDL/linux/index.php" target="_blank" rel="noopener">Setting up SDL 2 on Linux</a></li>
</ul>
<p>ps: build pygame时，提示部分模块<code>not found</code>的话，用<code>apt-cache search libsdl2</code>查找</p>
<h3 id="install-flask"><a href="#install-flask" class="headerlink" title="install flask"></a>install flask</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pip install Flask</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>build custom jetson nano image based on jp4.4.1</title>
    <url>/sundries/2020/05/13/build-custom-jetson-nano-image-based-on-jp4-4/</url>
    <content><![CDATA[<h2 id="制作基础镜像"><a href="#制作基础镜像" class="headerlink" title="制作基础镜像"></a>制作基础镜像</h2><ol>
<li><p>安装sdk manager</p>
</li>
<li><p>安装JetPack 4.4.1</p>
</li>
<li><p>Run jetson-disk-image-creator.sh to create a new SD card image with modified rootfs:</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Linux_for_Tegra/tools</span><br><span class="line">sudo ./jetson-disk-image-creator.sh -o sd-blob.img -b jetson-nano -r 100</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>ref: <a href="https://docs.nvidia.com/jetson/l4t/index.html#page/Tegra%2520Linux%2520Driver%2520Package%2520Development%2520Guide%2Fflashing.html%23wwpID0E0DG0HA" target="_blank" rel="noopener">To generate an image to be flashed to an SD card</a></p>
<h2 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h2><p>用balenaEtcher烧录</p>
<h2 id="oem-config"><a href="#oem-config" class="headerlink" title="oem-config"></a>oem-config</h2><p>ps: 配置为中文</p>
<h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><h3 id="卸载多余应用"><a href="#卸载多余应用" class="headerlink" title="卸载多余应用"></a>卸载多余应用</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge libreoffice*</span><br><span class="line">sudo apt-get purge thunderbird*</span><br></pre></td></tr></table></figure>

<h3 id="最高性能模式"><a href="#最高性能模式" class="headerlink" title="最高性能模式"></a>最高性能模式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nvpmodel -m 0</span><br><span class="line">sudo jetson_clocks</span><br></pre></td></tr></table></figure>

<h2 id="Install-system-level-dependencies"><a href="#Install-system-level-dependencies" class="headerlink" title="Install system-level dependencies"></a>Install system-level dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git cmake</span><br><span class="line">sudo apt-get install libatlas-base-dev gfortran</span><br><span class="line">sudo apt-get install libhdf5-serial-dev hdf5-tools</span><br><span class="line">sudo apt-get install python3-dev</span><br><span class="line">sudo apt-get install nano locate</span><br><span class="line">sudo apt-get install libfreetype6-dev python3-setuptools</span><br><span class="line">sudo apt-get install cython3</span><br><span class="line">sudo apt-get install libxml2-dev libxslt1-dev</span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>

<h2 id="安装-proxychains"><a href="#安装-proxychains" class="headerlink" title="安装 proxychains"></a>安装 proxychains</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rofl0r/proxychains-ng.git</span><br><span class="line"><span class="built_in">cd</span> proxychains-ng</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo make install-config</span><br><span class="line">sudo vim /etc/proxychains.conf <span class="comment"># 修改代理地址</span></span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/rofl0r/proxychains-ng/issues/139#issuecomment-260360687" target="_blank" rel="noopener">#139</a></p>
<h2 id="Update-CMake"><a href="#Update-CMake" class="headerlink" title="Update CMake"></a>Update CMake</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">proxychains4 wget http://www.cmake.org/files/v3.13/cmake-3.13.0.tar.gz</span><br><span class="line">tar xpvf cmake-3.13.0.tar.gz cmake-3.13.0/</span><br><span class="line"><span class="built_in">cd</span> cmake-3.13.0/</span><br><span class="line">sudo proxychains4 apt-get install libssl-dev libcurl4-openssl-dev</span><br><span class="line">./bootstrap --system-curl</span><br><span class="line">make -j4</span><br><span class="line"><span class="comment"># 将jetson替换为你的用户名</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=/home/jetson/repos/cmake-3.13.0/bin/:$PATH'</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>

<h2 id="简化proxychains4"><a href="#简化proxychains4" class="headerlink" title="简化proxychains4"></a>简化proxychains4</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"alias pc4='proxychains4'"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"alias sudo='sudo '"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>ref :</p>
<ul>
<li><a href="https://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo" target="_blank" rel="noopener">Aliases not available when using sudo</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/111228714" target="_blank" rel="noopener">chainproxys-ng：在服务器/终端也能使用代理</a></li>
</ul>
<h2 id="Install-OpenCV-system-level-dependencies-and-other-development-dependencies"><a href="#Install-OpenCV-system-level-dependencies-and-other-development-dependencies" class="headerlink" title="Install OpenCV system-level dependencies and other development dependencies"></a>Install OpenCV system-level dependencies and other development dependencies</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install build-essential pkg-config</span><br><span class="line">sudo pc4 apt-get install libtbb2 libtbb-dev</span><br><span class="line">sudo pc4 apt-get install libavcodec-dev libavformat-dev libswscale-dev</span><br><span class="line">sudo pc4 apt-get install libxvidcore-dev libavresample-dev</span><br><span class="line">sudo pc4 apt-get install libtiff-dev libjpeg-dev libpng-dev</span><br><span class="line">sudo pc4 apt-get install python-tk libgtk-3-dev</span><br><span class="line">sudo pc4 apt-get install libcanberra-gtk-module libcanberra-gtk3-module</span><br><span class="line">sudo pc4 apt-get install libv4l-dev libdc1394-22-dev</span><br></pre></td></tr></table></figure>

<h2 id="Set-up-Python-virtual-environments-on-your-Jetson-Nano"><a href="#Set-up-Python-virtual-environments-on-your-Jetson-Nano" class="headerlink" title="Set up Python virtual environments on your Jetson Nano"></a>Set up Python virtual environments on your Jetson Nano</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">pc4 wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">sudo -H proxychains4 python3 get-pip.py</span><br><span class="line">rm get-pip.py</span><br><span class="line"></span><br><span class="line">sudo -H proxychains4 pip install virtualenv virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export WORKON_HOME=<span class="variable">$HOME</span>/.virtualenvs"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/local/bin/virtualenvwrapper.sh"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h2 id="Create-your-‘cv’-virtual-environment"><a href="#Create-your-‘cv’-virtual-environment" class="headerlink" title="Create your ‘cv’ virtual environment"></a>Create your ‘cv’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv cv -p python3</span><br><span class="line">workon cv</span><br></pre></td></tr></table></figure>

<h2 id="Create-‘tf2’-virtual-environment"><a href="#Create-‘tf2’-virtual-environment" class="headerlink" title="Create ‘tf2’ virtual environment"></a>Create ‘tf2’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mkvirtualenv tf2 -p python3</span><br></pre></td></tr></table></figure>

<h2 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protoc-3.12.3-linux-aarch_64.zip</span><br><span class="line">pc4 wget https://github.com/protocolbuffers/protobuf/releases/download/v3.12.3/protobuf-python-3.12.3.zip</span><br><span class="line"></span><br><span class="line">unzip protobuf-python-3.12.3.zip</span><br><span class="line">unzip protoc-3.12.3-linux-aarch_64.zip -d protoc-3.12.3</span><br><span class="line">sudo cp protoc-3.12.3/bin/protoc /usr/<span class="built_in">local</span>/bin/protoc</span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">export</span> PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp</span><br><span class="line"><span class="built_in">cd</span> protobuf-3.12.3/</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line">pip uninstall -y protobuf</span><br><span class="line">pip install Cython</span><br><span class="line"><span class="built_in">cd</span> python/</span><br><span class="line">python setup.py build --cpp_implementation</span><br><span class="line">python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">python setup.py install --cpp_implementation</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">python setup.py build --cpp_implementation</span><br><span class="line">python setup.py <span class="built_in">test</span> --cpp_implementation</span><br><span class="line">python setup.py install --cpp_implementation</span><br></pre></td></tr></table></figure>

<h2 id="Make-swapfile"><a href="#Make-swapfile" class="headerlink" title="Make swapfile"></a>Make swapfile</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fallocate -l 4G /var/swapfile</span><br><span class="line">sudo chmod 600 /var/swapfile</span><br><span class="line">sudo mkswap /var/swapfile</span><br><span class="line">sudo swapon /var/swapfile</span><br><span class="line">sudo bash -c <span class="string">'echo "/var/swapfile swap swap defaults 0 0" &gt;&gt; /etc/fstab'</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-Numpy-多余的，不要执行"><a href="#Install-Numpy-多余的，不要执行" class="headerlink" title="Install Numpy(多余的，不要执行)"></a>Install Numpy(多余的，不要执行)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install numpy</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install numpy</span><br></pre></td></tr></table></figure>

<h2 id="Install-tf1-15-in-‘cv’-virtual-environment"><a href="#Install-tf1-15-in-‘cv’-virtual-environment" class="headerlink" title="Install tf1.15 in ‘cv’ virtual environment"></a>Install tf1.15 in ‘cv’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">sudo pc4 apt-get install libhdf5-serial-dev hdf5-tools libhdf5-dev zlib1g-dev zip libjpeg8-dev liblapack-dev libblas-dev gfortran</span><br><span class="line">pc4 pip install -U testresources setuptools future==0.17.1 mock==3.0.5 h5py==2.9.0 keras_preprocessing==1.0.5 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line"></span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v44 <span class="string">'tensorflow&lt;2'</span></span><br></pre></td></tr></table></figure>

<p>在安装tensorflow时，numpy版本要求 &lt;1.19.0,&gt;=1.16.0，但在安装numpy==1.18.5时会报错</p>
<p>PS: &gt;1.19.0 的版本会提供 aarch64的whl</p>
<p>改为安装1.16.1</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install numpy==1.16.1</span><br></pre></td></tr></table></figure>

<p>之后再重新开始装tensorflow</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v44 <span class="string">'tensorflow&lt;2'</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-Jetson-stats"><a href="#安装-Jetson-stats" class="headerlink" title="安装 Jetson stats"></a>安装 Jetson stats</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo -H proxychains4 pip install -U jetson-stats</span><br></pre></td></tr></table></figure>

<h2 id="安装cuda等"><a href="#安装cuda等" class="headerlink" title="安装cuda等"></a>安装cuda等</h2><p>在创建镜像时，忘记执行<code>apply_binaries.sh</code>，导致一堆nvidia软件没装，所以用sdk manager重新刷入那些软件包</p>
<h2 id="Install-tf2-x-in-‘tf2’-virtual-environment"><a href="#Install-tf2-x-in-‘tf2’-virtual-environment" class="headerlink" title="Install tf2.x in ‘tf2’ virtual environment"></a>Install tf2.x in ‘tf2’ virtual environment</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon tf2</span><br><span class="line">pc4 pip install -U testresources setuptools numpy==1.16.1 future==0.17.1 mock==3.0.5 h5py==2.9.0 keras_preprocessing==1.0.5 keras_applications==1.0.8 gast==0.2.2 futures pybind11</span><br><span class="line"></span><br><span class="line">pc4 pip install --pre --extra-index-url https://developer.download.nvidia.com/compute/redist/jp/v44 tensorflow==2.3.1+nv20.10</span><br></pre></td></tr></table></figure>

<p>将完后，<code>import tensorflow</code>会出现错误 <code>ModuleNotFoundError: No module named &#39;google.protobuf&#39;</code></p>
<p>解决方法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/protobuf-3.12.3-py3.6-linux-aarch64.egg/google</span><br><span class="line">mv __init__.py bak.__init__.py</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/jkjung-avt/jetson_nano/issues/9#issuecomment-629803485" target="_blank" rel="noopener">Missing protobuf</a></p>
<h2 id="安装PyTorch"><a href="#安装PyTorch" class="headerlink" title="安装PyTorch"></a>安装PyTorch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos/</span><br><span class="line">pc4 wget https://nvidia.box.com/shared/static/wa34qwrwtk9njtyarwt5nvo6imenfy26.whl -O torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line">sudo pc4 apt install libopenblas-base libopenmpi-dev</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install Cython</span><br><span class="line">pc4 pip install torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"></span><br><span class="line">sudo pc4 apt install libjpeg-dev zlib1g-dev</span><br><span class="line">pc4 git <span class="built_in">clone</span> --branch v0.8.1 https://github.com/pytorch/vision torchvision</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.8.1</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment"># attempting to load torchvision from build dir will result in import error</span></span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Cython</span><br><span class="line">pc4 pip install torch-1.7.0-cp36-cp36m-linux_aarch64.whl</span><br><span class="line"><span class="built_in">cd</span> torchvision</span><br><span class="line"><span class="built_in">export</span> BUILD_VERSION=0.8.1</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>

<h2 id="Install-exFAT-Support"><a href="#Install-exFAT-Support" class="headerlink" title="Install exFAT Support"></a>Install exFAT Support</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install exfat-fuse exfat-utils</span><br></pre></td></tr></table></figure>

<h2 id="安装JetCam"><a href="#安装JetCam" class="headerlink" title="安装JetCam"></a>安装JetCam</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/jetcam</span><br><span class="line"><span class="built_in">cd</span> jetcam</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="安装二维码识别库"><a href="#安装二维码识别库" class="headerlink" title="安装二维码识别库"></a>安装二维码识别库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install libzbar0</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install pyzbar</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyzbar</span><br></pre></td></tr></table></figure>

<h2 id="安装串口库"><a href="#安装串口库" class="headerlink" title="安装串口库"></a>安装串口库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install pyserial</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pyserial</span><br></pre></td></tr></table></figure>

<h2 id="安装modbus-tk"><a href="#安装modbus-tk" class="headerlink" title="安装modbus_tk"></a>安装modbus_tk</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install modbus_tk</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install modbus_tk</span><br></pre></td></tr></table></figure>

<p>使用ttyTHS1作串口通信，需要禁用nvgetty服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br></pre></td></tr></table></figure>

<h2 id="安装crcmod"><a href="#安装crcmod" class="headerlink" title="安装crcmod"></a>安装crcmod</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install crcmod</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install crcmod</span><br></pre></td></tr></table></figure>

<h2 id="Install-TensorFlow-Object-Detection-API-1-15"><a href="#Install-TensorFlow-Object-Detection-API-1-15" class="headerlink" title="Install TensorFlow Object Detection API(1.15)"></a>Install TensorFlow Object Detection API(1.15)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos</span><br><span class="line">workon cv</span><br><span class="line">pc4 wget -O TF-1.15-models.zip https://codeload.github.com/tensorflow/models/zip/5f4d34fc982f599c105e152819fc3b7c82c92960</span><br><span class="line">unzip -q TF-1.15-models.zip</span><br><span class="line">mv models-5f4d34fc982f599c105e152819fc3b7c82c92960/ TF-1.15-models/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装coco api</span></span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/cocodataset/cocoapi.git</span><br><span class="line"><span class="built_in">cd</span> cocoapi/PythonAPI</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>最后一条指令会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: Setup script exited with error: Failed to download FreeType. Please download one of [&#39;https:&#x2F;&#x2F;downloads.sourcefor</span><br><span class="line">ge.net&#x2F;project&#x2F;freetype&#x2F;freetype2&#x2F;2.6.1&#x2F;freetype-2.6.1.tar.gz&#39;, &#39;https:&#x2F;&#x2F;download.savannah.gnu.org&#x2F;releases&#x2F;freetype&#x2F;fre</span><br><span class="line">etype-2.6.1.tar.gz&#39;] and extract it into build&#x2F;freetype-2.6.1 at the top-level of the source repository.</span><br></pre></td></tr></table></figure>

<p>解决方法，先装matplotlib：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos/</span><br><span class="line">pc4 wget https://github.com/matplotlib/matplotlib/archive/v3.3.2.tar.gz</span><br><span class="line">tar -xvf v3.3.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> matplotlib-3.3.2/</span><br><span class="line">pc4 wget https://downloads.sourceforge.net/project/freetype/freetype2/2.6.1/freetype-2.6.1.tar.gz</span><br><span class="line">mkdir build</span><br><span class="line">tar -xvf freetype-2.6.1.tar.gz -C build/</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>接着继续安装cocoapi</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/cocoapi/PythonAPI/</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>装完cocoapi后，正式装tfod</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/TF-1.15-models/research/</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> slim</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">python object_detection/builders/model_builder_test.py</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/NVIDIA-AI-IOT/jetcard/blob/4278b7790893517e5a7cbd2e12a72dba968ff8cf/install.sh#L121" target="_blank" rel="noopener">jetcard/install.sh</a></p>
<h2 id="Install-matplotlib-in-‘tf2’"><a href="#Install-matplotlib-in-‘tf2’" class="headerlink" title="Install matplotlib in ‘tf2’"></a>Install matplotlib in ‘tf2’</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/matplotlib-3.3.2/</span><br><span class="line">workon tf2</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<h2 id="Install-TensorFlow-Object-Detection-API-2-x"><a href="#Install-TensorFlow-Object-Detection-API-2-x" class="headerlink" title="Install TensorFlow Object Detection API(2.x)"></a>Install TensorFlow Object Detection API(2.x)</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/tensorflow/models TF-models</span><br><span class="line"><span class="built_in">cd</span> TF-models/research</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">protoc object_detection/protos/*.proto --python_out=.</span><br><span class="line">cp object_detection/packages/tf2/setup.py .</span><br><span class="line">pc4 python -m pip install --use-feature=2020-resolver .</span><br></pre></td></tr></table></figure>

<p>最后一条指令会报错，貌似是因为某个包要装pandas-1.1.2，而pandas要装numpy-1.15.4，在装numpy时出错</p>
<p>尝试先装 pandas-1.1.2</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip uninstall pandas</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget https://github.com/pandas-dev/pandas/releases/download/v1.1.2/pandas-1.1.2.tar.gz</span><br><span class="line">tar -xvf pandas-1.1.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> pandas-1.1.2/</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>再装tfod</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/TF-models/research/</span><br><span class="line">pc4 python -m pip install --use-feature=2020-resolver .</span><br></pre></td></tr></table></figure>

<p>但仍报错。搜索发现错误原因不在pandas，见<a href="https://github.com/tensorflow/models/issues/8910#issuecomment-717379607" target="_blank" rel="noopener">Trouble Installing TensorFlow</a>。</p>
<p>尝试先安装<code>REQUIRED_PACKAGES</code>，发现安装<code>tf-models-official</code>时会出现相同的错误。在安装<code>tf-models-official</code>时，装到opencv-python-headless那部分开始出错的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/cocoapi/PythonAPI/</span><br><span class="line">pc4 python setup.py install</span><br><span class="line">pc4 pip install pillow lxml matplotlib Cython contextlib2 tf-slim six pycocotools scipy pandas <span class="comment"># tf-models-official 会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="安装假的opencv-python-headless"><a href="#安装假的opencv-python-headless" class="headerlink" title="安装假的opencv-python-headless"></a>安装假的opencv-python-headless</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">mkdir opencv-headless</span><br><span class="line"><span class="built_in">cd</span> opencv-headless/</span><br><span class="line">mkdir opencv-python-headless</span><br><span class="line"><span class="built_in">cd</span> opencv-python-headless/</span><br><span class="line">touch __init__.py</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">nano setup.py</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"opencv-python-headless"</span>, <span class="comment"># Replace with your own username</span></span><br><span class="line">    version=<span class="string">"4.1.2"</span>,</span><br><span class="line">    author=<span class="string">"z14git"</span>,</span><br><span class="line">    author_email=<span class="string">"lzl1992@gmail.com"</span>,</span><br><span class="line">    description=<span class="string">"fake opencv"</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">        <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.6'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<h3 id="再次安装tf-models-official"><a href="#再次安装tf-models-official" class="headerlink" title="再次安装tf-models-official"></a>再次安装tf-models-official</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install tf-models-official</span><br></pre></td></tr></table></figure>

<p>会出现错误</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: Could not find a version that satisfies the requirement tensorflow-addons (from tf-models-official) (from versions: none)</span><br><span class="line">ERROR: No matching distribution found for tensorflow-addons (from tf-models-official)</span><br></pre></td></tr></table></figure>

<h4 id="安装TensorFlow-Addons"><a href="#安装TensorFlow-Addons" class="headerlink" title="安装TensorFlow Addons"></a>安装TensorFlow Addons</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget -O TF-addons-v0.10.0.zip https://github.com/tensorflow/addons/archive/v0.10.0.zip</span><br><span class="line">unzip TF-addons-v0.10.0.zip</span><br><span class="line"><span class="built_in">cd</span> addons-0.10.0</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<p>继续安装tf-models-official</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install tf-models-official</span><br></pre></td></tr></table></figure>

<p>这次在安装psutil时出错</p>
<h4 id="安装-psutil"><a href="#安装-psutil" class="headerlink" title="安装 psutil"></a>安装 psutil</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install gcc python3-dev</span><br><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/giampaolo/psutil.git</span><br><span class="line"><span class="built_in">cd</span> psutil</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>继续安装tf-models-official</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install tf-models-official</span><br></pre></td></tr></table></figure>

<p>这次在安装dm-tree时出错</p>
<h4 id="安装-bazel"><a href="#安装-bazel" class="headerlink" title="安装 bazel"></a>安装 bazel</h4><p>要编译dm-tree，需要先安装，到<a href="https://github.com/tensorflow/tensorflow/blob/r2.3/.bazelversion" target="_blank" rel="noopener">tensorflow仓库</a>查看需要安装的bazel版本</p>
<p>tf-2.3 对应 bazel-3.1.0</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget https://github.com/bazelbuild/bazel/releases/download/3.1.0/bazel-3.1.0-dist.zip</span><br><span class="line">sudo pc4 apt install pkg-config zip g++ zlib1g-dev unzip</span><br><span class="line">sudo pc4 apt install -y openjdk-8-jdk</span><br><span class="line">unzip bazel-3.1.0-dist.zip -d bazel-3.1.0</span><br><span class="line"><span class="built_in">cd</span> bazel-3.1.0/</span><br><span class="line">EXTRA_BAZEL_ARGS=<span class="string">"--host_javabase=@local_jdk//:jdk"</span> ./compile.sh</span><br><span class="line">sudo cp output/bazel /usr/<span class="built_in">local</span>/bin</span><br><span class="line">bazel <span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/jkjung-avt/jetson_nano/blob/master/install_bazel-0.26.1.sh" target="_blank" rel="noopener">install_bazel-0.26.1.sh</a></li>
<li><a href="https://docs.bazel.build/versions/3.7.0/install-compile-source.html#bootstrap-bazel" target="_blank" rel="noopener">Build Bazel from scratch (bootstrapping)</a></li>
</ul>
<h4 id="安装-dm-tree"><a href="#安装-dm-tree" class="headerlink" title="安装 dm-tree"></a>安装 dm-tree</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install dm-tree</span><br></pre></td></tr></table></figure>

<p>出现以下错误：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: /tmp/pip-install-25h6wns8/dm-tree/tree/BUILD:27:1: //tree:_tree.so depends on @pybind11_archive//:pybind11 in repository @pybind11_arc</span><br><span class="line">hive which failed to fetch. no such package '@pybind11_archive//': java.io.IOException: Error downloading [https://github.com/pybind/pybind11/arc</span><br><span class="line">hive/v2.4.3.tar.gz] to /home/jetson/.cache/bazel/_bazel_jetson/25cba22469f77ed2958dd2d4a6b0213f/external/pybind11_archive/v2.4.3.tar.gz: Unknow</span><br><span class="line">n host: codeload.github.com</span><br></pre></td></tr></table></figure>

<p>用代理也不行，so手动下载到指定目录再装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/jetson/.cache/bazel/_bazel_jetson/25cba22469f77ed2958dd2d4a6b0213f/external/pybind11_archive/</span><br><span class="line">pc4 wget https://github.com/pybind/pybind11/archive/v2.4.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pip install dm-tree</span><br></pre></td></tr></table></figure>

<p>继续安装tf-models-official</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install tf-models-official --use-feature=2020-resolver</span><br></pre></td></tr></table></figure>

<h3 id="再次安装TFOD2"><a href="#再次安装TFOD2" class="headerlink" title="再次安装TFOD2"></a>再次安装TFOD2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/TF-models/research</span><br><span class="line">pc4 python -m pip install .</span><br></pre></td></tr></table></figure>

<p>装到pyarrow-0.17.1会出错</p>
<h4 id="安装-pyarrow-0-17-1"><a href="#安装-pyarrow-0-17-1" class="headerlink" title="安装 pyarrow-0.17.1"></a>安装 pyarrow-0.17.1</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">workon tf2</span><br><span class="line">pc4 wget https://github.com/apache/arrow/archive/apache-arrow-0.17.1.zip</span><br><span class="line">unzip -q apache-arrow-0.17.1.zip</span><br><span class="line"><span class="built_in">cd</span> arrow-apache-arrow-0.17.1/cpp</span><br><span class="line">mkdir release</span><br><span class="line"><span class="built_in">cd</span> release</span><br><span class="line"><span class="built_in">export</span> ARROW_HOME=/usr/<span class="built_in">local</span> <span class="comment"># 注意不是/usr/local/lib</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">sudo pc4 apt-get install libjemalloc-dev libboost-dev \</span><br><span class="line">                       libboost-filesystem-dev \</span><br><span class="line">                       libboost-system-dev \</span><br><span class="line">                       libboost-regex-dev \</span><br><span class="line">                       python3-dev \</span><br><span class="line">                       autoconf \</span><br><span class="line">                       flex \</span><br><span class="line">                       bison \</span><br><span class="line">                       libssl-dev \</span><br><span class="line">                       curl</span><br><span class="line">pc4 pip install six numpy pandas cython pytest psutil</span><br><span class="line">sudo pc4 apt-get install llvm-7 clang</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=<span class="variable">$ARROW_HOME</span> \</span><br><span class="line">      -DCMAKE_INSTALL_LIBDIR=lib \</span><br><span class="line">      -DARROW_FLIGHT=ON \</span><br><span class="line">      -DARROW_GANDIVA=ON \</span><br><span class="line">      -DARROW_ORC=ON \</span><br><span class="line">      -DARROW_WITH_BZ2=ON \</span><br><span class="line">      -DARROW_WITH_ZLIB=ON \</span><br><span class="line">      -DARROW_WITH_ZSTD=ON \</span><br><span class="line">      -DARROW_WITH_LZ4=ON \</span><br><span class="line">      -DARROW_WITH_SNAPPY=ON \</span><br><span class="line">      -DARROW_WITH_BROTLI=ON \</span><br><span class="line">      -DARROW_PARQUET=ON \</span><br><span class="line">      -DARROW_PYTHON=ON \</span><br><span class="line">      -DARROW_PLASMA=ON \</span><br><span class="line">      -DARROW_CUDA=ON \</span><br><span class="line">      -DARROW_BUILD_TESTS=ON \</span><br><span class="line">      -DPYTHON_EXECUTABLE=/usr/bin/python3 ..</span><br><span class="line">pc4 make -j4</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line"><span class="built_in">cd</span> python/</span><br><span class="line">pc4 pip install -r requirements-build.txt</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_FLIGHT=1</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_GANDIVA=1</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_ORC=1</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_PARQUET=1</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_CUDA=1</span><br><span class="line"><span class="built_in">export</span> PYARROW_WITH_PLASMA=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面4条指令或许不需要</span></span><br><span class="line">sudo mv /usr/<span class="built_in">local</span>/lib/lib /usr/<span class="built_in">local</span>/lib/libarrow</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/lib/libarrow:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">vim cmake_modules/SetupCxxFlags.cmake</span><br><span class="line"><span class="comment"># line 57 set(ARROW_ARMV8_ARCH_FLAG "-march=armv8-a")</span></span><br><span class="line"><span class="comment"># Line 338-340 just commented out:</span></span><br><span class="line"><span class="comment"># if(NOT CXX_SUPPORTS_ARMV8_ARCH)</span></span><br><span class="line"><span class="comment">#   message(FATAL_ERROR "Unsupported arch flag: $&#123;ARROW_ARMV8_ARCH_FLAG&#125;.")</span></span><br><span class="line"><span class="comment"># endif()</span></span><br><span class="line"><span class="built_in">export</span> ARROW_LIB_DIR=/usr/<span class="built_in">local</span>/lib/libarrow</span><br><span class="line"><span class="comment"># 下面的指令执行失败再尝试上面4条指令</span></span><br><span class="line">python setup.py build_ext --inplace</span><br><span class="line">pc4 python setup.py install</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://gist.github.com/heavyinfo/04e1326bb9bed9cecb19c2d603c8d521" target="_blank" rel="noopener">Why build Apache Arrow from source on ARM?</a></li>
<li><a href="https://discuss.streamlit.io/t/raspberry-pi-streamlit/2900/19" target="_blank" rel="noopener">shadanan</a></li>
</ul>
<h3 id="再再次安装TFOD2"><a href="#再再次安装TFOD2" class="headerlink" title="再再次安装TFOD2"></a>再再次安装TFOD2</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/TF-models/research</span><br><span class="line">pc4 python -m pip install .</span><br></pre></td></tr></table></figure>

<p>这次到安装opencv-python时出错，so制作一个假的opencv-python包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">mkdir opencv-python-dummy</span><br><span class="line"><span class="built_in">cd</span> opencv-python-dummy</span><br><span class="line">mkdir opencv-python</span><br><span class="line"><span class="built_in">cd</span> opencv-python/</span><br><span class="line">touch __init__.py</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">nano setup.py</span><br></pre></td></tr></table></figure>

<p>内容如下：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> setuptools</span><br><span class="line"></span><br><span class="line">setuptools.setup(</span><br><span class="line">    name=<span class="string">"opencv-python"</span>, <span class="comment"># Replace with your own username</span></span><br><span class="line">    version=<span class="string">"4.5.0"</span>,</span><br><span class="line">    author=<span class="string">"z14git"</span>,</span><br><span class="line">    author_email=<span class="string">"lzl1992@gmail.com"</span>,</span><br><span class="line">    description=<span class="string">"fake opencv"</span>,</span><br><span class="line">    packages=setuptools.find_packages(),</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">        <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">'&gt;=3.6'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><code>pip install .</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/TF-models/research</span><br><span class="line">pc4 python -m pip install .</span><br></pre></td></tr></table></figure>

<p>安装完后会提示有两个包不兼容：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">apache-beam 2.25.0 requires avro-python3!=1.9.2,&lt;1.10.0,&gt;=1.8.1; python_version &gt;= "3.0", but you'll have avro-python3 1</span><br><span class="line">.10.0 which is incompatible.</span><br><span class="line">lvis 0.5.3 requires numpy&gt;=1.18.2, but you'll have numpy 1.16.1 which is incompatible.</span><br></pre></td></tr></table></figure>

<p>so</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pc4 pip install avro==1.9.1</span><br></pre></td></tr></table></figure>

<p>执行测试</p>
<p><code>python object_detection/builders/model_builder_tf2_test.py</code></p>
<p>errors=1, skipped=1</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">ERROR: test_create_ssd_models_from_config</span><br><span class="line">...</span><br><span class="line">tensorflow.python.framework.errors_impl.ResourceExhaustedError: OOM when allocating tensor with shape[1,1,2304,384] and type float on /job:localhost/replica:0/task:0/device:GPU:0 by all</span><br><span class="line">ocator GPU_0_bfc [Op:Add]</span><br></pre></td></tr></table></figure>

<p>原因貌似是内存不够了</p>
<h2 id="Install-opencv"><a href="#Install-opencv" class="headerlink" title="Install opencv"></a>Install opencv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/</span><br><span class="line">pc4 wget -O opencv-4.5.0.zip https://github.com/opencv/opencv/archive/4.5.0.zip</span><br><span class="line">pc4 wget -O opencv_contrib-4.5.0.zip https://github.com/opencv/opencv_contrib/archive/4.5.0.zip</span><br><span class="line">sudo pc4 apt install libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libjpeg-turbo8-dev liblapacke-dev libopenblas-dev libpostproc-dev libtesseract-dev libxine2-dev libx264-dev qv4l2 v4l-utils v4l2ucp</span><br><span class="line"></span><br><span class="line">unzip -q opencv-4.5.0.zip</span><br><span class="line">unzip -q opencv_contrib-4.5.0.zip</span><br><span class="line">mv opencv-4.5.0 opencv</span><br><span class="line">mv opencv_contrib-4.5.0 opencv_contrib</span><br><span class="line">workon cv</span><br><span class="line"><span class="built_in">cd</span> opencv/</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">	-D WITH_CUDA=ON \</span><br><span class="line">	-D CUDA_ARCH_PTX=<span class="string">""</span> \</span><br><span class="line">	-D CUDA_ARCH_BIN=<span class="string">"5.3,6.2,7.2"</span> \</span><br><span class="line">	-D WITH_CUBLAS=ON \</span><br><span class="line">	-D WITH_LIBV4L=ON \</span><br><span class="line">	-D BUILD_opencv_python3=ON \</span><br><span class="line">	-D BUILD_opencv_python2=OFF \</span><br><span class="line">	-D BUILD_opencv_java=OFF \</span><br><span class="line">	-D WITH_GSTREAMER=ON \</span><br><span class="line">	-D WITH_GTK=ON \</span><br><span class="line">	-D BUILD_TESTS=OFF \</span><br><span class="line">	-D BUILD_PERF_TESTS=OFF \</span><br><span class="line">	-D BUILD_EXAMPLES=OFF \</span><br><span class="line">	-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">	-D OPENCV_EXTRA_MODULES_PATH=/home/jetson/repos/opencv_contrib/modules ..</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/mdegans/nano_build_opencv/blob/master/build_opencv.sh" target="_blank" rel="noopener">build_opencv</a>–ps:没用</p>
<p>最后一条指令执行后，提示有错。尝试更新cmake再装。</p>
<h3 id="Update-CMake-again"><a href="#Update-CMake-again" class="headerlink" title="Update CMake again"></a>Update CMake again</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 wget https://cmake.org/files/v3.18/cmake-3.18.4.tar.gz</span><br><span class="line">tar xpvf cmake-3.18.4.tar.gz cmake-3.18.4/</span><br><span class="line"><span class="built_in">cd</span> cmake-3.18.4</span><br><span class="line">./bootstrap --system-curl</span><br><span class="line">make -j4</span><br><span class="line">vim ~/.bashrc <span class="comment"># 将之前的cmake-3.13.0/bin路径改为cmake-3.18.4/bin</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<h3 id="使用Tengine加速"><a href="#使用Tengine加速" class="headerlink" title="使用Tengine加速"></a>使用Tengine加速</h3><p>编译时，增加参数<code>-D WITH_TENGINE=ON</code></p>
<p>ref: <a href="https://github.com/opencv/opencv/wiki/Tengine-based-acceleration" target="_blank" rel="noopener">Tengine based acceleration</a></p>
<h3 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/opencv/</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">workon cv</span><br><span class="line"></span><br><span class="line">pc4 cmake -D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">	-D BUILD_opencv_python2=OFF \</span><br><span class="line">	-D BUILD_opencv_python3=ON \</span><br><span class="line">	-D BUILD_opencv_java_bindings_generator=OFF \</span><br><span class="line">	-D CMAKE_BUILD_TYPE=RELEASE \</span><br><span class="line">	-D OPENCV_DNN_CUDA=ON \</span><br><span class="line">	-D OPENCV_ENABLE_NONFREE=ON \</span><br><span class="line">	-D OPENCV_EXTRA_MODULES_PATH=/home/jetson/repos/opencv_contrib/modules \</span><br><span class="line">	-D PYTHON3_NUMPY_INCLUDE_DIRS=/home/jetson/.virtualenvs/cv/lib/python3.6/site-packages/numpy/core/include \</span><br><span class="line">	-D WITH_CUDA=ON \</span><br><span class="line">	-D WITH_GSTREAMER=ON \</span><br><span class="line">	-D WITH_TENGINE=ON \</span><br><span class="line">	-D WITH_VULKAN=ON \</span><br><span class="line">	-D WITH_FREETYPE=ON \</span><br><span class="line">	-D WITH_OPENGL=ON ..</span><br><span class="line"></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line"><span class="comment"># 装到cv</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so cv2.so</span><br><span class="line"><span class="comment"># 装到tf2</span></span><br><span class="line"><span class="built_in">cd</span> ~/.virtualenvs/tf2/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python3.6/dist-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so cv2.so</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://docs.opencv.org/master/db/d05/tutorial_config_reference.html" target="_blank" rel="noopener">OpenCV configuration options reference</a></p>
<p>ps: 根据上面的链接，查看可用的编译选项，发现有些之前装4.1.2时使用的选项已经没有了。</p>
<h2 id="安装screen"><a href="#安装screen" class="headerlink" title="安装screen"></a>安装screen</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt update</span><br><span class="line">sudo pc4 apt install screen</span><br></pre></td></tr></table></figure>

<h2 id="Install-traitlets"><a href="#Install-traitlets" class="headerlink" title="Install traitlets"></a>Install traitlets</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install traitlets</span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install traitlets</span><br></pre></td></tr></table></figure>

<h2 id="Install-Jupyter-Lab"><a href="#Install-Jupyter-Lab" class="headerlink" title="Install Jupyter Lab"></a>Install Jupyter Lab</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt install -y curl</span><br><span class="line">deactivate</span><br><span class="line">pc4 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line">sudo pc4 apt install -y nodejs libffi-dev</span><br><span class="line">sudo -H proxychains4 pip3 install jupyter jupyterlab</span><br><span class="line">sudo -H proxychains4 jupyter labextension install @jupyter-widgets/jupyterlab-manager</span><br><span class="line"></span><br><span class="line">jupyter lab --generate-config</span><br><span class="line">python3 -c <span class="string">"from notebook.auth.security import set_password; set_password('frotech', '<span class="variable">$HOME</span>/.jupyter/jupyter_notebook_config.json')"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fix for Traitlet permission error</span></span><br><span class="line">sudo chown -R frotech:frotech ~/.<span class="built_in">local</span>/share/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建notebook目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir Tutorials</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cv</span></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=cv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tf2</span></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install ipykernel</span><br><span class="line">python -m ipykernel install --user --name=tf2</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/NVIDIA-AI-IOT/jetcard/blob/8f793f4df703cd53cae20955f72c73ac81907074/install.sh#L74" target="_blank" rel="noopener">install.sh</a></p>
<h3 id="设置自动启动服务"><a href="#设置自动启动服务" class="headerlink" title="设置自动启动服务"></a>设置自动启动服务</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">deactivate</span><br><span class="line">pc4 wget https://github.com/z14git/jetcard/raw/jetpack_4.2.1/jetcard/create_jupyter_service.py</span><br><span class="line">python3 create_jupyter_service.py --working_directory <span class="variable">$HOME</span>/Tutorials</span><br><span class="line">sudo mv jetcard_jupyter.service /etc/systemd/system/jetcard_jupyter.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetcard_jupyter</span><br><span class="line">sudo systemctl start jetcard_jupyter</span><br><span class="line">rm create_jupyter_service.py</span><br></pre></td></tr></table></figure>

<h2 id="安装pandas到cv"><a href="#安装pandas到cv" class="headerlink" title="安装pandas到cv"></a>安装pandas到cv</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install pandas</span><br></pre></td></tr></table></figure>

<h2 id="解决-dev-ttyTHS1权限问题"><a href="#解决-dev-ttyTHS1权限问题" class="headerlink" title="解决/dev/ttyTHS1权限问题"></a>解决<code>/dev/ttyTHS1</code>权限问题</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="增加OLED信息显示服务"><a href="#增加OLED信息显示服务" class="headerlink" title="增加OLED信息显示服务"></a>增加OLED信息显示服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/jetbot.git</span><br><span class="line"><span class="built_in">cd</span> jetbot/</span><br><span class="line">git checkout z_jp4.4</span><br><span class="line">deactivate</span><br><span class="line">python3 jetbot/utils/create_stats_service.py</span><br><span class="line">sudo mv jetbot_stats.service /etc/systemd/system/jetbot_stats.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jetbot_stats</span><br><span class="line">sudo systemctl start jetbot_stats</span><br></pre></td></tr></table></figure>

<h2 id="Install-Adafruit-SSD1306"><a href="#Install-Adafruit-SSD1306" class="headerlink" title="Install Adafruit_SSD1306"></a>Install Adafruit_SSD1306</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install Adafruit_SSD1306</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Adafruit_SSD1306</span><br></pre></td></tr></table></figure>

<h2 id="build-rtsp-server"><a href="#build-rtsp-server" class="headerlink" title="build rtsp server"></a>build rtsp server</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get install libgstrtspserver-1.0 libgstreamer1.0-dev</span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/GStreamer/gst-rtsp-server.git</span><br><span class="line"><span class="built_in">cd</span> gst-rtsp-server/</span><br><span class="line">git checkout 1.14</span><br><span class="line"><span class="built_in">cd</span> examples/</span><br><span class="line">gcc <span class="built_in">test</span>-launch.c -o <span class="built_in">test</span>-launch $(pkg-config --cflags --libs gstreamer-1.0 gstreamer-rtsp-server-1.0)</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://forums.developer.nvidia.com/t/how-do-i-use-jetson-nano-as-cctv/74715" target="_blank" rel="noopener">How do I use Jetson Nano as CCTV?</a></li>
<li><a href="https://forums.developer.nvidia.com/t/jetson-nano-faq/82953" target="_blank" rel="noopener">Jetson Nano FAQ</a></li>
</ul>
<h2 id="INSTALL-v4l2loopback"><a href="#INSTALL-v4l2loopback" class="headerlink" title="INSTALL v4l2loopback"></a>INSTALL v4l2loopback</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">mkdir v4l2loopback</span><br><span class="line">proxychains4 git <span class="built_in">clone</span> https://github.com/umlaeute/v4l2loopback.git v4l2loopback</span><br><span class="line"><span class="built_in">cd</span> v4l2loopback/</span><br><span class="line">git checkout v0.10.0</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>ps: 使用时，执行<code>sudo modprobe v4l2loopback</code></p>
<p>ref:</p>
<ul>
<li><a href="https://github.com/umlaeute/v4l2loopback" target="_blank" rel="noopener">v4l2loopback</a></li>
<li><a href="https://forums.developer.nvidia.com/t/jetpack-4-2-1-building-v4l2loopback-fails/79201" target="_blank" rel="noopener">Jetpack 4.2.1 : building v4l2loopback fails</a></li>
</ul>
<h2 id="install-pygame"><a href="#install-pygame" class="headerlink" title="install pygame"></a>install pygame</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt update</span><br><span class="line">sudo pc4 apt install libsdl1.2-dev</span><br><span class="line">sudo pc4 apt install python-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl1.2-dev libsmpeg-dev python-numpy subversion libportmidi-dev ffmpeg libswscale-dev libavformat-dev libavcodec-dev libfreetype6-dev</span><br><span class="line">sudo pc4 apt install libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev libsdl2-mixer-dev</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install pygame</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install pygame</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://forums.developer.nvidia.com/t/install-pygame-on-jetson-nano/83731" target="_blank" rel="noopener">Install Pygame on Jetson nano?</a></li>
<li><a href="https://lazyfoo.net/tutorials/SDL/01_hello_SDL/linux/index.php" target="_blank" rel="noopener">Setting up SDL 2 on Linux</a></li>
</ul>
<p>ps: build pygame时，提示部分模块<code>not found</code>的话，用<code>apt-cache search libsdl2</code>查找</p>
<h2 id="install-flask"><a href="#install-flask" class="headerlink" title="install flask"></a>install flask</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install Flask</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install Flask</span><br></pre></td></tr></table></figure>

<h2 id="安装aiocoap"><a href="#安装aiocoap" class="headerlink" title="安装aiocoap"></a>安装aiocoap</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">workon cv</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/chrysn/aiocoap</span><br><span class="line"><span class="built_in">cd</span> aiocoap/</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install --upgrade <span class="string">".[all]"</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-temporal-shift-module"><a href="#Install-temporal-shift-module" class="headerlink" title="Install temporal-shift-module"></a>Install temporal-shift-module</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">sudo pc4 apt install llvm <span class="comment"># install llvm which is required by tvm</span></span><br><span class="line">pc4 git <span class="built_in">clone</span> -b v0.6 https://github.com/apache/incubator-tvm.git</span><br><span class="line"><span class="built_in">cd</span> incubator-tvm</span><br><span class="line">pc4 git submodule update --init</span><br><span class="line">mkdir build</span><br><span class="line">cp cmake/config.cmake build/</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">vim config.cmake</span><br><span class="line"><span class="comment"># 32 line: USE_CUDA OFF -&gt; USE_CUDA ON</span></span><br><span class="line"><span class="comment">#104 line: USE_LLVM OFF -&gt; USE_LLVM ON</span></span><br><span class="line">cmake ..</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> python</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> topi/python</span><br><span class="line">pc4 python setup.py install</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br><span class="line">sudo pc4 apt-get install protobuf-compiler libprotoc-dev</span><br><span class="line">pc4 pip install onnx</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> https://github.com/daquexian/onnx-simplifier</span><br><span class="line"><span class="built_in">cd</span> onnx-simplifier</span><br><span class="line">pc4 pip install .</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/mit-han-lab/temporal-shift-module/tree/master/online_demo" target="_blank" rel="noopener">TSM Online Hand Gesture Recognition Demo</a></p>
<h2 id="Install-jetson-inference"><a href="#Install-jetson-inference" class="headerlink" title="Install jetson-inference"></a>Install jetson-inference</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pc4 apt-get update</span><br><span class="line">sudo pc4 apt-get install libpython3-dev python3-numpy</span><br><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">pc4 git <span class="built_in">clone</span> --recursive https://github.com/z14git/jetson-inference.git</span><br><span class="line"><span class="built_in">cd</span> jetson-inference</span><br><span class="line">git checkout proxyC</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ../ <span class="comment"># 选择下载哪些模型，跳过安装PyTorch</span></span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到cv</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line"><span class="comment">## 修改下面的路径，将其改为cv环境的路径，注意dist-packages改为site-packages</span></span><br><span class="line"><span class="comment"># set(PYTHON_BINDING_INSTALL_DIR /usr/lib/python$&#123;PYTHON_VERSION_MAJOR&#125;.$&#123;PYTHON_VERSION_MINOR&#125;/dist-packages)</span></span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">sudo make install</span><br><span class="line">sudo rm -r ~/.virtualenvs/cv/lib/python2.7/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装到tf2，一样要修改路径</span></span><br><span class="line">vim ../python/bindings/CMakeLists.txt</span><br><span class="line">vim ../utils/python/bindings/CMakeLists.txt <span class="comment">#修改方法同上</span></span><br><span class="line">sudo make install</span><br><span class="line">sudo rm -r ~/.virtualenvs/tf2/lib/python2.7/</span><br></pre></td></tr></table></figure>

<p>ref:</p>
<ul>
<li><a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/building-repo-2.md" target="_blank" rel="noopener">Building the Project from Source</a></li>
<li><a href="https://github.com/dusty-nv/jetson-inference/issues/482" target="_blank" rel="noopener">Cmake not Detecting Virtual Environment (venv)</a></li>
</ul>
<h2 id="Install-ipywidgets"><a href="#Install-ipywidgets" class="headerlink" title="Install ipywidgets"></a>Install ipywidgets</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install ipywidgets</span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install ipywidgets</span><br></pre></td></tr></table></figure>

<h2 id="Install-vscode-server"><a href="#Install-vscode-server" class="headerlink" title="Install vscode server"></a>Install vscode server</h2><p>安装插件：Python, Pylance</p>
<h2 id="Install-yapf"><a href="#Install-yapf" class="headerlink" title="Install yapf"></a>Install yapf</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install yapf</span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install yapf</span><br></pre></td></tr></table></figure>

<h2 id="Install-requests-socks"><a href="#Install-requests-socks" class="headerlink" title="Install requests[socks]"></a>Install requests[socks]</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">workon cv</span><br><span class="line">pc4 pip install requests[socks]</span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install requests[socks]</span><br></pre></td></tr></table></figure>

<h2 id="Pytorch-ssd"><a href="#Pytorch-ssd" class="headerlink" title="Pytorch-ssd"></a>Pytorch-ssd</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos/jetson-inference/python/training/detection/ssd</span><br><span class="line">pc4 wget https://nvidia.box.com/shared/static/djf5w54rjvpqocsiztzaandq1m3avr7c.pth -O models/mobilenet-v1-ssd-mp-0_675.pth</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pc4 pip install boto3 pandas urllib3</span><br><span class="line">workon cv</span><br><span class="line">pc4 pip install boto3 pandas urllib3</span><br><span class="line"></span><br><span class="line">pc4 python open_images_downloader.py --class-names <span class="string">"Apple,Orange,Banana,Strawberry,Grape,Pear,Pineapple,Watermelon"</span> --data=data/fruit</span><br></pre></td></tr></table></figure>

<p>ref: <a href="https://github.com/dusty-nv/jetson-inference/blob/master/docs/pytorch-ssd.md" target="_blank" rel="noopener">pytorch-ssd</a></p>
<h2 id="Install-bmon"><a href="#Install-bmon" class="headerlink" title="Install bmon"></a>Install bmon</h2><p>查网络流量</p>
<p><code>sudo pc4 apt install bmon</code></p>
<h2 id="Re-enable-oem-config"><a href="#Re-enable-oem-config" class="headerlink" title="Re-enable oem-config"></a>Re-enable oem-config</h2><p>见：<a href="/sundries/2020/11/17/re-enable-oem-config/" title="Reconfiguring a Jetson Device with oem-config">Reconfiguring a Jetson Device with oem-config</a></p>
<h2 id="Install-frotech-adapter"><a href="#Install-frotech-adapter" class="headerlink" title="Install frotech_adapter"></a>Install frotech_adapter</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/repos</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/z14git/aiotlab_jetson_adapter.git</span><br><span class="line"><span class="built_in">cd</span> aiotlab_jetson_adapter/</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">pip install .</span><br><span class="line"></span><br><span class="line">workon tf2</span><br><span class="line">pip install .</span><br></pre></td></tr></table></figure>

<h2 id="重新禁用nvgetty服务"><a href="#重新禁用nvgetty服务" class="headerlink" title="重新禁用nvgetty服务"></a>重新禁用nvgetty服务</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop nvgetty</span><br><span class="line">sudo systemctl <span class="built_in">disable</span> nvgetty</span><br><span class="line">udevadm trigger</span><br><span class="line"><span class="comment"># You may want to reboot instead</span></span><br></pre></td></tr></table></figure>

<h2 id="安装torch2trt"><a href="#安装torch2trt" class="headerlink" title="安装torch2trt"></a>安装torch2trt</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> repos/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/NVIDIA-AI-IOT/torch2trt</span><br><span class="line"><span class="built_in">cd</span> torch2trt/</span><br><span class="line"></span><br><span class="line">workon cv</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件tensorrt到cv</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">cd</span> .virtualenvs/cv/lib/python3.6/site-packages/</span><br><span class="line">ln -s /usr/lib/python3.6/dist-packages/tensorrt tensorrt</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>systemd配置文件</title>
    <url>/sundries/2020/05/12/systemd%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="配置文件的格式"><a href="#配置文件的格式" class="headerlink" title="配置文件的格式"></a>配置文件的格式</h2><p>配置文件就是普通的文本文件，可以用文本编辑器打开。</p>
<p><code>systemctl cat</code>命令可以查看配置文件的内容。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl cat atd.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=ATD daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/atd</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如<code>[Unit]</code>。注意，配置文件的区块名和字段名，都是大小写敏感的。</p>
<p>每个区块内部是一些等号连接的键值对。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Section]</span><br><span class="line">Directive1=value</span><br><span class="line">Directive2=value</span><br><span class="line"></span><br><span class="line">. . .</span><br></pre></td></tr></table></figure>

<p>注意，键值对的等号两侧不能有空格。</p>
<h2 id="配置文件的区块"><a href="#配置文件的区块" class="headerlink" title="配置文件的区块"></a>配置文件的区块</h2><p><code>[Unit]</code>区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他 Unit 的关系。它的主要字段如下。</p>
<blockquote>
<ul>
<li>Description：简短描述</li>
<li>Documentation：文档地址</li>
<li>Requires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败</li>
<li>Wants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败</li>
<li>BindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行</li>
<li>Before：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动</li>
<li>After：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动</li>
<li>Conflicts：这里指定的 Unit 不能与当前 Unit 同时运行</li>
<li>Condition…：当前 Unit 运行必须满足的条件，否则不会运行</li>
<li>Assert…：当前 Unit 运行必须满足的条件，否则会报启动失败</li>
</ul>
</blockquote>
<p><code>[Install]</code>通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。</p>
<blockquote>
<ul>
<li>WantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中</li>
<li>RequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中</li>
<li>Alias：当前 Unit 可用于启动的别名</li>
<li>Also：当前 Unit 激活（enable）时，会被同时激活的其他 Unit</li>
</ul>
</blockquote>
<p><code>[Service]</code>区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。</p>
<blockquote>
<ul>
<li>Type：定义启动时的进程行为。它有以下几种值。</li>
<li>Type=simple：默认值，执行ExecStart指定的命令，启动主进程</li>
<li>Type=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出</li>
<li>Type=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行</li>
<li>Type=dbus：当前服务通过D-Bus启动</li>
<li>Type=notify：当前服务启动完毕，会通知Systemd，再继续往下执行</li>
<li>Type=idle：若有其他任务执行完毕，当前服务才会运行</li>
<li>ExecStart：启动当前服务的命令</li>
<li>ExecStartPre：启动当前服务之前执行的命令</li>
<li>ExecStartPost：启动当前服务之后执行的命令</li>
<li>ExecReload：重启当前服务时执行的命令</li>
<li>ExecStop：停止当前服务时执行的命令</li>
<li>ExecStopPost：停止当其服务之后执行的命令</li>
<li>RestartSec：自动重启当前服务间隔的秒数</li>
<li>Restart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog</li>
<li>TimeoutSec：定义 Systemd 停止当前服务之前等待的秒数</li>
<li>Environment：指定环境变量</li>
</ul>
</blockquote>
<p>Unit 配置文件的完整字段清单，请参考<a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html" target="_blank" rel="noopener">官方文档</a>。</p>
<blockquote>
<p>ref: <a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>systemctl基础用法</title>
    <url>/sundries/2020/05/12/systemctl%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line">$ sudo systemctl reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭系统，切断电源</span></span><br><span class="line">$ sudo systemctl poweroff</span><br><span class="line"></span><br><span class="line"><span class="comment"># CPU停止工作</span></span><br><span class="line">$ sudo systemctl halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停系统</span></span><br><span class="line">$ sudo systemctl <span class="built_in">suspend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入冬眠状态</span></span><br><span class="line">$ sudo systemctl hibernate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让系统进入交互式休眠状态</span></span><br><span class="line">$ sudo systemctl hybrid-sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动进入救援状态（单用户状态）</span></span><br><span class="line">$ sudo systemctl rescue</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看启动耗时</span></span><br><span class="line">$ systemd-analyze</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看每个服务的启动耗时</span></span><br><span class="line">$ systemd-analyze blame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示瀑布状的启动过程流</span></span><br><span class="line">$ systemd-analyze critical-chain</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定服务的启动流</span></span><br><span class="line">$ systemd-analyze critical-chain atd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前主机的信息</span></span><br><span class="line">$ hostnamectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置主机名。</span></span><br><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname rhel7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地化设置</span></span><br><span class="line">$ localectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置本地化参数。</span></span><br><span class="line">$ sudo localectl <span class="built_in">set</span>-locale LANG=en_GB.utf8</span><br><span class="line">$ sudo localectl <span class="built_in">set</span>-keymap en_GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前时区设置</span></span><br><span class="line">$ timedatectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有可用的时区</span></span><br><span class="line">$ timedatectl list-timezones</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置当前时区</span></span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-timezone America/New_York</span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-time YYYY-MM-DD</span><br><span class="line">$ sudo timedatectl <span class="built_in">set</span>-time HH:MM:SS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前session</span></span><br><span class="line">$ loginctl list-sessions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前登录用户</span></span><br><span class="line">$ loginctl list-users</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出显示指定用户的信息</span></span><br><span class="line">$ loginctl show-user ruanyf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出正在运行的 Unit</span></span><br><span class="line">$ systemctl list-units</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有Unit，包括没有找到配置文件的或者启动失败的</span></span><br><span class="line">$ systemctl list-units --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有没有运行的 Unit</span></span><br><span class="line">$ systemctl list-units --all --state=inactive</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有加载失败的 Unit</span></span><br><span class="line">$ systemctl list-units --failed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有正在运行的、类型为 service 的 Unit</span></span><br><span class="line">$ systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示系统状态</span></span><br><span class="line">$ systemctl status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示单个 Unit 的状态</span></span><br><span class="line">$ sysystemctl status bluetooth.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示远程主机的某个 Unit 的状态</span></span><br><span class="line">$ systemctl -H root@rhel7.example.com status httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 是否正在运行</span></span><br><span class="line">$ systemctl is-active application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 是否处于启动失败状态</span></span><br><span class="line">$ systemctl is-failed application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 服务是否建立了启动链接</span></span><br><span class="line">$ systemctl is-enabled application.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即启动一个服务</span></span><br><span class="line">$ sudo systemctl start apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即停止一个服务</span></span><br><span class="line">$ sudo systemctl stop apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启一个服务</span></span><br><span class="line">$ sudo systemctl restart apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">$ sudo systemctl <span class="built_in">kill</span> apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载一个服务的配置文件</span></span><br><span class="line">$ sudo systemctl reload apache.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的所有底层参数</span></span><br><span class="line">$ systemctl show httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个 Unit 的指定属性的值</span></span><br><span class="line">$ systemctl show -p CPUShares httpd.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置某个 Unit 的指定属性</span></span><br><span class="line">$ sudo systemctl <span class="built_in">set</span>-property httpd.service CPUShares=500</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ref: <a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将img文件当一整个磁盘挂载</title>
    <url>/sundries/2020/05/12/%E5%A6%82%E4%BD%95%E5%B0%86img%E6%96%87%E4%BB%B6%E5%BD%93%E4%B8%80%E6%95%B4%E4%B8%AA%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/</url>
    <content><![CDATA[<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo udisksctl loop-setup -f disk.img</span></span><br><span class="line">Mapped file disk.img as /dev/loop0.</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gparted /dev/loop0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>source:<a href="https://superuser.com/questions/297299/resize-a-partition-image-with-gparted" target="_blank" rel="noopener">Resize a partition image with GParted?</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>gparted</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;build/lib&#39; does not exist</title>
    <url>/sundries/2020/05/08/build-lib-does-not-exist/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>在使用<code>python setup.py install</code>安装包时，出现<code>warning: install_lib: &#39;build/lib&#39; does not exist -- no Python modules to install</code></p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>在<code>setup.py</code>-&gt;<code>setuptools.setup</code>中加入<code>packages=setuptools.find_packages()</code></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>python writing file with Unix end of line characters</title>
    <url>/sundries/2020/04/27/python-writing-file-with-Unix-end-of-line-characters/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>在windows下，python在写文件时，如何以LF作换行符？</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">s = <span class="string">"""abc</span></span><br><span class="line"><span class="string">def</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> io.open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>, newline=<span class="string">'\n'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(s)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python writing utf8 file</title>
    <url>/sundries/2020/04/27/python-writing-utf8-file/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>python如何以utf-8编码写文件</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> io.open(<span class="string">'test.txt'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'▥▨▩▦'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用setup.py安装第三方包</title>
    <url>/sundries/2020/04/08/%E7%94%A8setup-py%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85/</url>
    <content><![CDATA[<ol>
<li>先下载你要安装的包，并解压到磁盘下；</li>
<li>进入到该文件的setup.py 目录下，打开cmd，并切换到该目录下；</li>
<li>先执行python setup.py build.</li>
<li>然后执行python setup.py install.</li>
</ol>
<blockquote>
<p>source: <a href="https://blog.csdn.net/xxzhangx/article/details/53558654" target="_blank" rel="noopener">python：用setup.py安装第三方包packages</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下用Python调用串口</title>
    <url>/sundries/2020/03/30/linux%E4%B8%8B%E7%94%A8Python%E8%B0%83%E7%94%A8%E4%B8%B2%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>在linux下如何用Python调用串口？</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>安装串口库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip3 install pyserial</span><br></pre></td></tr></table></figure>

<p>解决<code>/dev/ttyUSB0</code>权限问题:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG dialout &lt;username&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>next启用本地搜索</title>
    <url>/sundries/2020/03/27/next%E5%90%AF%E7%94%A8%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<p>Local search no need any external 3rd-party services and can be extra indexed by search engines. That search method recommended for most users.</p>
<div class="tabs" id="local-search"><ul class="nav-tabs"><li class="tab active"><a href="#local-search-1">Installation →</a></li><li class="tab"><a href="#local-search-2">Hexo Config →</a></li><li class="tab"><a href="#local-search-3">NexT Config</a></li></ul><div class="tab-content"><div class="tab-pane active" id="local-search-1"><p>Install <code>hexo-generator-searchdb</code> by run following command in <span class="label info">site root dir</span>:</p>
<pre><code>$ npm install hexo-generator-searchdb</code></pre></div><div class="tab-pane" id="local-search-2"><p>Edit <span class="label info">site config file</span> and add following content:</p>
<figure class="highlight yml"><figcaption><span>hexo/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="local-search-3"><p>Edit <span class="label primary">theme config file</span> to enable Local Search:</p>
<figure class="highlight yml"><figcaption><span>next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></div></div></div>

<blockquote>
<p>source: <a href="https://github.com/theme-next/theme-next.org/blob/source/source/docs/third-party-services/search-services.md" target="_blank" rel="noopener">search-services.md</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu设置代理</title>
    <url>/sundries/2020/03/27/ubuntu%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>在无图形界面的情况下如何设置代理？</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/environment</span><br></pre></td></tr></table></figure>

<p>增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;192.168.3.41:8888&quot;</span><br><span class="line">export https_proxy&#x3D;&quot;socks5:&#x2F;&#x2F;192.168.3.41:8888&quot;</span><br><span class="line">export no_proxy&#x3D;&quot;localhost, 127.0.0.1&quot;</span><br></pre></td></tr></table></figure>

<p>相关文章：</p>
<a href="/sundries/2020/03/27/sudo%E6%97%B6%E4%BB%8D%E7%84%B6%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/" title="sudo时仍然使用代理设置">sudo时仍然使用代理设置</a>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>sudo时仍然使用代理设置</title>
    <url>/sundries/2020/03/27/sudo%E6%97%B6%E4%BB%8D%E7%84%B6%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>使用<code>sudo wget</code>或其它指令时，如何使用代理设置？</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>执行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure>

<p>增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Defaults    env_keep+&#x3D;&quot;http_proxy https_proxy no_proxy&quot;</span><br></pre></td></tr></table></figure>

<p>或许需要重启才生效</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>bat脚本 pause失效</title>
    <url>/sundries/2020/03/27/bat%E8%84%9A%E6%9C%AC-pause%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>bat脚本 pause失效</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>若脚本中有命令执行失败，则pause无效。</p>
<p>在要执行的指令前使用<code>call</code>即可。</p>
<p>eg:</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> git merge master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>source: <a href="https://stackoverflow.com/questions/4666045/batch-file-command-pause-does-not-work" target="_blank" rel="noopener">Batch file command PAUSE does not work</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>tar 解压</title>
    <url>/sundries/2020/03/27/tar-%E8%A7%A3%E5%8E%8B/</url>
    <content><![CDATA[<h2 id="Q"><a href="#Q" class="headerlink" title="Q"></a>Q</h2><p>使用tar解压？</p>
<h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p><strong>1.15版本后：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -xvf filename.tar.x <span class="comment"># x 代表gz,bz2等格式</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-x: extract 解压</li>
<li>-v: verbose 显示解压信息</li>
<li>-f: file 文件</li>
</ul>
<p><strong>1.15版本前：</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf filename.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>-z: gzip 格式</li>
</ul>
<p>其它格式可输入<code>tar --help</code>查看</p>
<blockquote>
<p>source: <a href="https://www.cnblogs.com/cursorhu/p/5891699.html" target="_blank" rel="noopener">Linux下的解压命令小结</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>tar</tag>
      </tags>
  </entry>
  <entry>
    <title>如何拖文件到python脚本上执行</title>
    <url>/sundries/2020/03/26/%E5%A6%82%E4%BD%95%E6%8B%96%E6%96%87%E4%BB%B6%E5%88%B0python%E8%84%9A%E6%9C%AC%E4%B8%8A%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何拖文件到python脚本上执行</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>If you don’t need a GUI, and depending on the platform I would use <code>sys.argv</code>.</p>
<p><del>In windows for example you can’t drag files onto python scripts</del>, but you can drag them onto a batch file. And from the batch file you can call your script with the file-names as arguments.</p>
<p><strong>Batch File:</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">python "dropScript.py" %*</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<p>The <code>%*</code> contains all the filenames.</p>
<p><strong>dropScript.py:</strong></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">file_paths = sys.argv[<span class="number">1</span>:]  <span class="comment"># the first argument is the script itself</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> file_paths:</span><br><span class="line">    print(p)</span><br></pre></td></tr></table></figure>

<p>The first argument is the script itself so it is omitted from the file_path list.</p>
<blockquote>
<p>source: <a href="https://stackoverflow.com/questions/22281406/python-drag-and-drop-get-filenames" target="_blank" rel="noopener">Python drag and drop, get filenames [closed]</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>bat</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>bat脚本调用anaconda命令</title>
    <url>/sundries/2020/03/26/bat%E8%84%9A%E6%9C%AC%E8%B0%83%E7%94%A8anaconda%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在bat脚本中想调用anaconda某个环境中的python去执行某些py文件</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> condaRoot=C:\Users\Noctis\Anaconda3\</span><br><span class="line"><span class="keyword">call</span> <span class="variable">%condaRoot%</span>\Scripts\activate.bat</span><br><span class="line"><span class="keyword">call</span> python C:\Users\Noctis\Desktop\t.py</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>source: <a href="https://stackoverflow.com/questions/46305569/how-to-make-batch-files-run-in-anaconda-prompt/50260029#50260029" target="_blank" rel="noopener">How to make batch files run in anaconda prompt</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>conda</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>获取bat脚本所在目录</title>
    <url>/sundries/2020/03/26/%E8%8E%B7%E5%8F%96bat%E8%84%9A%E6%9C%AC%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li><code>%cd%</code>: 获取执行脚本的目录</li>
<li><code>%~dp0</code>: 获取脚本所在目录</li>
</ul>
]]></content>
      <tags>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title>linux查看磁盘空间大小</title>
    <url>/sundries/2020/03/26/linux%E6%9F%A5%E7%9C%8B%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">df -hl</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用命令行连接wifi</title>
    <url>/sundries/2020/03/26/%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5wifi/</url>
    <content><![CDATA[<p>使用<code>nmtui</code></p>
<blockquote>
<p>source: <a href="https://askubuntu.com/questions/461825/how-to-connect-to-wifi-from-the-command-line" target="_blank" rel="noopener">How to connect to WiFi from the command line?</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[[: not found</title>
    <url>/sundries/2020/03/24/not-found/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>执行<code>sh t.sh</code>时，出现<code>[[: not found</code>的错误</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>使用<code>bash t.sh</code>运行脚本</p>
<blockquote>
<p>source: <a href="https://www.cnblogs.com/han-1034683568/p/7211392.html" target="_blank" rel="noopener">运行shell脚本时报错”[[ : not found”解决方法</a></p>
<p><a href="https://stackoverflow.com/questions/12230690/string-comparison-in-bash-not-found" target="_blank" rel="noopener">String comparison in bash. [[: not found</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>how to check if a file is a symbolic link to a directory</title>
    <url>/sundries/2020/03/24/how-to-check-if-a-file-is-a-symbolic-link-to-a-directory/</url>
    <content><![CDATA[<p>使用bash执行，sh执行会出错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">file=./gesture_detector/object_detection</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -L <span class="string">"<span class="variable">$file</span>"</span> &amp;&amp; -d <span class="string">"<span class="variable">$file</span>"</span> ]] ; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$file</span> is a symlink to a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>source: <a href="https://unix.stackexchange.com/questions/96907/how-do-i-check-if-a-file-is-a-symbolic-link-to-a-directory" target="_blank" rel="noopener">How do I check if a file is a symbolic link to a directory?</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>windows 10 builtin hash calculator</title>
    <url>/sundries/2020/03/24/windows-10-builtin-hash-calculator/</url>
    <content><![CDATA[<p>输入以下命令查看用法</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">CertUtil -hashfile -?</span><br></pre></td></tr></table></figure>

<p>具体用例:</p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">CertUtil -hashfile file.txt SHA256</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>7zip encode file name with utf-8</title>
    <url>/sundries/2020/03/23/7zip-encode-file-name-with-utf-8/</url>
    <content><![CDATA[<p>在压缩时，右击，选择”Add to archive…”，然后在<code>Parameters:</code>一栏添加参数<code>cu=on</code></p>
]]></content>
      <tags>
        <tag>7zip</tag>
      </tags>
  </entry>
  <entry>
    <title>linux empty trash</title>
    <url>/sundries/2020/03/23/linux-empty-trash/</url>
    <content><![CDATA[<p>用命令行清空回收站</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rm -rf /home/&lt;your user name&gt;/.<span class="built_in">local</span>/share/Trash</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>范围merge</title>
    <url>/sundries/2020/03/17/%E8%8C%83%E5%9B%B4merge/</url>
    <content><![CDATA[<p><code>cherry-pick</code>可以范围merge ,两次版本间使用<code>..</code>连起来：</p>
<p><code>cherry-pick A..B</code></p>
<p>这样会把从版本A（不包含）到B（包含）即（A，B]的版本pull到当前分支</p>
<p>甚至，可以使用多段，同样使用空格隔开：</p>
<p><code>git cherry-pick A..B C..D E..F</code></p>
<p>注：中间需要自己解决冲突，若出现冲突，可以尝试使用 <code>git mergetool</code> GUI工具解决</p>
<blockquote>
<p>source: <a href="https://jaskey.github.io/blog/2015/12/22/git-cherry-pick/" target="_blank" rel="noopener">Git中只merge部分commit</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodule</title>
    <url>/sundries/2020/03/17/git-submodule/</url>
    <content><![CDATA[<h2 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h2><p>有种情况我们经常会遇到：某个工作中的项目需要包含并使用另一个项目。<br>也许是第三方库，或者你独立开发的，用于多个父项目的库。<br>现在问题来了：你想要把它们当做两个独立的项目，同时又想在一个项目中使用另一个。</p>
<p>我们举一个例子。<br>假设你正在开发一个网站然后创建了 Atom 订阅。<br>你决定使用一个库，而不是写自己的 Atom 生成代码。<br>你可能不得不通过 CPAN 安装或 Ruby gem 来包含共享库中的代码，或者将源代码直接拷贝到自己的项目中。<br>如果将这个库包含进来，那么无论用何种方式都很难定制它，部署则更加困难，因为你必须确保每一个客户端都包含该库。<br>如果将代码复制到自己的项目中，那么你做的任何自定义修改都会使合并上游的改动变得困难。</p>
<p>Git 通过子模块来解决这个问题。<br>子模块允许你将一个 Git 仓库作为另一个 Git 仓库的子目录。<br>它能让你将另一个仓库克隆到自己的项目中，同时还保持提交的独立。</p>
<h3 id="开始使用子模块"><a href="#开始使用子模块" class="headerlink" title="开始使用子模块"></a>开始使用子模块</h3><p>我们将要演示如何在一个被分成一个主项目与几个子项目的项目上开发。</p>
<p>我们首先将一个已存在的 Git 仓库添加为正在工作的仓库的子模块。<br>你可以通过在 <code>git submodule add</code> 命令后面加上想要跟踪的项目的相对或绝对 URL 来添加新的子模块。<br>在本例中，我们将会添加一个名为 “DbConnector” 的库。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule add https://github.com/chaconinc/DbConnector</span></span><br><span class="line">Cloning into 'DbConnector'...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11/11), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>

<p>默认情况下，子模块会将子项目放到一个与仓库同名的目录中，本例中是 “DbConnector”。<br>如果你想要放到其他地方，那么可以在命令结尾添加一个不同的路径。</p>
<p>如果这时运行 <code>git status</code>，你会注意到几件事。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use "git reset HEAD &lt;file&gt;..." to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   .gitmodules</span><br><span class="line">	new file:   DbConnector</span><br></pre></td></tr></table></figure>

<p>首先应当注意到新的 <code>.gitmodules</code> 文件。<br>该配置文件保存了项目 URL 与已经拉取的本地目录之间的映射：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="section">[submodule "DbConnector"]</span></span><br><span class="line">	path = DbConnector</span><br><span class="line">	url = https://github.com/chaconinc/DbConnector</span><br></pre></td></tr></table></figure>

<p>如果有多个子模块，该文件中就会有多条记录。<br>要重点注意的是，该文件也像 <code>.gitignore</code> 文件一样受到（通过）版本控制。<br>它会和该项目的其他部分一同被拉取推送。<br>这就是克隆该项目的人知道去哪获得子模块的原因。</p>
<blockquote>
<p>Note: 由于 .gitmodules 文件中的 URL 是人们首先尝试克隆/拉取的地方，因此请尽可能确保你使用的 URL 大家都能访问。<br>例如，若你要使用的推送 URL 与他人的拉取 URL 不同，那么请使用他人能访问到的 URL。<br>你也可以根据自己的需要，通过在本地执行 <code>git config submodule.DbConnector.url &lt;私有URL&gt;</code> 来覆盖这个选项的值。<br>如果可行的话，一个相对路径会很有帮助。</p>
</blockquote>
<p>在 <code>git status</code> 输出中列出的另一个是项目文件夹记录。<br>如果你运行 <code>git diff</code>，会看到类似下面的信息：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached DbConnector</span></span><br><span class="line">diff --git a/DbConnector b/DbConnector</span><br><span class="line">new file mode 160000</span><br><span class="line">index 0000000..c3f01dc</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/DbConnector</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+Subproject commit c3f01dc8862123d317dd46284b05b6892c7b29bc</span><br></pre></td></tr></table></figure>

<p>虽然 <code>DbConnector</code> 是工作目录中的一个子目录，但 Git 还是会将它视作一个子模块。当你不在那个目录中时，Git 并不会跟踪它的内容，<br>而是将它看作子模块仓库中的某个具体的提交。</p>
<p>如果你想看到更漂亮的差异输出，可以给 <code>git diff</code> 传递 <code>--submodule</code> 选项。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff --cached --submodule</span></span><br><span class="line">diff --git a/.gitmodules b/.gitmodules</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..71fc376</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/.gitmodules</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+[submodule "DbConnector"]</span><br><span class="line">+       path = DbConnector</span><br><span class="line">+       url = https://github.com/chaconinc/DbConnector</span><br><span class="line">Submodule DbConnector 0000000...c3f01dc (new submodule)</span><br></pre></td></tr></table></figure>

<p>当你提交时，会看到类似下面的信息：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">'added DbConnector module'</span></span></span><br><span class="line">[master fb9093c] added DbConnector module</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 .gitmodules</span><br><span class="line"> create mode 160000 DbConnector</span><br></pre></td></tr></table></figure>

<p>注意 <code>DbConnector</code> 记录的 <code>160000</code> 模式。<br>这是 Git 中的一种特殊模式，它本质上意味着你是将一次提交记作一项目录记录的，而非将它记录成一个子目录或者一个文件。</p>
<p>最后，推送这些更改：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure>

<h3 id="克隆含有子模块的项目"><a href="#克隆含有子模块的项目" class="headerlink" title="克隆含有子模块的项目"></a>克隆含有子模块的项目</h3><p>接下来我们将会克隆一个含有子模块的项目。<br>当你在克隆这样的项目时，默认会包含该子模块目录，但其中还没有任何文件：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/chaconinc/MainProject</span></span><br><span class="line">Cloning into 'MainProject'...</span><br><span class="line">remote: Counting objects: 14, done.</span><br><span class="line">remote: Compressing objects: 100% (13/13), done.</span><br><span class="line">remote: Total 14 (delta 1), reused 13 (delta 0)</span><br><span class="line">Unpacking objects: 100% (14/14), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> MainProject</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -la</span></span><br><span class="line">total 16</span><br><span class="line">drwxr-xr-x   9 schacon  staff  306 Sep 17 15:21 .</span><br><span class="line">drwxr-xr-x   7 schacon  staff  238 Sep 17 15:21 ..</span><br><span class="line">drwxr-xr-x  13 schacon  staff  442 Sep 17 15:21 .git</span><br><span class="line">-rw-r--r--   1 schacon  staff   92 Sep 17 15:21 .gitmodules</span><br><span class="line">drwxr-xr-x   2 schacon  staff   68 Sep 17 15:21 DbConnector</span><br><span class="line">-rw-r--r--   1 schacon  staff  756 Sep 17 15:21 Makefile</span><br><span class="line">drwxr-xr-x   3 schacon  staff  102 Sep 17 15:21 includes</span><br><span class="line">drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 scripts</span><br><span class="line">drwxr-xr-x   4 schacon  staff  136 Sep 17 15:21 src</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> DbConnector/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line"><span class="meta">$</span></span><br></pre></td></tr></table></figure>

<p>其中有 <code>DbConnector</code> 目录，不过是空的。<br>你必须运行两个命令：<code>git submodule init</code> 用来初始化本地配置文件，而 <code>git submodule update</code> 则从该项目中抓取所有数据并检出父项目中列出的合适的提交。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule init</span></span><br><span class="line">Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'</span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update</span></span><br><span class="line">Cloning into 'DbConnector'...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11/11), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'</span><br></pre></td></tr></table></figure>

<p>现在 <code>DbConnector</code> 子目录是处在和之前提交时相同的状态了。</p>
<p>不过还有更简单一点的方式。<br>如果给 <code>git clone</code> 命令传递 <code>--recurse-submodules</code> 选项，它就会自动初始化并更新仓库中的每一个子模块，<br>包括可能存在的嵌套子模块。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --recurse-submodules https://github.com/chaconinc/MainProject</span></span><br><span class="line">Cloning into 'MainProject'...</span><br><span class="line">remote: Counting objects: 14, done.</span><br><span class="line">remote: Compressing objects: 100% (13/13), done.</span><br><span class="line">remote: Total 14 (delta 1), reused 13 (delta 0)</span><br><span class="line">Unpacking objects: 100% (14/14), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule 'DbConnector' (https://github.com/chaconinc/DbConnector) registered for path 'DbConnector'</span><br><span class="line">Cloning into 'DbConnector'...</span><br><span class="line">remote: Counting objects: 11, done.</span><br><span class="line">remote: Compressing objects: 100% (10/10), done.</span><br><span class="line">remote: Total 11 (delta 0), reused 11 (delta 0)</span><br><span class="line">Unpacking objects: 100% (11/11), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path 'DbConnector': checked out 'c3f01dc8862123d317dd46284b05b6892c7b29bc'</span><br></pre></td></tr></table></figure>

<p>如果你已经克隆了项目但忘记了 <code>--recurse-submodules</code>，那么可以运行 <code>git submodule update --init</code><br>将 <code>git submodule init</code> 和 <code>git submodule update</code> 合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块，<br>请使用简明的 <code>git submodule update --init --recursive</code>。</p>
<h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><p>现在我们有一份包含子模块的项目副本，我们将会同时在主项目和子模块项目上与队员协作。</p>
<h4 id="从子模块的远端拉取上游修改"><a href="#从子模块的远端拉取上游修改" class="headerlink" title="从子模块的远端拉取上游修改"></a>从子模块的远端拉取上游修改</h4><p>在项目中使用子模块的最简模型，就是只使用子项目并不时地获取更新，而并不在你的检出中进行任何更改。<br>我们来看一个简单的例子。</p>
<p>如果想要在子模块中查看新工作，可以进入到目录中运行 <code>git fetch</code> 与 <code>git merge</code>，合并上游分支来更新本地代码。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git fetch</span></span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   c3f01dc..d0354fc  master     -&gt; origin/master</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge origin/master</span></span><br><span class="line">Updating c3f01dc..d0354fc</span><br><span class="line">Fast-forward</span><br><span class="line"> scripts/connect.sh | 1 +</span><br><span class="line"> src/db.c           | 1 +</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br></pre></td></tr></table></figure>

<p>如果你现在返回到主项目并运行 <code>git diff --submodule</code>，就会看到子模块被更新的同时获得了一个包含新添加提交的列表。<br>如果你不想每次运行 <code>git diff</code> 时都输入 <code>--submodle</code>，那么可以将 <code>diff.submodule</code> 设置为 “log” 来将其作为默认行为。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global diff.submodule <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">Submodule DbConnector c3f01dc..d0354fc:</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> more efficient db routine</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> better connection routine</span></span><br></pre></td></tr></table></figure>

<p>如果在此时提交，那么你会将子模块锁定为其他人更新时的新代码。</p>
<p>如果你不想在子目录中手动抓取与合并，那么还有种更容易的方式。<br>运行 <code>git submodule update --remote</code>，Git 将会进入子模块然后抓取并更新。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote DbConnector</span></span><br><span class="line">remote: Counting objects: 4, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 4 (delta 2), reused 4 (delta 2)</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   3f19983..d0354fc  master     -&gt; origin/master</span><br><span class="line">Submodule path 'DbConnector': checked out 'd0354fc054692d3906c85c3af05ddce39a1c0644'</span><br></pre></td></tr></table></figure>

<p>此命令默认会假定你想要更新并检出子模块仓库的 <code>master</code> 分支。<br>不过你也可以设置为想要的其他分支。<br>例如，你想要 DbConnector 子模块跟踪仓库的 “stable” 分支，那么既可以在 <code>.gitmodules</code> 文件中设置<br>（这样其他人也可以跟踪它），也可以只在本地的 <code>.git/config</code> 文件中设置。<br>让我们在 <code>.gitmodules</code> 文件中设置它：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config -f .gitmodules submodule.DbConnector.branch stable</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote</span></span><br><span class="line">remote: Counting objects: 4, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 4 (delta 2), reused 4 (delta 2)</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   27cf5d3..c87d55d  stable -&gt; origin/stable</span><br><span class="line">Submodule path 'DbConnector': checked out 'c87d55d4c6d4b05ee34fbc8cb6f7bf4585ae6687'</span><br></pre></td></tr></table></figure>

<p>如果不用 <code>-f .gitmodules</code> 选项，那么它只会为你做修改。但是在仓库中保留跟踪信息更有意义一些，因为其他人也可以得到同样的效果。</p>
<p>这时我们运行 <code>git status</code>，Git 会显示子模块中有“新提交”。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">  modified:   .gitmodules</span><br><span class="line">  modified:   DbConnector (new commits)</span><br><span class="line"></span><br><span class="line">no changes added to commit (use "git add" and/or "git commit -a")</span><br></pre></td></tr></table></figure>

<p>如果你设置了配置选项 <code>status.submodulesummary</code>，Git 也会显示你的子模块的更改摘要：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config status.submodulesummary 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   .gitmodules</span><br><span class="line">	modified:   DbConnector (new commits)</span><br><span class="line"></span><br><span class="line">Submodules changed but not updated:</span><br><span class="line"></span><br><span class="line">* DbConnector c3f01dc...c87d55d (4):</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> catch non-null terminated lines</span></span><br></pre></td></tr></table></figure>

<p>这时如果运行 <code>git diff</code>，可以看到我们修改了 .gitmodules 文件，同时还有几个已拉取的提交需要提交到我们自己的子模块项目中。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --git a/.gitmodules b/.gitmodules</span><br><span class="line">index 6fc0b3d..fd1cc29 100644</span><br><span class="line">--- a/.gitmodules</span><br><span class="line">+++ b/.gitmodules</span><br><span class="line">@@ -1,3 +1,4 @@</span><br><span class="line"> [submodule "DbConnector"]</span><br><span class="line">        path = DbConnector</span><br><span class="line">        url = https://github.com/chaconinc/DbConnector</span><br><span class="line">+       branch = stable</span><br><span class="line"> Submodule DbConnector c3f01dc..c87d55d:</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> catch non-null terminated lines</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> more robust error handling</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> more efficient db routine</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> better connection routine</span></span><br></pre></td></tr></table></figure>

<p>这非常有趣，因为我们可以直接看到将要提交到子模块中的提交日志。<br>提交之后，你也可以运行 <code>git log -p</code> 查看这个信息。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> -p --submodule</span></span><br><span class="line">commit 0a24cfc121a8a3c118e0105ae4ae4c00281cf7ae</span><br><span class="line">Author: Scott Chacon &lt;schacon@gmail.com&gt;</span><br><span class="line">Date:   Wed Sep 17 16:37:02 2014 +0200</span><br><span class="line"></span><br><span class="line">    updating DbConnector for bug fixes</span><br><span class="line"></span><br><span class="line">diff --git a/.gitmodules b/.gitmodules</span><br><span class="line">index 6fc0b3d..fd1cc29 100644</span><br><span class="line">--- a/.gitmodules</span><br><span class="line">+++ b/.gitmodules</span><br><span class="line">@@ -1,3 +1,4 @@</span><br><span class="line"> [submodule "DbConnector"]</span><br><span class="line">        path = DbConnector</span><br><span class="line">        url = https://github.com/chaconinc/DbConnector</span><br><span class="line">+       branch = stable</span><br><span class="line">Submodule DbConnector c3f01dc..c87d55d:</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> catch non-null terminated lines</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> more robust error handling</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> more efficient db routine</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> better connection routine</span></span><br></pre></td></tr></table></figure>

<p>当运行 <code>git submodule update --remote</code> 时，Git 默认会尝试更新 <em>所有</em> 子模块，<br>所以如果有很多子模块的话，你可以传递想要更新的子模块的名字。</p>
<h4 id="从项目远端拉取上游更改"><a href="#从项目远端拉取上游更改" class="headerlink" title="从项目远端拉取上游更改"></a>从项目远端拉取上游更改</h4><p>现在，让我们站在协作者的视角，他有自己的 <code>MainProject</code> 仓库的本地克隆，<br>只是执行 <code>git pull</code> 获取你新提交的更改还不够：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">From https://github.com/chaconinc/MainProject</span><br><span class="line">   fb9093c..0a24cfc  master     -&gt; origin/master</span><br><span class="line">Fetching submodule DbConnector</span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   c3f01dc..c87d55d  stable     -&gt; origin/stable</span><br><span class="line">Updating fb9093c..0a24cfc</span><br><span class="line">Fast-forward</span><br><span class="line"> .gitmodules         | 2 +-</span><br><span class="line"> DbConnector         | 2 +-</span><br><span class="line"> 2 files changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"> On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   DbConnector (new commits)</span><br><span class="line"></span><br><span class="line">Submodules changed but not updated:</span><br><span class="line"></span><br><span class="line">* DbConnector c87d55d...c3f01dc (4):</span><br><span class="line">  &lt; catch non-null terminated lines</span><br><span class="line">  &lt; more robust error handling</span><br><span class="line">  &lt; more efficient db routine</span><br><span class="line">  &lt; better connection routine</span><br><span class="line"></span><br><span class="line">no changes added to commit (use "git add" and/or "git commit -a")</span><br></pre></td></tr></table></figure>

<p>默认情况下，<code>git pull</code> 命令会递归地抓取子模块的更改，如上面第一个命令的输出所示。<br>然而，它不会 <em>更新</em> 子模块。这点可通过 <code>git status</code> 命令看到，它会显示子模块“已修改”，且“有新的提交”。<br>此外，左边的尖括号（&lt;）指出了新的提交，表示这些提交已在 MainProject 中记录，但尚未在本地的 <code>DbConnector</code> 中检出。<br>为了完成更新，你需要运行 <code>git submodule update</code>：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init --recursive</span></span><br><span class="line">Submodule path 'vendor/plugins/demo': checked out '48679c6302815f6c76f1fe30625d795d9e55fc56'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"> On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<p>请注意，为安全起见，如果 MainProject 提交了你刚拉取的新子模块，那么应该在<br><code>git submodule update</code> 后面添加 <code>--init</code> 选项，如果子模块有嵌套的子模块，则应使用 <code>--recursive</code> 选项。</p>
<p>如果你想自动化此过程，那么可以为 <code>git pull</code> 命令添加 <code>--recurse-submodules</code> 选项（从 Git 2.14 开始）。<br>这会让 Git 在拉取后运行 <code>git submodule update</code>，将子模块置为正确的状态。<br>此外，如果你想让 Git 总是以 <code>--recurse-submodules</code> 拉取，可以将配置选项 <code>submodule.recurse</code> 设置为 <code>true</code><br>（从 Git 2.15 开始可用于 <code>git pull</code>）。此选项会让 Git 为所有支持 <code>--recurse-submodules</code> 的命令使用该选项（除 <code>clone</code> 以外）。</p>
<p>在为父级项目拉取更新时，还会出现一种特殊的情况：在你拉取的提交中，<br>可能 <code>.gitmodules</code> 文件中记录的子模块的 URL 发生了改变。<br>比如，若子模块项目改变了它的托管平台，就会发生这种情况。<br>此时，若父级项目引用的子模块提交不在仓库中本地配置的子模块远端上，那么执行<br><code>git pull --recurse-submodules</code> 或 <code>git submodule update</code> 就会失败。<br>为了补救，<code>git submodule sync</code> 命令需要：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将新的 URL 复制到本地配置中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule sync --recursive</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从新 URL 更新子模块</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --init --recursive</span></span><br></pre></td></tr></table></figure>

<h4 id="在子模块上工作"><a href="#在子模块上工作" class="headerlink" title="在子模块上工作"></a>在子模块上工作</h4><p>你很有可能正在使用子模块，因为你确实想在子模块中编写代码的同时，还想在主项目上编写代码（或者跨子模块工作）。<br>否则你大概只能用简单的依赖管理系统（如 Maven 或 Rubygems）来替代了。</p>
<p>现在我们将通过一个例子来演示如何在子模块与主项目中同时做修改，以及如何同时提交与发布那些修改。</p>
<p>到目前为止，当我们运行 <code>git submodule update</code> 从子模块仓库中抓取修改时，<br>Git 将会获得这些改动并更新子目录中的文件，但是会将子仓库留在一个称作“游离的 HEAD”的状态。<br>这意味着没有本地工作分支（例如 “master” ）跟踪改动。<br>如果没有工作分支跟踪更改，也就意味着即便你将更改提交到了子模块，这些更改也很可能会在下次运行<br><code>git submodule update</code> 时丢失。如果你想要在子模块中跟踪这些修改，还需要一些额外的步骤。</p>
<p>为了将子模块设置得更容易进入并修改，你需要做两件事。<br>首先，进入每个子模块并检出其相应的工作分支。<br>接着，若你做了更改就需要告诉 Git 它该做什么，然后运行 <code>git submodule update --remote</code> 来从上游拉取新工作。<br>你可以选择将它们合并到你的本地工作中，也可以尝试将你的工作变基到新的更改上。</p>
<p>首先，让我们进入子模块目录然后检出一个分支。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> DbConnector/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout stable</span></span><br><span class="line">Switched to branch 'stable'</span><br></pre></td></tr></table></figure>

<p>然后尝试用 “merge” 选项来更新子模块。<br>为了手动指定它，我们只需给 <code>update</code> 添加 <code>--merge</code> 选项即可。<br>这时我们将会看到服务器上的这个子模块有一个改动并且它被合并了进来。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote --merge</span></span><br><span class="line">remote: Counting objects: 4, done.</span><br><span class="line">remote: Compressing objects: 100% (2/2), done.</span><br><span class="line">remote: Total 4 (delta 2), reused 4 (delta 2)</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   c87d55d..92c7337  stable     -&gt; origin/stable</span><br><span class="line">Updating c87d55d..92c7337</span><br><span class="line">Fast-forward</span><br><span class="line"> src/main.c | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">Submodule path 'DbConnector': merged in '92c7337b30ef9e0893e758dac2459d07362ab5ea'</span><br></pre></td></tr></table></figure>

<p>如果我们进入 DbConnector 目录，可以发现新的改动已经合并入本地 <code>stable</code> 分支。<br>现在让我们看看当我们对库做一些本地的改动而同时其他人推送另外一个修改到上游时会发生什么。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> DbConnector/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim src/db.c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -am <span class="string">'unicode support'</span></span></span><br><span class="line">[stable f906e16] unicode support</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<p>如果我们现在更新子模块，就会看到当我们在本地做了更改时上游也有一个改动，我们需要将它并入本地。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote --rebase</span></span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: unicode support</span><br><span class="line">Submodule path 'DbConnector': rebased into '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'</span><br></pre></td></tr></table></figure>

<p>如果你忘记 <code>--rebase</code> 或 <code>--merge</code>，Git 会将子模块更新为服务器上的状态。并且会将项目重置为一个游离的 HEAD 状态。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote</span></span><br><span class="line">Submodule path 'DbConnector': checked out '5d60ef9bbebf5a0c1c1050f242ceeb54ad58da94'</span><br></pre></td></tr></table></figure>

<p>即便这真的发生了也不要紧，你只需回到目录中再次检出你的分支（即还包含着你的工作的分支）然后手动地合并或变基 <code>origin/stable</code>（或任何一个你想要的远程分支）就行了。</p>
<p>如果你没有提交子模块的改动，那么运行一个子模块更新也不会出现问题，此时 Git 会只抓取更改而并不会覆盖子模块目录中未保存的工作。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote</span></span><br><span class="line">remote: Counting objects: 4, done.</span><br><span class="line">remote: Compressing objects: 100% (3/3), done.</span><br><span class="line">remote: Total 4 (delta 0), reused 4 (delta 0)</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From https://github.com/chaconinc/DbConnector</span><br><span class="line">   5d60ef9..c75e92a  stable     -&gt; origin/stable</span><br><span class="line">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class="line">	scripts/setup.sh</span><br><span class="line">Please, commit your changes or stash them before you can switch branches.</span><br><span class="line">Aborting</span><br><span class="line">Unable to checkout 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'</span><br></pre></td></tr></table></figure>

<p>如果你做了一些与上游改动冲突的改动，当运行更新时 Git 会让你知道。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git submodule update --remote --merge</span></span><br><span class="line">Auto-merging scripts/setup.sh</span><br><span class="line">CONFLICT (content): Merge conflict in scripts/setup.sh</span><br><span class="line">Recorded preimage for 'scripts/setup.sh'</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line">Unable to merge 'c75e92a2b3855c9e5b66f915308390d9db204aca' in submodule path 'DbConnector'</span><br></pre></td></tr></table></figure>

<p>你可以进入子模块目录中然后就像平时那样修复冲突。</p>
<h4 id="发布子模块改动"><a href="#发布子模块改动" class="headerlink" title="发布子模块改动"></a>发布子模块改动</h4><p>现在我们的子模块目录中有一些改动。<br>其中有一些是我们通过更新从上游引入的，而另一些是本地生成的，由于我们还没有推送它们，所以对任何其他人都不可用。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">Submodule DbConnector c87d55d..82d2ad3:</span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> Merge from origin/stable</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> updated setup script</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> unicode support</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> remove unnecessary method</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> add new option <span class="keyword">for</span> conn pooling</span></span><br></pre></td></tr></table></figure>

<p>如果我们在主项目中提交并推送但并不推送子模块上的改动，其他尝试检出我们修改的人会遇到麻烦，<br>因为他们无法得到依赖的子模块改动。那些改动只存在于我们本地的拷贝中。</p>
<p>为了确保这不会发生，你可以让 Git 在推送到主项目前检查所有子模块是否已推送。<br><code>git push</code> 命令接受可以设置为 “check” 或 “on-demand” 的 <code>--recurse-submodules</code> 参数。<br>如果任何提交的子模块改动没有推送那么 “check” 选项会直接使 <code>push</code> 操作失败。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --recurse-submodules=check</span></span><br><span class="line">The following submodule paths contain changes that can</span><br><span class="line">not be found on any remote:</span><br><span class="line">  DbConnector</span><br><span class="line"></span><br><span class="line">Please try</span><br><span class="line"></span><br><span class="line">	git push --recurse-submodules=on-demand</span><br><span class="line"></span><br><span class="line">or cd to the path and use</span><br><span class="line"></span><br><span class="line">	git push</span><br><span class="line"></span><br><span class="line">to push them to a remote.</span><br></pre></td></tr></table></figure>

<p>如你所见，它也给我们了一些有用的建议，指导接下来该如何做。<br>最简单的选项是进入每一个子模块中然后手动推送到远程仓库，确保它们能被外部访问到，之后再次尝试这次推送。<br>如果你想要对所有推送都执行检查，那么可以通过设置 <code>git config push.recurseSubmodules check</code> 让它成为默认行为。</p>
<p>另一个选项是使用 “on-demand” 值，它会尝试为你这样做。</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --recurse-submodules=on-demand</span></span><br><span class="line">Pushing submodule 'DbConnector'</span><br><span class="line">Counting objects: 9, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (8/8), done.</span><br><span class="line">Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.</span><br><span class="line">Total 9 (delta 3), reused 0 (delta 0)</span><br><span class="line">To https://github.com/chaconinc/DbConnector</span><br><span class="line">   c75e92a..82d2ad3  stable -&gt; stable</span><br><span class="line">Counting objects: 2, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done.</span><br><span class="line">Total 2 (delta 1), reused 0 (delta 0)</span><br><span class="line">To https://github.com/chaconinc/MainProject</span><br><span class="line">   3d6d338..9a377d1  master -&gt; master</span><br></pre></td></tr></table></figure>

<p>如你所见，Git 进入到 DbConnector 模块中然后在推送主项目前推送了它。<br>如果那个子模块因为某些原因推送失败，主项目也会推送失败。<br>你也可以通过设置 <code>git config push.recurseSubmodules on-demand</code> 让它成为默认行为。</p>
<blockquote>
<p>source: <a href="https://github.com/progit/progit2-zh/blob/master/book/07-git-tools/sections/submodules.asc" target="_blank" rel="noopener">子模块</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>c调用c++函数的方法</title>
    <url>/sundries/2020/03/17/c%E8%B0%83%E7%94%A8c-%E5%87%BD%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>将 C++ 函数声明为“extern “C””（在你的 C++ 代码里做这个声明），然后调用它（在你的 C 或者 C++ 代码里调用）。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code:</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，你可以在C文件中这样使用 f()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* C code: */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cc</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f(i);</span><br><span class="line">   <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，这招只适用于非成员函数。如果你想要在 C 里调用成员函数（包括虚函数），则需要提供一个简单的包装（wrapper）。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">       <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">double</span> <span class="title">call_C_f</span><span class="params">(C* p, <span class="keyword">int</span> i)</span> <span class="comment">// wrapper function</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> p-&gt;f(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，你就可以这样调用 C::f()：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* C code: */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">call_C_f</span><span class="params">(struct C* p, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ccc</span><span class="params">(struct C* p, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">double</span> d = call_C_f(p,i);</span><br><span class="line">       <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你想在 C 里调用重载函数，则必须提供不同名字的包装，这样才能被 C 代码调用。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++ code:</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">f_i</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; f(i); &#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">f_d</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123; f(d); &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>source: <a href="https://blog.csdn.net/z1002137615/article/details/50772185" target="_blank" rel="noopener">c调用c++函数（包括类成员函数）的方法</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 引用站内文章</title>
    <url>/sundries/2020/03/15/hexo-%E5%BC%95%E7%94%A8%E7%AB%99%E5%86%85%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章文件名（不要后缀） 文章标题（可选） %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>source: <a href="https://yanyinhong.github.io/2017/05/03/Refer-article-in-hexo-post/" target="_blank" rel="noopener">Hexo博客搭建之引用站内文章</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>create jetson nano image</title>
    <url>/sundries/2020/03/15/create-jetson-nano-image/</url>
    <content><![CDATA[<p>在Jetpack安装目录下运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo bash create-jetson-nano-sd-card-image.sh -o flash_me.img -s 16G -r 200</span><br></pre></td></tr></table></figure>

<p>相关文章：</p>
<ul>
<li><a href="/sundries/2020/03/15/check-rootfs-size/" title="check rootfs size">check rootfs size</a>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>check rootfs size</title>
    <url>/sundries/2020/03/15/check-rootfs-size/</url>
    <content><![CDATA[<p>在制作Jetson Nano镜像时，若要查看rootfs占用了多少空间，可以运行：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo du --si -sH rootfs</span><br></pre></td></tr></table></figure>

<p>相关文章：</p>
<ul>
<li><a href="/sundries/2020/03/15/create-jetson-nano-image/" title="create jetson nano image">create jetson nano image</a>
</li>
</ul>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>jetson</tag>
      </tags>
  </entry>
  <entry>
    <title>install hexo server</title>
    <url>/sundries/2020/03/15/install-hexo-server/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-server</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 安装超时</title>
    <url>/sundries/2020/03/15/npm-%E5%AE%89%E8%A3%85%E8%B6%85%E6%97%B6/</url>
    <content><![CDATA[<p>解决办法：</p>
<p>使用淘宝镜像</p>
<p>永久使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>临时使用:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install &lt;package-name&gt; --registry=http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>另外还有其他的源：</p>
<ul>
<li>npm —- <a href="https://registry.npmjs.org/" target="_blank" rel="noopener">https://registry.npmjs.org/</a></li>
<li>cnpm — <a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></li>
<li>taobao - <a href="http://registry.npm.taobao.org/" target="_blank" rel="noopener">http://registry.npm.taobao.org/</a></li>
<li>eu —– <a href="http://registry.npmjs.eu/" target="_blank" rel="noopener">http://registry.npmjs.eu/</a></li>
<li>au —– <a href="http://registry.npmjs.org.au/" target="_blank" rel="noopener">http://registry.npmjs.org.au/</a></li>
<li>sl —– <a href="http://npm.strongloop.com/" target="_blank" rel="noopener">http://npm.strongloop.com/</a></li>
<li>nj —– <a href="https://registry.nodejitsu.com/" target="_blank" rel="noopener">https://registry.nodejitsu.com/</a></li>
</ul>
<blockquote>
<p>source: <a href="https://blog.csdn.net/wangxp/article/details/81535786" target="_blank" rel="noopener">npm 使用安装超时的解决办法</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>在linux系统中挂载img镜像文件</title>
    <url>/sundries/2020/03/13/%E5%9C%A8linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%8C%82%E8%BD%BDimg%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>首先输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo fdisk xxx.img</span><br></pre></td></tr></table></figure>

<p>出现<code>Command (m for help):</code>时，输入<code>p</code></p>
<p>查看sector大小和想要挂载的分区的start位置，将这两值相乘得到offset值</p>
<p>最后输入</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -o loop,offset=2222222 xxx.img /mnt/</span><br></pre></td></tr></table></figure>

<p>其中<code>2222222</code>是计算出来的offset值</p>
<blockquote>
<p>source: <a href="https://blog.csdn.net/yangleo1987/article/details/58603205" target="_blank" rel="noopener">在linux系统中挂载img镜像文件</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Check if a File or Directory Exists in Bash</title>
    <url>/sundries/2020/03/13/How-to-Check-if-a-File-or-Directory-Exists-in-Bash/</url>
    <content><![CDATA[<h2 id="Check-if-File-Exist"><a href="#Check-if-File-Exist" class="headerlink" title="Check if File Exist"></a>Check if File Exist</h2><p>When checking if a file exists, the most commonly used FILE operators are <code>-e</code> and <code>-f</code>. The first one will check whether a file exists regardless of the type, while the second one will return true only if the FILE is a regular file (not a directory or a device).</p>
<p>The most readable option when checking whether a file exist or not is to use the test command in combination with the <a href="https://linuxize.com/post/bash-if-else-statement/" target="_blank" rel="noopener">if statement</a>. Any of the snippets below will check whether the <code>/etc/resolv.conf</code> file exists:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/resolv.conf</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f <span class="string">"<span class="variable">$FILE</span>"</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/resolv.conf</span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/resolv.conf</span><br><span class="line"><span class="keyword">if</span> [[ -f <span class="string">"<span class="variable">$FILE</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Always use <a href="https://linuxize.com/post/echo-command-in-linux-with-examples/" target="_blank" rel="noopener">double quotes</a> to avoid issues when dealing with files containing whitespace in their names.</p>
</blockquote>
<p>You can also use the test command without the if statement. The command after the &amp;&amp; operator will only be executed if the exit status of the test command is true,</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> -f /etc/resolv.conf &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -f /etc/resolv.conf ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[[ -f /etc/resolv.conf ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span></span><br></pre></td></tr></table></figure>

<p>If you want to run a series of command after the <code>&amp;&amp;</code> operator simply enclose the commands in curly brackets separated by <code>;</code> or <code>&amp;&amp;</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -f /etc/resolv.conf ] &amp;&amp; &#123; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span>; cp <span class="string">"<span class="variable">$FILE</span>"</span> /tmp/; &#125;</span><br></pre></td></tr></table></figure>

<p>Opposite to <code>&amp;&amp;</code>, the statement after the <code>||</code> operator will only be executed if the exit status of the test command is <code>false</code>.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -f /etc/resolv.conf ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> exist"</span> || <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> does not exist"</span></span><br></pre></td></tr></table></figure>

<h2 id="Check-if-Directory-Exist"><a href="#Check-if-Directory-Exist" class="headerlink" title="Check if Directory Exist"></a>Check if Directory Exist</h2><p>The operators <code>-d</code> allows you to test whether a file is a directory or not.</p>
<p>For example to check whether the <code>/etc/docker</code> directory exist you would use:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/docker</span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -d /etc/docker ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a directory"</span></span><br></pre></td></tr></table></figure>

<p>You can also use the double brackets <code>[[</code> instead of a single one <code>[</code>.</p>
<h2 id="Check-if-File-does-Not-Exist"><a href="#Check-if-File-does-Not-Exist" class="headerlink" title="Check if File does Not Exist"></a>Check if File does Not Exist</h2><p>Similar to many other languages, the test expression can be negated using the <code>!</code> (exclamation mark) logical not operator:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/docker</span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$FILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> does not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>Same as above:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ ! -f /etc/docker ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> does not exist"</span></span><br></pre></td></tr></table></figure>

<h2 id="Check-if-Multiple-Files-Exist"><a href="#Check-if-Multiple-Files-Exist" class="headerlink" title="Check if Multiple Files Exist"></a>Check if Multiple Files Exist</h2><p>Instead of using complicated nested if/else constructs you can use <code>-a</code> (or <code>&amp;&amp;</code> with <code>[[</code>) to test if multiple files exist:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/docker</span><br><span class="line"><span class="keyword">if</span> [ -f /etc/resolv.conf -a -f /etc/hosts ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">FILE=/etc/docker</span><br><span class="line"><span class="keyword">if</span> [ -f /etc/resolv.conf &amp;&amp; -f /etc/hosts ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$FILE</span> is a directory"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>Equivalent variants without using the IF statement:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[ -f /etc/resolv.conf -a -f /etc/hosts ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"both files exist"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[[ -f /etc/resolv.conf &amp;&amp; -f /etc/hosts ]] &amp;&amp; <span class="built_in">echo</span> <span class="string">"both files exist"</span></span><br></pre></td></tr></table></figure>

<h2 id="File-test-operators"><a href="#File-test-operators" class="headerlink" title="File test operators"></a>File test operators</h2><p>The test command includes the following FILE operators that allow you to test for particular types of files:</p>
<ul>
<li><code>-b</code> <code>FILE</code> - True if the FILE exists and is a block special file.</li>
<li><code>-c</code> <code>FILE</code> - True if the FILE exists and is a special character file.</li>
<li><code>-d</code> <code>FILE</code> - True if the FILE exists and is a directory.</li>
<li><code>-e</code> <code>FILE</code> - True if the FILE exists and is a file, regardless of type (node, directory, socket, etc.).</li>
<li><code>-f</code> <code>FILE</code> - True if the FILE exists and is a regular file (not a directory or device).</li>
<li><code>-G</code> <code>FILE</code> - True if the FILE exists and has the same group as the user running the command.</li>
<li><code>-h</code> <code>FILE</code> - True if the FILE exists and is a symbolic link.</li>
<li><code>-g</code> <code>FILE</code> - True if the FILE exists and has set-group-id (sgid) flag set.</li>
<li><code>-k</code> <code>FILE</code> - True if the FILE exists and has a sticky bit flag set.</li>
<li><code>-L</code> <code>FILE</code> - True if the FILE exists and is a symbolic link.</li>
<li><code>-O</code> <code>FILE</code> - True if the FILE exists and is owned by the user running the command.</li>
<li><code>-p</code> <code>FILE</code> - True if the FILE exists and is a pipe.</li>
<li><code>-r</code> <code>FILE</code> - True if the FILE exists and is readable.</li>
<li><code>-S</code> <code>FILE</code> - True if the FILE exists and is socket.</li>
<li><code>-s</code> <code>FILE</code> - True if the FILE exists and has nonzero size.</li>
<li><code>-u</code> <code>FILE</code> - True if the exists and set-user-id (suid) flag is set.</li>
<li><code>-w</code> <code>FILE</code> - True if the FILE exists and is writable.</li>
<li><code>-x</code> <code>FILE</code> - True if the FILE exists and is executable.</li>
</ul>
<blockquote>
<p>source: <a href="https://linuxize.com/post/bash-check-if-file-exists/" target="_blank" rel="noopener">How to Check if a File or Directory Exists in Bash</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell if else 语句</title>
    <url>/sundries/2020/03/13/Shell-if-else-%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。Shell 有三种 if … else 语句：</p>
<ul>
<li>if … fi 语句；</li>
<li>if … else … fi 语句；</li>
<li>if … elif … else … fi 语句。</li>
</ul>
<h2 id="1-if-…-else-语句"><a href="#1-if-…-else-语句" class="headerlink" title="1) if … else 语句"></a>1) if … else 语句</h2><p>if … else 语句的语法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ expression ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>如果 expression 返回 true，then 后边的语句将会被执行；如果返回 false，不会执行任何语句。</p>
<p>最后必须以 fi 来结尾闭合 if，fi 就是 if 倒过来拼写，后面也会遇见。</p>
<p>注意：expression 和方括号([ ])之间必须有空格，否则会有语法错误。</p>
<p>举个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> != <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">a is not equal to b</span><br></pre></td></tr></table></figure>

<h2 id="2-if-…-else-…-fi-语句"><a href="#2-if-…-else-…-fi-语句" class="headerlink" title="2) if … else … fi 语句"></a>2) if … else … fi 语句</h2><p>if … else … fi 语句的语法：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ expression ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression is not <span class="literal">true</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>如果 expression 返回 true，那么 then 后边的语句将会被执行；否则，执行 else 后边的语句。</p>
<p>举个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is not equal to b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">a is not equal to b</span><br></pre></td></tr></table></figure>

<h2 id="3-if-…-elif-…-fi-语句"><a href="#3-if-…-elif-…-fi-语句" class="headerlink" title="3) if … elif … fi 语句"></a>3) if … elif … fi 语句</h2><p>if … elif … fi 语句可以对多个条件进行判断，语法为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ expression 1 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression 1 is <span class="literal">true</span></span><br><span class="line"><span class="keyword">elif</span> [ expression 2 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression 2 is <span class="literal">true</span></span><br><span class="line"><span class="keyword">elif</span> [ expression 3 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> expression 3 is <span class="literal">true</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   Statement(s) to be executed <span class="keyword">if</span> no expression is <span class="literal">true</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>哪一个 expression 的值为 true，就执行哪个 expression 后面的语句；如果都为 false，那么不执行任何语句。</p>
<p>举个例子：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> == <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is equal to b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -gt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is greater than b"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"a is less than b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"None of the condition met"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><code>a is less than b</code></p>
<p>if … else 语句也可以写成一行，以命令的方式来运行，像这样：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[2*3] -eq $[1+5]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">'The two numbers are equal!'</span>; <span class="keyword">fi</span>;</span><br></pre></td></tr></table></figure>

<p>if … else 语句也经常与 test 命令结合使用，如下所示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">num1=$[2*3]</span><br><span class="line">num2=$[1+5]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[num1] -eq $[num2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'The two numbers are equal!'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'The two numbers are not equal!'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><code>The two numbers are equal!</code></p>
<p>test 命令用于检查某个条件是否成立，与方括号([ ])类似。</p>
<blockquote>
<p>source: <a href="https://wiki.jikexueyuan.com/project/shell-tutorial/shell-if-else-statement.html" target="_blank" rel="noopener">Shell if else 语句</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>shell 编程 错误 bash: [: missing ]</title>
    <url>/sundries/2020/03/13/shell-%E7%BC%96%E7%A8%8B-%E9%94%99%E8%AF%AF-bash-missing/</url>
    <content><![CDATA[<p>eg:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$HEADER</span>"</span> = <span class="string">"true"</span>] ;<span class="keyword">then</span></span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p><code>[</code> 和 <code>]</code> 两边增加空格</p>
]]></content>
      <tags>
        <tag>shell</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>git 设置和取消代理</title>
    <url>/sundries/2020/03/13/git-%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="只对github-com"><a href="#只对github-com" class="headerlink" title="只对github.com"></a>只对github.com</h2><p><code>git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</code></p>
<h2 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h2><p><code>git config --global --unset http.https://github.com.proxy</code></p>
<blockquote>
<p>source: <a href="https://gist.github.com/laispace/666dd7b27e9116faece6" target="_blank" rel="noopener">git 设置和取消代理</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
</search>
